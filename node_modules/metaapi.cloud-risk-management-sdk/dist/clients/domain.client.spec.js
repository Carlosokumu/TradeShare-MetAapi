'use strict';

var _httpClient = require('./httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('./domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _errorHandler = require('./errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {DomainClient}
 */
describe('DomainClient', () => {

  let domainClient;
  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let sandbox;
  let requestStub;
  let getRegionsStub;
  let getHostStub;
  let clock;
  const expected = [{ _id: 'ABCD' }];

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    domainClient = new _domain2.default(httpClient, token, 'risk-management-api-v1');
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    requestStub = sandbox.stub(httpClient, 'request');
    requestStub.withArgs({
      url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
      method: 'GET',
      headers: { 'auth-token': token },
      json: true
    }).resolves(expected);
    getRegionsStub = requestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/regions',
      method: 'GET',
      headers: { 'auth-token': token },
      json: true
    }).resolves(['vint-hill', 'us-west']);
    getHostStub = requestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/servers/mt-client-api',
      method: 'GET',
      headers: { 'auth-token': token },
      json: true
    }).resolves({ domain: 'agiliumtrade.agiliumtrade.ai' });
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  /**
   * @test {DomainClient#requestApi}
   */
  describe('requestApi', () => {

    const opts = {
      url: '/some/rest/api',
      method: 'GET'
    };

    /**
     * @test {DomainClient#requestApi}
     */
    it('should execute request', async () => {
      const response = await domainClient.requestApi(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
        method: 'GET',
        headers: { 'auth-token': token },
        json: true
      });
    });

    /**
     * @test {DomainClient#requestApi}
     */
    it('should use cached url on repeated request', async () => {
      await domainClient.requestApi(opts);
      const response = await domainClient.requestApi(opts);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
        method: 'GET',
        headers: { 'auth-token': token },
        json: true
      });
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledOnce(getHostStub);
      _sinon2.default.assert.calledOnce(getRegionsStub);
    });

    /**
     * @test {DomainClient#requestApi}
     */
    it('should request url again if expired', async () => {
      await domainClient.requestApi(opts);
      await clock.tickAsync(610000);
      const response = await domainClient.requestApi(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
        method: 'GET',
        headers: { 'auth-token': token },
        json: true
      });
      _sinon2.default.assert.calledTwice(getHostStub);
      _sinon2.default.assert.calledTwice(getRegionsStub);
    });

    /**
     * @test {DomainClient#requestApi}
     */
    it('should return request error', async () => {
      requestStub.withArgs({
        url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
        method: 'GET',
        headers: { 'auth-token': token },
        json: true
      }).throws(new _errorHandler.ValidationError('test'));
      try {
        await domainClient.requestApi(opts);
        throw new Error('ValidationError expected');
      } catch (error) {
        error.name.should.equal('ValidationError');
      }
    });

    /**
     * @test {DomainClient#requestApi}
     */
    it('should return error if failed to get host', async () => {
      getHostStub.throws(new _errorHandler.ValidationError('test'));
      try {
        await domainClient.requestApi(opts);
        throw new Error('ValidationError expected');
      } catch (error) {
        error.name.should.equal('ValidationError');
      }
    });

    /**
     * @test {DomainClient#requestApi}
     */
    describe('regions', () => {

      /**
       * @test {DomainClient#requestApi}
       */
      it('should return error if failed to get regions', async () => {
        getRegionsStub.throws(new _errorHandler.ValidationError('test'));
        try {
          await domainClient.requestApi(opts);
          throw new Error('ValidationError expected');
        } catch (error) {
          error.name.should.equal('ValidationError');
        }
      });

      /**
       * @test {DomainClient#requestApi}
       */
      it('should try another region if the first failed', async () => {
        requestStub.withArgs({
          url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).rejects(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://risk-management-api-v1.us-west.agiliumtrade.agiliumtrade.ai/some/rest/api',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).resolves(expected);
        const response = await domainClient.requestApi(opts);
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://risk-management-api-v1.us-west.agiliumtrade.agiliumtrade.ai/some/rest/api',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
        _sinon2.default.assert.match(response, expected);

        _sinon2.default.assert.calledOnce(getHostStub);
        _sinon2.default.assert.calledOnce(getRegionsStub);
      });

      /**
       * @test {DomainClient#requestApi}
       */
      it('should return error if all regions failed', async () => {
        requestStub.withArgs({
          url: 'https://risk-management-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/some/rest/api',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).throws(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://risk-management-api-v1.us-west.agiliumtrade.agiliumtrade.ai/some/rest/api',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).throws(new _errorHandler.InternalError('test'));

        try {
          await domainClient.requestApi(opts);
          throw new Error('InternalError expected');
        } catch (error) {
          error.name.should.equal('InternalError');
        }
      });
    });
  });

  /**
   * @test {DomainClient#request}
   */
  describe('request', () => {

    it('should execute request', async () => {
      const opts = {
        url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
        method: 'GET',
        headers: {
          'auth-token': token
        },
        json: true
      };

      requestStub.withArgs(opts).resolves(expected);
      const response = await domainClient.request(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, opts);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,