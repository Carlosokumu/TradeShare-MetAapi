'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _randomstring = require('randomstring');

var _randomstring2 = _interopRequireDefault(_randomstring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Drawdown event listener manager
 */
class DrawdownListenerManager {

  /**
   * Constructs drawdown listener manager instance
   * @param {DomainClient} domainClient domain client
   */
  constructor(domainClient) {
    this._domainClient = domainClient;
    this._drawdownListeners = {};
    this._errorThrottleTime = 1000;
  }

  /**
   * Returns the dictionary of drawdown listeners
   * @returns {{[listenerId: string]: DrawdownListener}} dictionary of drawdown listeners
   */
  get drawdownListeners() {
    return this._drawdownListeners;
  }

  /**
   * Adds a drawdown listener
   * @param {DrawdownListener} listener drawdown listener 
   * @param {String} [accountId] account id
   * @param {String} [trackerId] tracker id
   * @param {Number} [sequenceNumber] event sequence number
   * @returns {String} drawdown listener id
   */
  addDrawdownListener(listener, accountId, trackerId, sequenceNumber) {
    const listenerId = _randomstring2.default.generate(10);
    this._drawdownListeners[listenerId] = listener;
    this._startDrawdownEventJob(listenerId, listener, accountId, trackerId, sequenceNumber);
    return listenerId;
  }

  /**
   * Removes drawdown listener by id
   * @param {String} listenerId listener id 
   */
  removeDrawdownListener(listenerId) {
    delete this._drawdownListeners[listenerId];
  }

  async _startDrawdownEventJob(listenerId, listener, accountId, trackerId, sequenceNumber) {
    let throttleTime = this._errorThrottleTime;

    while (this._drawdownListeners[listenerId]) {
      try {
        const packets = await this._domainClient.requestApi({
          url: '/users/current/drawdown-events/stream',
          method: 'GET',
          qs: {
            previousSequenceNumber: sequenceNumber,
            accountId, trackerId,
            limit: 1000
          }
        }, true);
        for (let packet of packets) {
          await listener.onDrawdown(packet);
        }
        throttleTime = this._errorThrottleTime;
        if (this._drawdownListeners[listenerId] && packets.length) {
          sequenceNumber = packets.slice(-1)[0].sequenceNumber;
        }
      } catch (error) {
        await new _promise2.default(res => setTimeout(res, throttleTime));
        throttleTime = Math.min(throttleTime * 2, 30000);
      }
    }
  }

}
exports.default = DrawdownListenerManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGllbnRzL2VxdWl0eVRyYWNraW5nL2RyYXdkb3duTGlzdGVuZXJNYW5hZ2VyLmVzNiJdLCJuYW1lcyI6WyJEcmF3ZG93bkxpc3RlbmVyTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiZG9tYWluQ2xpZW50IiwiX2RvbWFpbkNsaWVudCIsIl9kcmF3ZG93bkxpc3RlbmVycyIsIl9lcnJvclRocm90dGxlVGltZSIsImRyYXdkb3duTGlzdGVuZXJzIiwiYWRkRHJhd2Rvd25MaXN0ZW5lciIsImxpc3RlbmVyIiwiYWNjb3VudElkIiwidHJhY2tlcklkIiwic2VxdWVuY2VOdW1iZXIiLCJsaXN0ZW5lcklkIiwicmFuZG9tc3RyaW5nIiwiZ2VuZXJhdGUiLCJfc3RhcnREcmF3ZG93bkV2ZW50Sm9iIiwicmVtb3ZlRHJhd2Rvd25MaXN0ZW5lciIsInRocm90dGxlVGltZSIsInBhY2tldHMiLCJyZXF1ZXN0QXBpIiwidXJsIiwibWV0aG9kIiwicXMiLCJwcmV2aW91c1NlcXVlbmNlTnVtYmVyIiwibGltaXQiLCJwYWNrZXQiLCJvbkRyYXdkb3duIiwibGVuZ3RoIiwic2xpY2UiLCJlcnJvciIsInJlcyIsInNldFRpbWVvdXQiLCJNYXRoIiwibWluIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBOzs7Ozs7QUFFQTs7O0FBR2UsTUFBTUEsdUJBQU4sQ0FBOEI7O0FBRTNDOzs7O0FBSUFDLGNBQVlDLFlBQVosRUFBMEI7QUFDeEIsU0FBS0MsYUFBTCxHQUFxQkQsWUFBckI7QUFDQSxTQUFLRSxrQkFBTCxHQUEwQixFQUExQjtBQUNBLFNBQUtDLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxNQUFJQyxpQkFBSixHQUF3QjtBQUN0QixXQUFPLEtBQUtGLGtCQUFaO0FBQ0Q7O0FBRUQ7Ozs7Ozs7O0FBUUFHLHNCQUFvQkMsUUFBcEIsRUFBOEJDLFNBQTlCLEVBQXlDQyxTQUF6QyxFQUFvREMsY0FBcEQsRUFBb0U7QUFDbEUsVUFBTUMsYUFBYUMsdUJBQWFDLFFBQWIsQ0FBc0IsRUFBdEIsQ0FBbkI7QUFDQSxTQUFLVixrQkFBTCxDQUF3QlEsVUFBeEIsSUFBc0NKLFFBQXRDO0FBQ0EsU0FBS08sc0JBQUwsQ0FBNEJILFVBQTVCLEVBQXdDSixRQUF4QyxFQUFrREMsU0FBbEQsRUFBNkRDLFNBQTdELEVBQXdFQyxjQUF4RTtBQUNBLFdBQU9DLFVBQVA7QUFDRDs7QUFFRDs7OztBQUlBSSx5QkFBdUJKLFVBQXZCLEVBQW1DO0FBQ2pDLFdBQU8sS0FBS1Isa0JBQUwsQ0FBd0JRLFVBQXhCLENBQVA7QUFDRDs7QUFFRCxRQUFNRyxzQkFBTixDQUE2QkgsVUFBN0IsRUFBeUNKLFFBQXpDLEVBQW1EQyxTQUFuRCxFQUE4REMsU0FBOUQsRUFBeUVDLGNBQXpFLEVBQXlGO0FBQ3ZGLFFBQUlNLGVBQWUsS0FBS1osa0JBQXhCOztBQUVBLFdBQU8sS0FBS0Qsa0JBQUwsQ0FBd0JRLFVBQXhCLENBQVAsRUFBNEM7QUFDMUMsVUFBSTtBQUNGLGNBQU1NLFVBQVUsTUFBTSxLQUFLZixhQUFMLENBQW1CZ0IsVUFBbkIsQ0FBOEI7QUFDbERDLGVBQUssdUNBRDZDO0FBRWxEQyxrQkFBUSxLQUYwQztBQUdsREMsY0FBSTtBQUNGQyxvQ0FBd0JaLGNBRHRCO0FBRUZGLHFCQUZFLEVBRVNDLFNBRlQ7QUFHRmMsbUJBQU87QUFITDtBQUg4QyxTQUE5QixFQVFuQixJQVJtQixDQUF0QjtBQVNBLGFBQUssSUFBSUMsTUFBVCxJQUFtQlAsT0FBbkIsRUFBNEI7QUFDMUIsZ0JBQU1WLFNBQVNrQixVQUFULENBQW9CRCxNQUFwQixDQUFOO0FBQ0Q7QUFDRFIsdUJBQWUsS0FBS1osa0JBQXBCO0FBQ0EsWUFBSSxLQUFLRCxrQkFBTCxDQUF3QlEsVUFBeEIsS0FBdUNNLFFBQVFTLE1BQW5ELEVBQTJEO0FBQ3pEaEIsMkJBQWlCTyxRQUFRVSxLQUFSLENBQWMsQ0FBQyxDQUFmLEVBQWtCLENBQWxCLEVBQXFCakIsY0FBdEM7QUFDRDtBQUNGLE9BakJELENBaUJFLE9BQU9rQixLQUFQLEVBQWM7QUFDZCxjQUFNLHNCQUFZQyxPQUFPQyxXQUFXRCxHQUFYLEVBQWdCYixZQUFoQixDQUFuQixDQUFOO0FBQ0FBLHVCQUFlZSxLQUFLQyxHQUFMLENBQVNoQixlQUFlLENBQXhCLEVBQTJCLEtBQTNCLENBQWY7QUFDRDtBQUNGO0FBQ0Y7O0FBckUwQztrQkFBeEJqQix1QiIsImZpbGUiOiJkcmF3ZG93bkxpc3RlbmVyTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHJhbmRvbXN0cmluZyBmcm9tICdyYW5kb21zdHJpbmcnO1xuXG4vKipcbiAqIERyYXdkb3duIGV2ZW50IGxpc3RlbmVyIG1hbmFnZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhd2Rvd25MaXN0ZW5lck1hbmFnZXIge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGRyYXdkb3duIGxpc3RlbmVyIG1hbmFnZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtEb21haW5DbGllbnR9IGRvbWFpbkNsaWVudCBkb21haW4gY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21haW5DbGllbnQpIHtcbiAgICB0aGlzLl9kb21haW5DbGllbnQgPSBkb21haW5DbGllbnQ7XG4gICAgdGhpcy5fZHJhd2Rvd25MaXN0ZW5lcnMgPSB7fTtcbiAgICB0aGlzLl9lcnJvclRocm90dGxlVGltZSA9IDEwMDA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGljdGlvbmFyeSBvZiBkcmF3ZG93biBsaXN0ZW5lcnNcbiAgICogQHJldHVybnMge3tbbGlzdGVuZXJJZDogc3RyaW5nXTogRHJhd2Rvd25MaXN0ZW5lcn19IGRpY3Rpb25hcnkgb2YgZHJhd2Rvd24gbGlzdGVuZXJzXG4gICAqL1xuICBnZXQgZHJhd2Rvd25MaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RyYXdkb3duTGlzdGVuZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBkcmF3ZG93biBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge0RyYXdkb3duTGlzdGVuZXJ9IGxpc3RlbmVyIGRyYXdkb3duIGxpc3RlbmVyIFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2FjY291bnRJZF0gYWNjb3VudCBpZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3RyYWNrZXJJZF0gdHJhY2tlciBpZFxuICAgKiBAcGFyYW0ge051bWJlcn0gW3NlcXVlbmNlTnVtYmVyXSBldmVudCBzZXF1ZW5jZSBudW1iZXJcbiAgICogQHJldHVybnMge1N0cmluZ30gZHJhd2Rvd24gbGlzdGVuZXIgaWRcbiAgICovXG4gIGFkZERyYXdkb3duTGlzdGVuZXIobGlzdGVuZXIsIGFjY291bnRJZCwgdHJhY2tlcklkLCBzZXF1ZW5jZU51bWJlcikge1xuICAgIGNvbnN0IGxpc3RlbmVySWQgPSByYW5kb21zdHJpbmcuZ2VuZXJhdGUoMTApO1xuICAgIHRoaXMuX2RyYXdkb3duTGlzdGVuZXJzW2xpc3RlbmVySWRdID0gbGlzdGVuZXI7XG4gICAgdGhpcy5fc3RhcnREcmF3ZG93bkV2ZW50Sm9iKGxpc3RlbmVySWQsIGxpc3RlbmVyLCBhY2NvdW50SWQsIHRyYWNrZXJJZCwgc2VxdWVuY2VOdW1iZXIpO1xuICAgIHJldHVybiBsaXN0ZW5lcklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZHJhd2Rvd24gbGlzdGVuZXIgYnkgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxpc3RlbmVySWQgbGlzdGVuZXIgaWQgXG4gICAqL1xuICByZW1vdmVEcmF3ZG93bkxpc3RlbmVyKGxpc3RlbmVySWQpIHtcbiAgICBkZWxldGUgdGhpcy5fZHJhd2Rvd25MaXN0ZW5lcnNbbGlzdGVuZXJJZF07XG4gIH1cblxuICBhc3luYyBfc3RhcnREcmF3ZG93bkV2ZW50Sm9iKGxpc3RlbmVySWQsIGxpc3RlbmVyLCBhY2NvdW50SWQsIHRyYWNrZXJJZCwgc2VxdWVuY2VOdW1iZXIpIHtcbiAgICBsZXQgdGhyb3R0bGVUaW1lID0gdGhpcy5fZXJyb3JUaHJvdHRsZVRpbWU7XG5cbiAgICB3aGlsZSAodGhpcy5fZHJhd2Rvd25MaXN0ZW5lcnNbbGlzdGVuZXJJZF0pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhY2tldHMgPSBhd2FpdCB0aGlzLl9kb21haW5DbGllbnQucmVxdWVzdEFwaSh7XG4gICAgICAgICAgdXJsOiAnL3VzZXJzL2N1cnJlbnQvZHJhd2Rvd24tZXZlbnRzL3N0cmVhbScsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBxczoge1xuICAgICAgICAgICAgcHJldmlvdXNTZXF1ZW5jZU51bWJlcjogc2VxdWVuY2VOdW1iZXIsXG4gICAgICAgICAgICBhY2NvdW50SWQsIHRyYWNrZXJJZCxcbiAgICAgICAgICAgIGxpbWl0OiAxMDAwXG4gICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgZm9yIChsZXQgcGFja2V0IG9mIHBhY2tldHMpIHtcbiAgICAgICAgICBhd2FpdCBsaXN0ZW5lci5vbkRyYXdkb3duKHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3R0bGVUaW1lID0gdGhpcy5fZXJyb3JUaHJvdHRsZVRpbWU7XG4gICAgICAgIGlmICh0aGlzLl9kcmF3ZG93bkxpc3RlbmVyc1tsaXN0ZW5lcklkXSAmJiBwYWNrZXRzLmxlbmd0aCkge1xuICAgICAgICAgIHNlcXVlbmNlTnVtYmVyID0gcGFja2V0cy5zbGljZSgtMSlbMF0uc2VxdWVuY2VOdW1iZXI7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgdGhyb3R0bGVUaW1lKSk7XG4gICAgICAgIHRocm90dGxlVGltZSA9IE1hdGgubWluKHRocm90dGxlVGltZSAqIDIsIDMwMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19