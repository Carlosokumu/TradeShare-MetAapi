'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _httpClient = require('./clients/httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _equityTracking = require('./clients/equityTracking/equityTracking.client');

var _equityTracking2 = _interopRequireDefault(_equityTracking);

var _domain = require('./clients/domain.client');

var _domain2 = _interopRequireDefault(_domain);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * MetaApi risk management API SDK
 */
class RiskManagement {

  /**
   * Risk management SDK options
   * @typedef RiskManagementOptions
   * @property {String} [domain] domain to connect to
   * @property {Number} [requestTimeout] timeout for http requests in seconds
   * @property {Number} [extendedTimeout] timeout for extended http requests in seconds
   * @property {RetryOptions} [retryOpts] retry options for http requests
   */

  /**
   * Constructs class instance
   * @param {String} token authorization API token (access tokens are not supported)
   * @param {RiskManagementOptions} opts connection options
   */
  constructor(token, opts = {}) {
    this._domain = opts.domain || 'agiliumtrade.agiliumtrade.ai';
    let requestTimeout = opts.requestTimeout || 10;
    let requestExtendedTimeout = opts.extendedTimeout || 70;
    let retryOpts = opts.retryOpts || {};
    this._httpClient = new _httpClient2.default(requestTimeout, requestExtendedTimeout, retryOpts);
    this._domainClient = new _domain2.default(this._httpClient, token, 'risk-management-api-v1', this._domain);
    this._equityTrackingClient = new _equityTracking2.default(this._domainClient);
  }

  /**
   * Returns RiskManagement equity tracking API
   * @returns {EquityTrackingClient} tracking API
   */
  get riskManagementApi() {
    return this._equityTrackingClient;
  }

}
exports.default = RiskManagement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9yaXNrTWFuYWdlbWVudC5lczYiXSwibmFtZXMiOlsiUmlza01hbmFnZW1lbnQiLCJjb25zdHJ1Y3RvciIsInRva2VuIiwib3B0cyIsIl9kb21haW4iLCJkb21haW4iLCJyZXF1ZXN0VGltZW91dCIsInJlcXVlc3RFeHRlbmRlZFRpbWVvdXQiLCJleHRlbmRlZFRpbWVvdXQiLCJyZXRyeU9wdHMiLCJfaHR0cENsaWVudCIsIkh0dHBDbGllbnQiLCJfZG9tYWluQ2xpZW50IiwiRG9tYWluQ2xpZW50IiwiX2VxdWl0eVRyYWNraW5nQ2xpZW50IiwiRXF1aXR5VHJhY2tpbmdDbGllbnQiLCJyaXNrTWFuYWdlbWVudEFwaSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7OztBQUdlLE1BQU1BLGNBQU4sQ0FBcUI7O0FBRWxDOzs7Ozs7Ozs7QUFTQTs7Ozs7QUFLQUMsY0FBWUMsS0FBWixFQUFtQkMsT0FBTyxFQUExQixFQUE4QjtBQUM1QixTQUFLQyxPQUFMLEdBQWVELEtBQUtFLE1BQUwsSUFBZSw4QkFBOUI7QUFDQSxRQUFJQyxpQkFBaUJILEtBQUtHLGNBQUwsSUFBdUIsRUFBNUM7QUFDQSxRQUFJQyx5QkFBeUJKLEtBQUtLLGVBQUwsSUFBd0IsRUFBckQ7QUFDQSxRQUFJQyxZQUFZTixLQUFLTSxTQUFMLElBQWtCLEVBQWxDO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixJQUFJQyxvQkFBSixDQUFlTCxjQUFmLEVBQStCQyxzQkFBL0IsRUFBdURFLFNBQXZELENBQW5CO0FBQ0EsU0FBS0csYUFBTCxHQUFxQixJQUFJQyxnQkFBSixDQUFpQixLQUFLSCxXQUF0QixFQUFtQ1IsS0FBbkMsRUFBMEMsd0JBQTFDLEVBQW9FLEtBQUtFLE9BQXpFLENBQXJCO0FBQ0EsU0FBS1UscUJBQUwsR0FBNkIsSUFBSUMsd0JBQUosQ0FBeUIsS0FBS0gsYUFBOUIsQ0FBN0I7QUFDRDs7QUFFRDs7OztBQUlBLE1BQUlJLGlCQUFKLEdBQXdCO0FBQ3RCLFdBQU8sS0FBS0YscUJBQVo7QUFDRDs7QUFoQ2lDO2tCQUFmZCxjIiwiZmlsZSI6InJpc2tNYW5hZ2VtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgSHR0cENsaWVudCBmcm9tICcuL2NsaWVudHMvaHR0cENsaWVudCc7XG5pbXBvcnQgRXF1aXR5VHJhY2tpbmdDbGllbnQgZnJvbSAnLi9jbGllbnRzL2VxdWl0eVRyYWNraW5nL2VxdWl0eVRyYWNraW5nLmNsaWVudCc7XG5pbXBvcnQgRG9tYWluQ2xpZW50IGZyb20gJy4vY2xpZW50cy9kb21haW4uY2xpZW50JztcblxuLyoqXG4gKiBNZXRhQXBpIHJpc2sgbWFuYWdlbWVudCBBUEkgU0RLXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJpc2tNYW5hZ2VtZW50IHtcblxuICAvKipcbiAgICogUmlzayBtYW5hZ2VtZW50IFNESyBvcHRpb25zXG4gICAqIEB0eXBlZGVmIFJpc2tNYW5hZ2VtZW50T3B0aW9uc1xuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW2RvbWFpbl0gZG9tYWluIHRvIGNvbm5lY3QgdG9cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyZXF1ZXN0VGltZW91dF0gdGltZW91dCBmb3IgaHR0cCByZXF1ZXN0cyBpbiBzZWNvbmRzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZXh0ZW5kZWRUaW1lb3V0XSB0aW1lb3V0IGZvciBleHRlbmRlZCBodHRwIHJlcXVlc3RzIGluIHNlY29uZHNcbiAgICogQHByb3BlcnR5IHtSZXRyeU9wdGlvbnN9IFtyZXRyeU9wdHNdIHJldHJ5IG9wdGlvbnMgZm9yIGh0dHAgcmVxdWVzdHNcbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgY2xhc3MgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIGF1dGhvcml6YXRpb24gQVBJIHRva2VuIChhY2Nlc3MgdG9rZW5zIGFyZSBub3Qgc3VwcG9ydGVkKVxuICAgKiBAcGFyYW0ge1Jpc2tNYW5hZ2VtZW50T3B0aW9uc30gb3B0cyBjb25uZWN0aW9uIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRva2VuLCBvcHRzID0ge30pIHtcbiAgICB0aGlzLl9kb21haW4gPSBvcHRzLmRvbWFpbiB8fCAnYWdpbGl1bXRyYWRlLmFnaWxpdW10cmFkZS5haSc7XG4gICAgbGV0IHJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dCB8fCAxMDtcbiAgICBsZXQgcmVxdWVzdEV4dGVuZGVkVGltZW91dCA9IG9wdHMuZXh0ZW5kZWRUaW1lb3V0IHx8IDcwO1xuICAgIGxldCByZXRyeU9wdHMgPSBvcHRzLnJldHJ5T3B0cyB8fCB7fTtcbiAgICB0aGlzLl9odHRwQ2xpZW50ID0gbmV3IEh0dHBDbGllbnQocmVxdWVzdFRpbWVvdXQsIHJlcXVlc3RFeHRlbmRlZFRpbWVvdXQsIHJldHJ5T3B0cyk7XG4gICAgdGhpcy5fZG9tYWluQ2xpZW50ID0gbmV3IERvbWFpbkNsaWVudCh0aGlzLl9odHRwQ2xpZW50LCB0b2tlbiwgJ3Jpc2stbWFuYWdlbWVudC1hcGktdjEnLCB0aGlzLl9kb21haW4pO1xuICAgIHRoaXMuX2VxdWl0eVRyYWNraW5nQ2xpZW50ID0gbmV3IEVxdWl0eVRyYWNraW5nQ2xpZW50KHRoaXMuX2RvbWFpbkNsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBSaXNrTWFuYWdlbWVudCBlcXVpdHkgdHJhY2tpbmcgQVBJXG4gICAqIEByZXR1cm5zIHtFcXVpdHlUcmFja2luZ0NsaWVudH0gdHJhY2tpbmcgQVBJXG4gICAqL1xuICBnZXQgcmlza01hbmFnZW1lbnRBcGkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VxdWl0eVRyYWNraW5nQ2xpZW50O1xuICB9XG5cbn1cbiJdfQ==