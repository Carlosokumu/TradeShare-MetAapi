'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('../../httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('../../domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _userLogListener = require('./userLogListener');

var _userLogListener2 = _interopRequireDefault(_userLogListener);

var _transactionListenerManager = require('./transactionListenerManager');

var _transactionListenerManager2 = _interopRequireDefault(_transactionListenerManager);

var _errorHandler = require('../../errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {TransactionListenerManager}
 */
describe('TransactionListenerManager', () => {

  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let domainClient;
  let sandbox;
  let clock;
  let transactionListenerManager;
  let getTransactionsStub, listener, callStub;

  let expected = [{
    id: '64664661:close',
    type: 'DEAL_TYPE_SELL',
    time: new Date('2020-08-08T08:57:30.328Z')
  }, {
    id: '64664660:close',
    type: 'DEAL_TYPE_SELL',
    time: new Date('2020-08-08T07:57:30.328Z')
  }];

  let expected2 = [{
    id: '64664663:close',
    type: 'DEAL_TYPE_SELL',
    time: new Date('2020-08-08T10:57:30.328Z')
  }, {
    id: '64664662:close',
    type: 'DEAL_TYPE_SELL',
    time: new Date('2020-08-08T09:57:30.328Z')
  }];

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    domainClient = new _domain2.default(httpClient, token);
    transactionListenerManager = new _transactionListenerManager2.default(domainClient);
    getTransactionsStub = sandbox.stub(domainClient, 'requestCopyFactory');
    callStub = _sinon2.default.stub();

    class Listener extends _userLogListener2.default {

      async onTransaction(transactionEvent) {
        console.log('EVENT', transactionEvent);
        callStub(transactionEvent);
      }

    }

    listener = new Listener();
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  describe('Strategy transactions', () => {

    beforeEach(() => {
      getTransactionsStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return [];
      }).withArgs({
        url: '/users/current/strategies/ABCD/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected;
      }).withArgs({
        url: '/users/current/strategies/ABCD/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected2;
      });
    });

    /**
     * @test {TransactionListenerManager#addStrategyTransactionListener}
     */
    it('should add listener', async () => {
      const id = transactionListenerManager.addStrategyTransactionListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.calledWith(callStub, expected2);
      transactionListenerManager.removeStrategyTransactionListener(id);
    });

    /**
     * @test {TransactionListenerManager#addStrategyTransactionListener}
     */
    it('should remove listener', async () => {
      const id = transactionListenerManager.addStrategyTransactionListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(800);
      transactionListenerManager.removeStrategyTransactionListener(id);
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.callCount(callStub, 1);
    });

    /**
     * @test {TransactionListenerManager#addStrategyTransactionListener}
     */
    it('should wait if error returned', async () => {
      getTransactionsStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return [];
      }).withArgs({
        url: '/users/current/strategies/ABCD/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return expected;
      }).onFirstCall().rejects(new Error('test')).onSecondCall().rejects(new Error('test'));
      const id = transactionListenerManager.addStrategyTransactionListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getTransactionsStub, 1);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(2000);
      _sinon2.default.assert.callCount(getTransactionsStub, 3);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(800);
      _sinon2.default.assert.calledWith(callStub, expected);
      transactionListenerManager.removeStrategyTransactionListener(id);
    });

    /**
     * @test {TransactionListenerManager#addStrategyTransactionListener}
     */
    it('should remove listener on not found error', async () => {
      getTransactionsStub.withArgs({
        url: '/users/current/strategies/ABCD/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        throw new _errorHandler.NotFoundError('test');
      });
      transactionListenerManager.addStrategyTransactionListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(100);
      _sinon2.default.assert.callCount(getTransactionsStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1100);
      _sinon2.default.assert.callCount(callStub, 1);
    });
  });

  describe('Subscriber transactions', () => {

    beforeEach(() => {
      getTransactionsStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return [];
      }).withArgs({
        url: '/users/current/subscribers/accountId/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected;
      }).withArgs({
        url: '/users/current/subscribers/accountId/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected2;
      });
    });

    /**
     * @test {TransactionListenerManager#addSubscriberTransactionListener}
     */
    it('should add listener', async () => {
      const id = transactionListenerManager.addSubscriberTransactionListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.calledWith(callStub, expected2);
      transactionListenerManager.removeSubscriberTransactionListener(id);
    });

    /**
     * @test {TransactionListenerManager#addSubscriberTransactionListener}
     */
    it('should remove listener', async () => {
      const id = transactionListenerManager.addSubscriberTransactionListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(800);
      transactionListenerManager.removeSubscriberTransactionListener(id);
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.callCount(callStub, 1);
    });

    /**
     * @test {TransactionListenerManager#addSubscriberTransactionListener}
     */
    it('should wait if error returned', async () => {
      getTransactionsStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return [];
      }).withArgs({
        url: '/users/current/subscribers/accountId/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return expected;
      }).onFirstCall().rejects(new Error('test')).onSecondCall().rejects(new Error('test'));
      const id = transactionListenerManager.addSubscriberTransactionListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getTransactionsStub, 1);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(2000);
      _sinon2.default.assert.callCount(getTransactionsStub, 3);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(800);
      _sinon2.default.assert.calledWith(callStub, expected);
      transactionListenerManager.removeSubscriberTransactionListener(id);
    });

    /**
     * @test {TransactionListenerManager#addSubscriberTransactionListener}
     */
    it('should remove listener on not found error', async () => {
      getTransactionsStub.withArgs({
        url: '/users/current/subscribers/accountId/transactions/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        throw new _errorHandler.NotFoundError('test');
      });
      transactionListenerManager.addSubscriberTransactionListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(100);
      _sinon2.default.assert.callCount(getTransactionsStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getTransactionsStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1100);
      _sinon2.default.assert.callCount(callStub, 1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,