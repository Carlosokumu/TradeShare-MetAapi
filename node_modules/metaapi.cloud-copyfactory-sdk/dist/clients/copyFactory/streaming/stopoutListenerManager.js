'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _metaApi = require('../../metaApi.client');

var _metaApi2 = _interopRequireDefault(_metaApi);

var _randomstring = require('randomstring');

var _randomstring2 = _interopRequireDefault(_randomstring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Stopout event listener manager
 */
class StopoutListenerManager extends _metaApi2.default {

  /**
   * Constructs stopout listener manager instance
   * @param {DomainClient} domainClient domain client
   */
  constructor(domainClient) {
    super(domainClient);
    this._domainClient = domainClient;
    this._stopoutListeners = {};
    this._errorThrottleTime = 1000;
  }

  /**
   * Returns the dictionary of stopout listeners
   * @returns {Object} dictionary of stopout listeners
   */
  get stopoutListeners() {
    return this._stopoutListeners;
  }

  /**
   * Adds a stopout listener
   * @param {StopoutListener} listener 
   * @param {String} [accountId] account id
   * @param {String} [strategyId] strategy id
   * @param {Number} [sequenceNumber] event sequence number
   * @returns {String} stopout listener id
   */
  addStopoutListener(listener, accountId, strategyId, sequenceNumber) {
    const listenerId = _randomstring2.default.generate(10);
    this._stopoutListeners[listenerId] = listener;
    this._startStopoutEventJob(listenerId, listener, accountId, strategyId, sequenceNumber);
    return listenerId;
  }

  /**
   * Removes stopout listener by id
   * @param {String} listenerId listener id 
   */
  removeStopoutListener(listenerId) {
    delete this._stopoutListeners[listenerId];
  }

  async _startStopoutEventJob(listenerId, listener, accountId, strategyId, sequenceNumber) {
    let throttleTime = this._errorThrottleTime;

    while (this._stopoutListeners[listenerId]) {
      const opts = {
        url: '/users/current/stopouts/stream',
        method: 'GET',
        qs: {
          previousSequenceNumber: sequenceNumber,
          subscriberId: accountId,
          strategyId: strategyId,
          limit: 1000
        },
        headers: {
          'auth-token': this._token
        },
        json: true
      };
      try {
        const packets = await this._domainClient.requestCopyFactory(opts, true);
        await listener.onStopout(packets);
        throttleTime = this._errorThrottleTime;
        if (this._stopoutListeners[listenerId] && packets.length) {
          sequenceNumber = packets.slice(-1)[0].sequenceNumber;
        }
      } catch (error) {
        await new _promise2.default(res => setTimeout(res, throttleTime));
        throttleTime = Math.min(throttleTime * 2, 30000);
      }
    }
  }

}
exports.default = StopoutListenerManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9jbGllbnRzL2NvcHlGYWN0b3J5L3N0cmVhbWluZy9zdG9wb3V0TGlzdGVuZXJNYW5hZ2VyLmVzNiJdLCJuYW1lcyI6WyJTdG9wb3V0TGlzdGVuZXJNYW5hZ2VyIiwiTWV0YUFwaUNsaWVudCIsImNvbnN0cnVjdG9yIiwiZG9tYWluQ2xpZW50IiwiX2RvbWFpbkNsaWVudCIsIl9zdG9wb3V0TGlzdGVuZXJzIiwiX2Vycm9yVGhyb3R0bGVUaW1lIiwic3RvcG91dExpc3RlbmVycyIsImFkZFN0b3BvdXRMaXN0ZW5lciIsImxpc3RlbmVyIiwiYWNjb3VudElkIiwic3RyYXRlZ3lJZCIsInNlcXVlbmNlTnVtYmVyIiwibGlzdGVuZXJJZCIsInJhbmRvbXN0cmluZyIsImdlbmVyYXRlIiwiX3N0YXJ0U3RvcG91dEV2ZW50Sm9iIiwicmVtb3ZlU3RvcG91dExpc3RlbmVyIiwidGhyb3R0bGVUaW1lIiwib3B0cyIsInVybCIsIm1ldGhvZCIsInFzIiwicHJldmlvdXNTZXF1ZW5jZU51bWJlciIsInN1YnNjcmliZXJJZCIsImxpbWl0IiwiaGVhZGVycyIsIl90b2tlbiIsImpzb24iLCJwYWNrZXRzIiwicmVxdWVzdENvcHlGYWN0b3J5Iiwib25TdG9wb3V0IiwibGVuZ3RoIiwic2xpY2UiLCJlcnJvciIsInJlcyIsInNldFRpbWVvdXQiLCJNYXRoIiwibWluIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7QUFHZSxNQUFNQSxzQkFBTixTQUFxQ0MsaUJBQXJDLENBQW1EOztBQUVoRTs7OztBQUlBQyxjQUFZQyxZQUFaLEVBQTBCO0FBQ3hCLFVBQU1BLFlBQU47QUFDQSxTQUFLQyxhQUFMLEdBQXFCRCxZQUFyQjtBQUNBLFNBQUtFLGlCQUFMLEdBQXlCLEVBQXpCO0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIsSUFBMUI7QUFDRDs7QUFFRDs7OztBQUlBLE1BQUlDLGdCQUFKLEdBQXVCO0FBQ3JCLFdBQU8sS0FBS0YsaUJBQVo7QUFDRDs7QUFFRDs7Ozs7Ozs7QUFRQUcscUJBQW1CQyxRQUFuQixFQUE2QkMsU0FBN0IsRUFBd0NDLFVBQXhDLEVBQW9EQyxjQUFwRCxFQUFvRTtBQUNsRSxVQUFNQyxhQUFhQyx1QkFBYUMsUUFBYixDQUFzQixFQUF0QixDQUFuQjtBQUNBLFNBQUtWLGlCQUFMLENBQXVCUSxVQUF2QixJQUFxQ0osUUFBckM7QUFDQSxTQUFLTyxxQkFBTCxDQUEyQkgsVUFBM0IsRUFBdUNKLFFBQXZDLEVBQWlEQyxTQUFqRCxFQUE0REMsVUFBNUQsRUFBd0VDLGNBQXhFO0FBQ0EsV0FBT0MsVUFBUDtBQUNEOztBQUVEOzs7O0FBSUFJLHdCQUFzQkosVUFBdEIsRUFBa0M7QUFDaEMsV0FBTyxLQUFLUixpQkFBTCxDQUF1QlEsVUFBdkIsQ0FBUDtBQUNEOztBQUVELFFBQU1HLHFCQUFOLENBQTRCSCxVQUE1QixFQUF3Q0osUUFBeEMsRUFBa0RDLFNBQWxELEVBQTZEQyxVQUE3RCxFQUF5RUMsY0FBekUsRUFBeUY7QUFDdkYsUUFBSU0sZUFBZSxLQUFLWixrQkFBeEI7O0FBRUEsV0FBTSxLQUFLRCxpQkFBTCxDQUF1QlEsVUFBdkIsQ0FBTixFQUEwQztBQUN4QyxZQUFNTSxPQUFPO0FBQ1hDLGFBQUssZ0NBRE07QUFFWEMsZ0JBQVEsS0FGRztBQUdYQyxZQUFJO0FBQ0ZDLGtDQUF3QlgsY0FEdEI7QUFFRlksd0JBQWNkLFNBRlo7QUFHRkMsc0JBQVlBLFVBSFY7QUFJRmMsaUJBQU87QUFKTCxTQUhPO0FBU1hDLGlCQUFTO0FBQ1Asd0JBQWMsS0FBS0M7QUFEWixTQVRFO0FBWVhDLGNBQU07QUFaSyxPQUFiO0FBY0EsVUFBSTtBQUNGLGNBQU1DLFVBQVUsTUFBTSxLQUFLekIsYUFBTCxDQUFtQjBCLGtCQUFuQixDQUFzQ1gsSUFBdEMsRUFBNEMsSUFBNUMsQ0FBdEI7QUFDQSxjQUFNVixTQUFTc0IsU0FBVCxDQUFtQkYsT0FBbkIsQ0FBTjtBQUNBWCx1QkFBZSxLQUFLWixrQkFBcEI7QUFDQSxZQUFHLEtBQUtELGlCQUFMLENBQXVCUSxVQUF2QixLQUFzQ2dCLFFBQVFHLE1BQWpELEVBQXlEO0FBQ3ZEcEIsMkJBQWlCaUIsUUFBUUksS0FBUixDQUFjLENBQUMsQ0FBZixFQUFrQixDQUFsQixFQUFxQnJCLGNBQXRDO0FBQ0Q7QUFDRixPQVBELENBT0UsT0FBT3NCLEtBQVAsRUFBYztBQUNkLGNBQU0sc0JBQVlDLE9BQU9DLFdBQVdELEdBQVgsRUFBZ0JqQixZQUFoQixDQUFuQixDQUFOO0FBQ0FBLHVCQUFlbUIsS0FBS0MsR0FBTCxDQUFTcEIsZUFBZSxDQUF4QixFQUEyQixLQUEzQixDQUFmO0FBQ0Q7QUFDRjtBQUNGOztBQTFFK0Q7a0JBQTdDbEIsc0IiLCJmaWxlIjoic3RvcG91dExpc3RlbmVyTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE1ldGFBcGlDbGllbnQgZnJvbSAnLi4vLi4vbWV0YUFwaS5jbGllbnQnO1xuaW1wb3J0IHJhbmRvbXN0cmluZyBmcm9tICdyYW5kb21zdHJpbmcnO1xuXG4vKipcbiAqIFN0b3BvdXQgZXZlbnQgbGlzdGVuZXIgbWFuYWdlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9wb3V0TGlzdGVuZXJNYW5hZ2VyIGV4dGVuZHMgTWV0YUFwaUNsaWVudCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgc3RvcG91dCBsaXN0ZW5lciBtYW5hZ2VyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7RG9tYWluQ2xpZW50fSBkb21haW5DbGllbnQgZG9tYWluIGNsaWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoZG9tYWluQ2xpZW50KSB7XG4gICAgc3VwZXIoZG9tYWluQ2xpZW50KTtcbiAgICB0aGlzLl9kb21haW5DbGllbnQgPSBkb21haW5DbGllbnQ7XG4gICAgdGhpcy5fc3RvcG91dExpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX2Vycm9yVGhyb3R0bGVUaW1lID0gMTAwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaWN0aW9uYXJ5IG9mIHN0b3BvdXQgbGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGRpY3Rpb25hcnkgb2Ygc3RvcG91dCBsaXN0ZW5lcnNcbiAgICovXG4gIGdldCBzdG9wb3V0TGlzdGVuZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9zdG9wb3V0TGlzdGVuZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzdG9wb3V0IGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7U3RvcG91dExpc3RlbmVyfSBsaXN0ZW5lciBcbiAgICogQHBhcmFtIHtTdHJpbmd9IFthY2NvdW50SWRdIGFjY291bnQgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtzdHJhdGVneUlkXSBzdHJhdGVneSBpZFxuICAgKiBAcGFyYW0ge051bWJlcn0gW3NlcXVlbmNlTnVtYmVyXSBldmVudCBzZXF1ZW5jZSBudW1iZXJcbiAgICogQHJldHVybnMge1N0cmluZ30gc3RvcG91dCBsaXN0ZW5lciBpZFxuICAgKi9cbiAgYWRkU3RvcG91dExpc3RlbmVyKGxpc3RlbmVyLCBhY2NvdW50SWQsIHN0cmF0ZWd5SWQsIHNlcXVlbmNlTnVtYmVyKSB7XG4gICAgY29uc3QgbGlzdGVuZXJJZCA9IHJhbmRvbXN0cmluZy5nZW5lcmF0ZSgxMCk7XG4gICAgdGhpcy5fc3RvcG91dExpc3RlbmVyc1tsaXN0ZW5lcklkXSA9IGxpc3RlbmVyO1xuICAgIHRoaXMuX3N0YXJ0U3RvcG91dEV2ZW50Sm9iKGxpc3RlbmVySWQsIGxpc3RlbmVyLCBhY2NvdW50SWQsIHN0cmF0ZWd5SWQsIHNlcXVlbmNlTnVtYmVyKTtcbiAgICByZXR1cm4gbGlzdGVuZXJJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHN0b3BvdXQgbGlzdGVuZXIgYnkgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxpc3RlbmVySWQgbGlzdGVuZXIgaWQgXG4gICAqL1xuICByZW1vdmVTdG9wb3V0TGlzdGVuZXIobGlzdGVuZXJJZCkge1xuICAgIGRlbGV0ZSB0aGlzLl9zdG9wb3V0TGlzdGVuZXJzW2xpc3RlbmVySWRdO1xuICB9XG5cbiAgYXN5bmMgX3N0YXJ0U3RvcG91dEV2ZW50Sm9iKGxpc3RlbmVySWQsIGxpc3RlbmVyLCBhY2NvdW50SWQsIHN0cmF0ZWd5SWQsIHNlcXVlbmNlTnVtYmVyKSB7XG4gICAgbGV0IHRocm90dGxlVGltZSA9IHRoaXMuX2Vycm9yVGhyb3R0bGVUaW1lO1xuXG4gICAgd2hpbGUodGhpcy5fc3RvcG91dExpc3RlbmVyc1tsaXN0ZW5lcklkXSkge1xuICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgdXJsOiAnL3VzZXJzL2N1cnJlbnQvc3RvcG91dHMvc3RyZWFtJyxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcXM6IHtcbiAgICAgICAgICBwcmV2aW91c1NlcXVlbmNlTnVtYmVyOiBzZXF1ZW5jZU51bWJlcixcbiAgICAgICAgICBzdWJzY3JpYmVySWQ6IGFjY291bnRJZCxcbiAgICAgICAgICBzdHJhdGVneUlkOiBzdHJhdGVneUlkLFxuICAgICAgICAgIGxpbWl0OiAxMDAwXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnYXV0aC10b2tlbic6IHRoaXMuX3Rva2VuXG4gICAgICAgIH0sXG4gICAgICAgIGpzb246IHRydWVcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYWNrZXRzID0gYXdhaXQgdGhpcy5fZG9tYWluQ2xpZW50LnJlcXVlc3RDb3B5RmFjdG9yeShvcHRzLCB0cnVlKTtcbiAgICAgICAgYXdhaXQgbGlzdGVuZXIub25TdG9wb3V0KHBhY2tldHMpO1xuICAgICAgICB0aHJvdHRsZVRpbWUgPSB0aGlzLl9lcnJvclRocm90dGxlVGltZTtcbiAgICAgICAgaWYodGhpcy5fc3RvcG91dExpc3RlbmVyc1tsaXN0ZW5lcklkXSAmJiBwYWNrZXRzLmxlbmd0aCkge1xuICAgICAgICAgIHNlcXVlbmNlTnVtYmVyID0gcGFja2V0cy5zbGljZSgtMSlbMF0uc2VxdWVuY2VOdW1iZXI7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgdGhyb3R0bGVUaW1lKSk7XG4gICAgICAgIHRocm90dGxlVGltZSA9IE1hdGgubWluKHRocm90dGxlVGltZSAqIDIsIDMwMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19