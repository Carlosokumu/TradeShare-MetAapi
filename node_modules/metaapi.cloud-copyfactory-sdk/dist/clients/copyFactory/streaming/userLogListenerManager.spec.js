'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('../../httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('../../domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _userLogListener = require('./userLogListener');

var _userLogListener2 = _interopRequireDefault(_userLogListener);

var _userLogListenerManager = require('./userLogListenerManager');

var _userLogListenerManager2 = _interopRequireDefault(_userLogListenerManager);

var _errorHandler = require('../../errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {UserLogListenerManager}
 */
describe('UserLogListenerManager', () => {

  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let domainClient;
  let sandbox;
  let clock;
  let userLogListenerManager;
  let getUserLogStub, listener, callStub;

  let expected = [{
    time: new Date('2020-08-08T08:57:30.328Z'),
    level: 'INFO',
    message: 'message1'
  }, {
    time: new Date('2020-08-08T07:57:30.328Z'),
    level: 'INFO',
    message: 'message0'
  }];

  let expected2 = [{
    time: new Date('2020-08-08T10:57:30.328Z'),
    level: 'INFO',
    message: 'message3'
  }, {
    time: new Date('2020-08-08T09:57:30.328Z'),
    level: 'INFO',
    message: 'message2'
  }];

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    domainClient = new _domain2.default(httpClient, token);
    userLogListenerManager = new _userLogListenerManager2.default(domainClient);
    getUserLogStub = sandbox.stub(domainClient, 'requestCopyFactory');
    callStub = _sinon2.default.stub();

    class Listener extends _userLogListener2.default {

      async onUserLog(transactionEvent) {
        callStub(transactionEvent);
      }

    }

    listener = new Listener();
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  describe('Strategy transactions', () => {

    beforeEach(() => {
      getUserLogStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return [];
      }).withArgs({
        url: '/users/current/strategies/ABCD/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected;
      }).withArgs({
        url: '/users/current/strategies/ABCD/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected2;
      });
    });

    /**
     * @test {UserLogListenerManager#addStrategyLogListener}
     */
    it('should add listener', async () => {
      const id = userLogListenerManager.addStrategyLogListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.calledWith(callStub, expected2);
      userLogListenerManager.removeStrategyLogListener(id);
    });

    /**
     * @test {UserLogListenerManager#addStrategyLogListener}
     */
    it('should remove listener', async () => {
      const id = userLogListenerManager.addStrategyLogListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(800);
      userLogListenerManager.removeStrategyLogListener(id);
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.callCount(callStub, 1);
    });

    /**
     * @test {UserLogListenerManager#addStrategyLogListener}
     */
    it('should wait if error returned', async () => {
      getUserLogStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return [];
      }).withArgs({
        url: '/users/current/strategies/ABCD/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return expected;
      }).onFirstCall().rejects(new Error('test')).onSecondCall().rejects(new Error('test'));
      const id = userLogListenerManager.addStrategyLogListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getUserLogStub, 1);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(2000);
      _sinon2.default.assert.callCount(getUserLogStub, 3);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(800);
      _sinon2.default.assert.calledWith(callStub, expected);
      userLogListenerManager.removeStrategyLogListener(id);
    });

    /**
     * @test {UserLogListenerManager#addStrategyLogListener}
     */
    it('should remove listener on not found error', async () => {
      getUserLogStub.withArgs({
        url: '/users/current/strategies/ABCD/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        throw new _errorHandler.NotFoundError('test');
      });
      userLogListenerManager.addStrategyLogListener(listener, 'ABCD', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(100);
      _sinon2.default.assert.callCount(getUserLogStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1100);
      _sinon2.default.assert.callCount(callStub, 1);
    });
  });

  describe('Subscriber transactions', () => {

    beforeEach(() => {
      getUserLogStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return [];
      }).withArgs({
        url: '/users/current/subscribers/accountId/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected;
      }).withArgs({
        url: '/users/current/subscribers/accountId/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        return expected2;
      });
    });

    /**
     * @test {UserLogListenerManager#addSubscriberLogListener}
     */
    it('should add listener', async () => {
      const id = userLogListenerManager.addSubscriberLogListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.calledWith(callStub, expected2);
      userLogListenerManager.removeSubscriberLogListener(id);
    });

    /**
     * @test {UserLogListenerManager#addSubscriberLogListener}
     */
    it('should remove stopout listener', async () => {
      const id = userLogListenerManager.addSubscriberLogListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(800);
      userLogListenerManager.removeSubscriberLogListener(id);
      await clock.tickAsync(2200);
      _sinon2.default.assert.calledWith(callStub, expected);
      _sinon2.default.assert.callCount(callStub, 1);
    });

    /**
     * @test {UserLogListenerManager#addSubscriberLogListener}
     */
    it('should wait if error returned', async () => {
      getUserLogStub.callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return [];
      }).withArgs({
        url: '/users/current/subscribers/accountId/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T00:00:00.000Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 500));
        return expected;
      }).onFirstCall().rejects(new Error('test')).onSecondCall().rejects(new Error('test'));
      const id = userLogListenerManager.addSubscriberLogListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getUserLogStub, 1);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(600);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(2000);
      _sinon2.default.assert.callCount(getUserLogStub, 3);
      _sinon2.default.assert.notCalled(callStub);
      await clock.tickAsync(800);
      _sinon2.default.assert.calledWith(callStub, expected);
      userLogListenerManager.removeSubscriberLogListener(id);
    });

    /**
     * @test {UserLogListenerManager#addSubscriberLogListener}
     */
    it('should remove listener on not found error', async () => {
      getUserLogStub.withArgs({
        url: '/users/current/subscribers/accountId/user-log/stream',
        method: 'GET',
        qs: {
          startTime: new Date('2020-08-08T08:57:30.329Z'),
          limit: 1000
        },
        headers: {
          'auth-token': token
        },
        json: true
      }).callsFake(async opts => {
        await new _promise2.default(res => setTimeout(res, 1000));
        throw new _errorHandler.NotFoundError('test');
      });
      userLogListenerManager.addSubscriberLogListener(listener, 'accountId', new Date('2020-08-08T00:00:00.000Z'));
      await clock.tickAsync(100);
      _sinon2.default.assert.callCount(getUserLogStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1000);
      _sinon2.default.assert.callCount(getUserLogStub, 2);
      _sinon2.default.assert.callCount(callStub, 1);
      await clock.tickAsync(1100);
      _sinon2.default.assert.callCount(callStub, 1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,