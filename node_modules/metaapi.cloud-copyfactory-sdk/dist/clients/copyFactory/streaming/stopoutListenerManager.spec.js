'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('../../httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('../../domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _stopoutListener = require('./stopoutListener');

var _stopoutListener2 = _interopRequireDefault(_stopoutListener);

var _stopoutListenerManager = require('./stopoutListenerManager');

var _stopoutListenerManager2 = _interopRequireDefault(_stopoutListenerManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {StopoutListenerManager}
 */
describe('StopoutListenerManager', () => {

  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let domainClient;
  let sandbox;
  let clock;
  let stopoutListenerManager;
  let getStopoutStub, listener, callStub;

  let expected = [{
    subscriberId: 'accountId',
    reason: 'monthly-balance',
    stoppedAt: new Date('2020-08-08T07:57:30.328Z'),
    strategy: {
      id: 'ABCD',
      name: 'Strategy'
    },
    reasonDescription: 'total strategy equity drawdown exceeded limit',
    sequenceNumber: 2
  }, {
    subscriberId: 'accountId',
    reason: 'monthly-balance',
    stoppedAt: new Date('2020-08-08T07:57:31.328Z'),
    strategy: {
      id: 'ABCD',
      name: 'Strategy'
    },
    reasonDescription: 'total strategy equity drawdown exceeded limit',
    sequenceNumber: 3
  }];

  let expected2 = [{
    subscriberId: 'accountId',
    reason: 'monthly-balance',
    stoppedAt: new Date('2020-08-08T07:57:32.328Z'),
    strategy: {
      id: 'ABCD',
      name: 'Strategy'
    },
    reasonDescription: 'total strategy equity drawdown exceeded limit',
    sequenceNumber: 4
  }, {
    subscriberId: 'accountId',
    reason: 'monthly-balance',
    stoppedAt: new Date('2020-08-08T07:57:33.328Z'),
    strategy: {
      id: 'ABCD',
      name: 'Strategy'
    },
    reasonDescription: 'total strategy equity drawdown exceeded limit',
    sequenceNumber: 5
  }];

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    domainClient = new _domain2.default(httpClient, token);
    stopoutListenerManager = new _stopoutListenerManager2.default(domainClient);
    getStopoutStub = sandbox.stub(domainClient, 'requestCopyFactory');
    getStopoutStub.callsFake(async opts => {
      await new _promise2.default(res => setTimeout(res, 1000));
      return [];
    }).withArgs({
      url: '/users/current/stopouts/stream',
      method: 'GET',
      qs: {
        previousSequenceNumber: 1,
        subscriberId: 'accountId',
        strategyId: 'ABCD',
        limit: 1000
      },
      headers: {
        'auth-token': token
      },
      json: true
    }).callsFake(async opts => {
      await new _promise2.default(res => setTimeout(res, 1000));
      return expected;
    }).withArgs({
      url: '/users/current/stopouts/stream',
      method: 'GET',
      qs: {
        previousSequenceNumber: 3,
        subscriberId: 'accountId',
        strategyId: 'ABCD',
        limit: 1000
      },
      headers: {
        'auth-token': token
      },
      json: true
    }).callsFake(async opts => {
      await new _promise2.default(res => setTimeout(res, 1000));
      return expected2;
    });

    callStub = _sinon2.default.stub();

    class Listener extends _stopoutListener2.default {

      async onStopout(strategyStopoutEvent) {
        callStub(strategyStopoutEvent);
      }

    }

    listener = new Listener();
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  /**
   * @test {StopoutListenerManager#addStopoutListener}
   */
  it('should add stopout listener', async () => {
    const id = stopoutListenerManager.addStopoutListener(listener, 'accountId', 'ABCD', 1);
    await clock.tickAsync(2200);
    _sinon2.default.assert.calledWith(callStub, expected);
    _sinon2.default.assert.calledWith(callStub, expected2);
    stopoutListenerManager.removeStopoutListener(id);
  });

  /**
   * @test {StopoutListenerManager#addStopoutListener}
   */
  it('should remove stopout listener', async () => {
    const id = stopoutListenerManager.addStopoutListener(listener, 'accountId', 'ABCD', 1);
    await clock.tickAsync(800);
    stopoutListenerManager.removeStopoutListener(id);
    await clock.tickAsync(2200);
    _sinon2.default.assert.calledWith(callStub, expected);
    _sinon2.default.assert.callCount(callStub, 1);
  });

  /**
   * @test {StopoutListenerManager#addStopoutListener}
   */
  it('should wait if error returned', async () => {
    getStopoutStub.callsFake(async opts => {
      await new _promise2.default(res => setTimeout(res, 500));
      return [];
    }).withArgs({
      url: '/users/current/stopouts/stream',
      method: 'GET',
      qs: {
        previousSequenceNumber: 1,
        subscriberId: 'accountId',
        strategyId: 'ABCD',
        limit: 1000
      },
      headers: {
        'auth-token': token
      },
      json: true
    }).callsFake(async opts => {
      await new _promise2.default(res => setTimeout(res, 500));
      return expected;
    }).onFirstCall().rejects(new Error('test')).onSecondCall().rejects(new Error('test'));
    const id = stopoutListenerManager.addStopoutListener(listener, 'accountId', 'ABCD', 1);
    await clock.tickAsync(600);
    _sinon2.default.assert.callCount(getStopoutStub, 1);
    _sinon2.default.assert.notCalled(callStub);
    await clock.tickAsync(600);
    _sinon2.default.assert.callCount(getStopoutStub, 2);
    _sinon2.default.assert.notCalled(callStub);
    await clock.tickAsync(2000);
    _sinon2.default.assert.callCount(getStopoutStub, 3);
    _sinon2.default.assert.notCalled(callStub);
    await clock.tickAsync(800);
    _sinon2.default.assert.calledWith(callStub, expected);
    stopoutListenerManager.removeStopoutListener(id);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,