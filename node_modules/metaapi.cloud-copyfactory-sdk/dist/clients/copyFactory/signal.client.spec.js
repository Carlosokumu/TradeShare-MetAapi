'use strict';

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _signal = require('./signal.client');

var _signal2 = _interopRequireDefault(_signal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
  * @test {SignalClient}
  */
describe('SignalClient', () => {

  let signalClient;
  const token = 'header.payload.sign';
  let domainClient;
  let host = {
    host: 'https://copyfactory-api-v1',
    region: 'vint-hill',
    domain: 'agiliumtrade.ai'
  };
  let sandbox;
  let requestStub;

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    domainClient = {
      token: token,
      requestSignal: () => {}
    };
    signalClient = new _signal2.default('accountId', host, domainClient);
    requestStub = sandbox.stub(domainClient, 'requestSignal');
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
    * @test {SignalClient#generateSignalId}
    */
  it('should generate signal id', async () => {
    signalClient.generateSignalId().length.should.equal(8);
  });

  /**
    * @test {SignalClient#updateExternalSignal}
    */
  it('should update external signal', async () => {
    const signal = {
      symbol: 'EURUSD',
      type: 'POSITION_TYPE_BUY',
      time: '2020-08-24T00:00:00.000Z',
      updateTime: '2020-08-24T00:00:00.000Z',
      volume: 1
    };
    await signalClient.updateExternalSignal('ABCD', '0123456', signal);
    _sinon2.default.assert.calledOnceWithExactly(domainClient.requestSignal, {
      url: '/users/current/strategies/ABCD/external-signals/0123456',
      method: 'PUT',
      headers: {
        'auth-token': token
      },
      json: true,
      body: signal }, host, 'accountId');
  });

  /**
    * @test {SignalClient#removeExternalSignal}
    */
  it('should remove external signal', async () => {
    const signal = {
      time: '2020-08-24T00:00:00.000Z'
    };
    await signalClient.removeExternalSignal('ABCD', '0123456', signal);
    _sinon2.default.assert.calledOnceWithExactly(domainClient.requestSignal, {
      url: '/users/current/strategies/ABCD/external-signals/0123456/remove',
      method: 'POST',
      headers: {
        'auth-token': token
      },
      json: true,
      body: signal }, host, 'accountId');
  });

  /**
    * @test {SignalClient#getTradingSignals}
    */
  it('should retrieve signals', async () => {
    const expected = [{
      symbol: 'EURUSD',
      type: 'POSITION_TYPE_BUY',
      time: '2020-08-24T00:00:00.000Z',
      closeAfter: '2020-08-24T00:00:00.000Z',
      volume: 1
    }];
    requestStub.resolves(expected);
    let stopouts = await signalClient.getTradingSignals();
    stopouts.should.equal(expected);
    _sinon2.default.assert.calledOnceWithExactly(domainClient.requestSignal, {
      url: '/users/current/subscribers/accountId/signals',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    }, host, 'accountId');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGllbnRzL2NvcHlGYWN0b3J5L3NpZ25hbC5jbGllbnQuc3BlYy5lczYiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJzaWduYWxDbGllbnQiLCJ0b2tlbiIsImRvbWFpbkNsaWVudCIsImhvc3QiLCJyZWdpb24iLCJkb21haW4iLCJzYW5kYm94IiwicmVxdWVzdFN0dWIiLCJiZWZvcmUiLCJzaW5vbiIsImNyZWF0ZVNhbmRib3giLCJiZWZvcmVFYWNoIiwicmVxdWVzdFNpZ25hbCIsIlNpZ25hbENsaWVudCIsInN0dWIiLCJhZnRlckVhY2giLCJyZXN0b3JlIiwiaXQiLCJnZW5lcmF0ZVNpZ25hbElkIiwibGVuZ3RoIiwic2hvdWxkIiwiZXF1YWwiLCJzaWduYWwiLCJzeW1ib2wiLCJ0eXBlIiwidGltZSIsInVwZGF0ZVRpbWUiLCJ2b2x1bWUiLCJ1cGRhdGVFeHRlcm5hbFNpZ25hbCIsImFzc2VydCIsImNhbGxlZE9uY2VXaXRoRXhhY3RseSIsInVybCIsIm1ldGhvZCIsImhlYWRlcnMiLCJqc29uIiwiYm9keSIsInJlbW92ZUV4dGVybmFsU2lnbmFsIiwiZXhwZWN0ZWQiLCJjbG9zZUFmdGVyIiwicmVzb2x2ZXMiLCJzdG9wb3V0cyIsImdldFRyYWRpbmdTaWduYWxzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQTs7O0FBR0FBLFNBQVMsY0FBVCxFQUF5QixNQUFNOztBQUU3QixNQUFJQyxZQUFKO0FBQ0EsUUFBTUMsUUFBUSxxQkFBZDtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxPQUFPO0FBQ1RBLFVBQU0sNEJBREc7QUFFVEMsWUFBUSxXQUZDO0FBR1RDLFlBQVE7QUFIQyxHQUFYO0FBS0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLFdBQUo7O0FBRUFDLFNBQU8sTUFBTTtBQUNYRixjQUFVRyxnQkFBTUMsYUFBTixFQUFWO0FBQ0QsR0FGRDs7QUFJQUMsYUFBVyxNQUFNO0FBQ2ZULG1CQUFlO0FBQ2JELGFBQU9BLEtBRE07QUFFYlcscUJBQWUsTUFBTSxDQUFFO0FBRlYsS0FBZjtBQUlBWixtQkFBZSxJQUFJYSxnQkFBSixDQUFpQixXQUFqQixFQUE4QlYsSUFBOUIsRUFBb0NELFlBQXBDLENBQWY7QUFDQUssa0JBQWNELFFBQVFRLElBQVIsQ0FBYVosWUFBYixFQUEyQixlQUEzQixDQUFkO0FBQ0QsR0FQRDs7QUFTQWEsWUFBVSxNQUFNO0FBQ2RULFlBQVFVLE9BQVI7QUFDRCxHQUZEOztBQUlBOzs7QUFHQUMsS0FBRywyQkFBSCxFQUFnQyxZQUFZO0FBQzFDakIsaUJBQWFrQixnQkFBYixHQUFnQ0MsTUFBaEMsQ0FBdUNDLE1BQXZDLENBQThDQyxLQUE5QyxDQUFvRCxDQUFwRDtBQUNELEdBRkQ7O0FBSUE7OztBQUdBSixLQUFHLCtCQUFILEVBQW9DLFlBQVk7QUFDOUMsVUFBTUssU0FBUztBQUNiQyxjQUFRLFFBREs7QUFFYkMsWUFBTSxtQkFGTztBQUdiQyxZQUFNLDBCQUhPO0FBSWJDLGtCQUFZLDBCQUpDO0FBS2JDLGNBQVE7QUFMSyxLQUFmO0FBT0EsVUFBTTNCLGFBQWE0QixvQkFBYixDQUFrQyxNQUFsQyxFQUEwQyxTQUExQyxFQUFxRE4sTUFBckQsQ0FBTjtBQUNBYixvQkFBTW9CLE1BQU4sQ0FBYUMscUJBQWIsQ0FBbUM1QixhQUFhVSxhQUFoRCxFQUErRDtBQUM3RG1CLFdBQUsseURBRHdEO0FBRTdEQyxjQUFRLEtBRnFEO0FBRzdEQyxlQUFTO0FBQ1Asc0JBQWNoQztBQURQLE9BSG9EO0FBTTdEaUMsWUFBTSxJQU51RDtBQU83REMsWUFBTWIsTUFQdUQsRUFBL0QsRUFPaUJuQixJQVBqQixFQU91QixXQVB2QjtBQVFELEdBakJEOztBQW1CQTs7O0FBR0FjLEtBQUcsK0JBQUgsRUFBb0MsWUFBWTtBQUM5QyxVQUFNSyxTQUFTO0FBQ2JHLFlBQU07QUFETyxLQUFmO0FBR0EsVUFBTXpCLGFBQWFvQyxvQkFBYixDQUFrQyxNQUFsQyxFQUEwQyxTQUExQyxFQUFxRGQsTUFBckQsQ0FBTjtBQUNBYixvQkFBTW9CLE1BQU4sQ0FBYUMscUJBQWIsQ0FBbUM1QixhQUFhVSxhQUFoRCxFQUErRDtBQUM3RG1CLFdBQUssZ0VBRHdEO0FBRTdEQyxjQUFRLE1BRnFEO0FBRzdEQyxlQUFTO0FBQ1Asc0JBQWNoQztBQURQLE9BSG9EO0FBTTdEaUMsWUFBTSxJQU51RDtBQU83REMsWUFBTWIsTUFQdUQsRUFBL0QsRUFPaUJuQixJQVBqQixFQU91QixXQVB2QjtBQVFELEdBYkQ7O0FBZUE7OztBQUdBYyxLQUFHLHlCQUFILEVBQThCLFlBQVk7QUFDeEMsVUFBTW9CLFdBQVcsQ0FBQztBQUNoQmQsY0FBUSxRQURRO0FBRWhCQyxZQUFNLG1CQUZVO0FBR2hCQyxZQUFNLDBCQUhVO0FBSWhCYSxrQkFBWSwwQkFKSTtBQUtoQlgsY0FBUTtBQUxRLEtBQUQsQ0FBakI7QUFPQXBCLGdCQUFZZ0MsUUFBWixDQUFxQkYsUUFBckI7QUFDQSxRQUFJRyxXQUFXLE1BQU14QyxhQUFheUMsaUJBQWIsRUFBckI7QUFDQUQsYUFBU3BCLE1BQVQsQ0FBZ0JDLEtBQWhCLENBQXNCZ0IsUUFBdEI7QUFDQTVCLG9CQUFNb0IsTUFBTixDQUFhQyxxQkFBYixDQUFtQzVCLGFBQWFVLGFBQWhELEVBQStEO0FBQzdEbUIsV0FBSyw4Q0FEd0Q7QUFFN0RDLGNBQVEsS0FGcUQ7QUFHN0RDLGVBQVM7QUFDUCxzQkFBY2hDO0FBRFAsT0FIb0Q7QUFNN0RpQyxZQUFNO0FBTnVELEtBQS9ELEVBT0cvQixJQVBILEVBT1MsV0FQVDtBQVFELEdBbkJEO0FBcUJELENBckdEIiwiZmlsZSI6InNpZ25hbC5jbGllbnQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCBTaWduYWxDbGllbnQgZnJvbSAnLi9zaWduYWwuY2xpZW50JztcbiBcbi8qKlxuICAqIEB0ZXN0IHtTaWduYWxDbGllbnR9XG4gICovXG5kZXNjcmliZSgnU2lnbmFsQ2xpZW50JywgKCkgPT4ge1xuIFxuICBsZXQgc2lnbmFsQ2xpZW50O1xuICBjb25zdCB0b2tlbiA9ICdoZWFkZXIucGF5bG9hZC5zaWduJztcbiAgbGV0IGRvbWFpbkNsaWVudDtcbiAgbGV0IGhvc3QgPSB7XG4gICAgaG9zdDogJ2h0dHBzOi8vY29weWZhY3RvcnktYXBpLXYxJyxcbiAgICByZWdpb246ICd2aW50LWhpbGwnLFxuICAgIGRvbWFpbjogJ2FnaWxpdW10cmFkZS5haSdcbiAgfTtcbiAgbGV0IHNhbmRib3g7XG4gIGxldCByZXF1ZXN0U3R1YjtcbiBcbiAgYmVmb3JlKCgpID0+IHtcbiAgICBzYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICB9KTtcbiBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZG9tYWluQ2xpZW50ID0ge1xuICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgcmVxdWVzdFNpZ25hbDogKCkgPT4ge31cbiAgICB9O1xuICAgIHNpZ25hbENsaWVudCA9IG5ldyBTaWduYWxDbGllbnQoJ2FjY291bnRJZCcsIGhvc3QsIGRvbWFpbkNsaWVudCk7XG4gICAgcmVxdWVzdFN0dWIgPSBzYW5kYm94LnN0dWIoZG9tYWluQ2xpZW50LCAncmVxdWVzdFNpZ25hbCcpO1xuICB9KTtcbiBcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgfSk7XG4gXG4gIC8qKlxuICAgICogQHRlc3Qge1NpZ25hbENsaWVudCNnZW5lcmF0ZVNpZ25hbElkfVxuICAgICovXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgc2lnbmFsIGlkJywgYXN5bmMgKCkgPT4ge1xuICAgIHNpZ25hbENsaWVudC5nZW5lcmF0ZVNpZ25hbElkKCkubGVuZ3RoLnNob3VsZC5lcXVhbCg4KTtcbiAgfSk7XG4gXG4gIC8qKlxuICAgICogQHRlc3Qge1NpZ25hbENsaWVudCN1cGRhdGVFeHRlcm5hbFNpZ25hbH1cbiAgICAqL1xuICBpdCgnc2hvdWxkIHVwZGF0ZSBleHRlcm5hbCBzaWduYWwnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2lnbmFsID0ge1xuICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgIHR5cGU6ICdQT1NJVElPTl9UWVBFX0JVWScsXG4gICAgICB0aW1lOiAnMjAyMC0wOC0yNFQwMDowMDowMC4wMDBaJyxcbiAgICAgIHVwZGF0ZVRpbWU6ICcyMDIwLTA4LTI0VDAwOjAwOjAwLjAwMFonLFxuICAgICAgdm9sdW1lOiAxXG4gICAgfTtcbiAgICBhd2FpdCBzaWduYWxDbGllbnQudXBkYXRlRXh0ZXJuYWxTaWduYWwoJ0FCQ0QnLCAnMDEyMzQ1NicsIHNpZ25hbCk7XG4gICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2VXaXRoRXhhY3RseShkb21haW5DbGllbnQucmVxdWVzdFNpZ25hbCwge1xuICAgICAgdXJsOiAnL3VzZXJzL2N1cnJlbnQvc3RyYXRlZ2llcy9BQkNEL2V4dGVybmFsLXNpZ25hbHMvMDEyMzQ1NicsXG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnYXV0aC10b2tlbic6IHRva2VuXG4gICAgICB9LFxuICAgICAganNvbjogdHJ1ZSxcbiAgICAgIGJvZHk6IHNpZ25hbH0sIGhvc3QsICdhY2NvdW50SWQnKTtcbiAgfSk7XG4gXG4gIC8qKlxuICAgICogQHRlc3Qge1NpZ25hbENsaWVudCNyZW1vdmVFeHRlcm5hbFNpZ25hbH1cbiAgICAqL1xuICBpdCgnc2hvdWxkIHJlbW92ZSBleHRlcm5hbCBzaWduYWwnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2lnbmFsID0ge1xuICAgICAgdGltZTogJzIwMjAtMDgtMjRUMDA6MDA6MDAuMDAwWicsXG4gICAgfTtcbiAgICBhd2FpdCBzaWduYWxDbGllbnQucmVtb3ZlRXh0ZXJuYWxTaWduYWwoJ0FCQ0QnLCAnMDEyMzQ1NicsIHNpZ25hbCk7XG4gICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2VXaXRoRXhhY3RseShkb21haW5DbGllbnQucmVxdWVzdFNpZ25hbCwge1xuICAgICAgdXJsOiAnL3VzZXJzL2N1cnJlbnQvc3RyYXRlZ2llcy9BQkNEL2V4dGVybmFsLXNpZ25hbHMvMDEyMzQ1Ni9yZW1vdmUnLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdhdXRoLXRva2VuJzogdG9rZW5cbiAgICAgIH0sXG4gICAgICBqc29uOiB0cnVlLFxuICAgICAgYm9keTogc2lnbmFsfSwgaG9zdCwgJ2FjY291bnRJZCcpO1xuICB9KTtcbiBcbiAgLyoqXG4gICAgKiBAdGVzdCB7U2lnbmFsQ2xpZW50I2dldFRyYWRpbmdTaWduYWxzfVxuICAgICovXG4gIGl0KCdzaG91bGQgcmV0cmlldmUgc2lnbmFscycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IFt7XG4gICAgICBzeW1ib2w6ICdFVVJVU0QnLFxuICAgICAgdHlwZTogJ1BPU0lUSU9OX1RZUEVfQlVZJyxcbiAgICAgIHRpbWU6ICcyMDIwLTA4LTI0VDAwOjAwOjAwLjAwMFonLFxuICAgICAgY2xvc2VBZnRlcjogJzIwMjAtMDgtMjRUMDA6MDA6MDAuMDAwWicsXG4gICAgICB2b2x1bWU6IDFcbiAgICB9XTtcbiAgICByZXF1ZXN0U3R1Yi5yZXNvbHZlcyhleHBlY3RlZCk7XG4gICAgbGV0IHN0b3BvdXRzID0gYXdhaXQgc2lnbmFsQ2xpZW50LmdldFRyYWRpbmdTaWduYWxzKCk7XG4gICAgc3RvcG91dHMuc2hvdWxkLmVxdWFsKGV4cGVjdGVkKTtcbiAgICBzaW5vbi5hc3NlcnQuY2FsbGVkT25jZVdpdGhFeGFjdGx5KGRvbWFpbkNsaWVudC5yZXF1ZXN0U2lnbmFsLCB7XG4gICAgICB1cmw6ICcvdXNlcnMvY3VycmVudC9zdWJzY3JpYmVycy9hY2NvdW50SWQvc2lnbmFscycsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnYXV0aC10b2tlbic6IHRva2VuXG4gICAgICB9LFxuICAgICAganNvbjogdHJ1ZSxcbiAgICB9LCBob3N0LCAnYWNjb3VudElkJyk7XG4gIH0pO1xuIFxufSk7XG4gIl19