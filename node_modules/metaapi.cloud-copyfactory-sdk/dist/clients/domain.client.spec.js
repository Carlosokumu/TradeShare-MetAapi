'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('./httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('./domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _errorHandler = require('./errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {DomainClient}
 */
describe('DomainClient', () => {

  let domainClient;
  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let sandbox;
  let requestStub;
  let getRegionsStub;
  let getHostStub;
  let failoverRequestStub;
  let clock;
  const expected = [{ _id: 'ABCD' }];

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    domainClient = new _domain2.default(httpClient, token);
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    failoverRequestStub = sandbox.stub(httpClient, 'requestWithFailover');
    requestStub = sandbox.stub(httpClient, 'request');
    requestStub.withArgs({
      url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
      method: 'GET',
      headers: {
        'auth-token': token
      }
    }).resolves(expected);
    getRegionsStub = requestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/regions',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    }).resolves(['vint-hill', 'us-west']);
    getHostStub = requestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/servers/mt-client-api',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    }).resolves({ domain: 'agiliumtrade.agiliumtrade.ai' });
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  /**
   * @test {DomainClient#requestCopyFactory}
   */
  describe('requestCopyFactory', () => {

    const opts = {
      url: '/users/current/configuration/strategies',
      method: 'GET',
      headers: {
        'auth-token': token
      }
    };

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    it('should execute request', async () => {
      const response = await domainClient.requestCopyFactory(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
        method: 'GET',
        headers: {
          'auth-token': token
        }
      });
    });

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    it('should use cached url on repeated request', async () => {
      await domainClient.requestCopyFactory(opts);
      const response = await domainClient.requestCopyFactory(opts);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
        method: 'GET',
        headers: {
          'auth-token': token
        }
      });
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledOnce(getHostStub);
      _sinon2.default.assert.calledOnce(getRegionsStub);
    });

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    it('should request url again if expired', async () => {
      await domainClient.requestCopyFactory(opts);
      await clock.tickAsync(610000);
      const response = await domainClient.requestCopyFactory(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
        method: 'GET',
        headers: {
          'auth-token': token
        }
      });
      _sinon2.default.assert.calledTwice(getHostStub);
      _sinon2.default.assert.calledTwice(getRegionsStub);
    });

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    it('should return request error', async () => {
      requestStub.withArgs({
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
        method: 'GET',
        headers: {
          'auth-token': token
        }
      }).throws(new _errorHandler.ValidationError('test'));
      try {
        await domainClient.requestCopyFactory(opts);
        throw new Error('ValidationError expected');
      } catch (error) {
        error.name.should.equal('ValidationError');
      }
    });

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    it('should return error if failed to get host', async () => {
      getHostStub.throws(new _errorHandler.ValidationError('test'));
      try {
        await domainClient.requestCopyFactory(opts);
        throw new Error('ValidationError expected');
      } catch (error) {
        error.name.should.equal('ValidationError');
      }
    });

    /**
     * @test {DomainClient#requestCopyFactory}
     */
    describe('regions', () => {

      /**
       * @test {DomainClient#requestCopyFactory}
       */
      it('should return error if failed to get regions', async () => {
        getRegionsStub.throws(new _errorHandler.ValidationError('test'));
        try {
          await domainClient.requestCopyFactory(opts);
          throw new Error('ValidationError expected');
        } catch (error) {
          error.name.should.equal('ValidationError');
        }
      });

      /**
       * @test {DomainClient#requestCopyFactory}
       */
      it('should try another region if the first failed', async () => {
        requestStub.withArgs({
          url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/' + 'current/configuration/strategies',
          method: 'GET',
          headers: {
            'auth-token': token
          }
        }).rejects(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://copyfactory-api-v1.us-west.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
          method: 'GET',
          headers: {
            'auth-token': token
          }
        }).resolves(expected);
        const response = await domainClient.requestCopyFactory(opts);
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://copyfactory-api-v1.us-west.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
          method: 'GET',
          headers: {
            'auth-token': token
          }
        });
        _sinon2.default.assert.match(response, expected);

        _sinon2.default.assert.calledOnce(getHostStub);
        _sinon2.default.assert.calledOnce(getRegionsStub);
      });

      /**
       * @test {DomainClient#requestCopyFactory}
       */
      it('should return error if all regions failed', async () => {
        requestStub.withArgs({
          url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.agiliumtrade.ai/users/' + 'current/configuration/strategies',
          method: 'GET',
          headers: {
            'auth-token': token
          }
        }).throws(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://copyfactory-api-v1.us-west.agiliumtrade.agiliumtrade.ai/users/current/configuration/strategies',
          method: 'GET',
          headers: {
            'auth-token': token
          }
        }).throws(new _errorHandler.InternalError('test'));

        try {
          await domainClient.requestCopyFactory(opts);
          throw new Error('InternalError expected');
        } catch (error) {
          error.name.should.equal('InternalError');
        }
      });
    });
  });

  /**
   * @test {DomainClient#request}
   */
  describe('request', () => {

    it('should execute request', async () => {
      const opts = {
        url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
        method: 'GET',
        headers: {
          'auth-token': token
        },
        json: true
      };

      requestStub.withArgs(opts).resolves(expected);
      const response = await domainClient.request(opts);
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, opts);
    });
  });

  /**
   * @test {DomainClient#requestSignal}
   */
  describe('requestSignal', () => {

    const signalOpts = {
      url: '/users/current/subscribers/accountId/signals',
      method: 'GET',
      json: true
    };

    const expectedSignals = [{
      strategy: { id: '1234', name: 'Test strategy' },
      positionId: '123456',
      time: '2021-11-19T18:56:32.590Z',
      symbol: 'GBPUSD',
      type: 'limit',
      side: 'buy'
    }];

    let host;

    beforeEach(async () => {
      host = {
        host: 'https://copyfactory-api-v1',
        lastUpdated: Date.now(),
        regions: ['vint-hill'],
        domain: 'agiliumtrade.ai'
      };
      failoverRequestStub.withArgs({
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }).resolves(expectedSignals);
      failoverRequestStub.withArgs({
        url: 'https://copyfactory-api-v1.us-west.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }).rejects(new _errorHandler.InternalError('test'));
      await domainClient.getSignalClientHost('vint-hill');
    });

    /**
     * @test {DomainClient#requestSignal}
     */
    it('should execute a request', async () => {
      const response = await domainClient.requestSignal(signalOpts, host, 'accountId');
      _sinon2.default.assert.match(response, expectedSignals);
      _sinon2.default.assert.calledWith(failoverRequestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
    });

    /**
     * @test {DomainClient#requestSignal}
     */
    it('should execute a request with multiple regions', async () => {
      host.regions = ['vint-hill', 'us-west'];
      const response = await domainClient.requestSignal(signalOpts, host, 'accountId');
      _sinon2.default.assert.match(response, expectedSignals);
      _sinon2.default.assert.calledWith(failoverRequestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
      _sinon2.default.assert.calledWith(failoverRequestStub, {
        url: 'https://copyfactory-api-v1.us-west.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
    });

    /**
     * @test {DomainClient#requestSignal}
     */
    it('should return an error if all regions failed', async () => {
      host.regions = ['vint-hill', 'us-west'];
      failoverRequestStub.withArgs({
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }).rejects(new _errorHandler.InternalError('test'));

      try {
        await domainClient.requestSignal(signalOpts, host, 'accountId');
        throw new Error('InternalError expected');
      } catch (error) {
        error.name.should.equal('InternalError');
      }
      _sinon2.default.assert.calledWith(failoverRequestStub, {
        url: 'https://copyfactory-api-v1.vint-hill.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
      _sinon2.default.assert.calledWith(failoverRequestStub, {
        url: 'https://copyfactory-api-v1.us-west.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
    });

    /**
     * @test {DomainClient#requestSignal}
     */
    it('should execute a request and update host if expired', async () => {
      const otherRegionOpts = {
        url: 'https://copyfactory-api-v1.germany.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      };
      const otherRegionStub = failoverRequestStub.withArgs(otherRegionOpts).resolves(expectedSignals);
      const replicaCallStub = failoverRequestStub.withArgs({
        url: 'https://copyfactory-api-v1.france.agiliumtrade.ai/users/current/subscribers/accountId/signals',
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      });
      const getAccountStub = failoverRequestStub.withArgs({
        url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
        method: 'GET',
        headers: {
          'auth-token': token
        },
        json: true
      }).resolves({ _id: 'accountId', region: 'germany', accountReplicas: [{ _id: 'accountId2', region: 'france' }] });
      await domainClient.requestSignal(signalOpts, host, 'accountId');
      await new _promise2.default(res => setTimeout(res, 50));
      _sinon2.default.assert.notCalled(getAccountStub);
      _sinon2.default.assert.notCalled(otherRegionStub);
      _sinon2.default.assert.notCalled(replicaCallStub);
      await clock.tickAsync(610000);
      await domainClient.requestSignal(signalOpts, host, 'accountId');
      await new _promise2.default(res => setTimeout(res, 50));
      _sinon2.default.assert.calledOnce(getAccountStub);
      _sinon2.default.assert.notCalled(otherRegionStub);
      _sinon2.default.assert.notCalled(replicaCallStub);
      await domainClient.requestSignal(signalOpts, host, 'accountId');
      await new _promise2.default(res => setTimeout(res, 50));
      _sinon2.default.assert.calledOnce(getAccountStub);
      _sinon2.default.assert.calledOnce(otherRegionStub);
      _sinon2.default.assert.calledOnce(replicaCallStub);
    });
  });

  /**
   * @test {DomainClient#getAccountInfo}
   */
  describe('getAccountInfo', () => {

    let getAccountStub;
    let expectedAccount;

    beforeEach(() => {
      expectedAccount = { _id: 'accountId2', region: 'germany', accountReplicas: [] };
      getAccountStub = failoverRequestStub.withArgs({
        url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
        method: 'GET',
        headers: {
          'auth-token': token
        },
        json: true
      }).resolves(expectedAccount);
    });

    /**
     * @test {DomainClient#getAccountInfo}
     */
    it('should get account', async () => {
      const account = await domainClient.getAccountInfo('accountId');
      _sinon2.default.assert.match(account, { id: 'accountId2', regions: ['germany'] });
    });

    /**
     * @test {DomainClient#getAccountInfo}
     */
    it('should get account with replicas', async () => {
      getAccountStub.resolves({
        _id: 'accountId',
        region: 'vint-hill',
        accountReplicas: [{
          _id: 'accountId2',
          region: 'us-west'
        }]
      });
      const account = await domainClient.getAccountInfo('accountId');
      _sinon2.default.assert.match(account, { id: 'accountId', regions: ['vint-hill', 'us-west'] });
    });

    /**
     * @test {TradingClient#getAccountInfo}
     */
    it('should get primary account if requested account is a replica', async () => {
      getAccountStub.resolves({
        _id: 'accountId',
        region: 'vint-hill',
        primaryAccountId: 'accountId2'
      });
      failoverRequestStub.withArgs({
        url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId2',
        method: 'GET',
        headers: {
          'auth-token': token
        },
        json: true
      }).resolves({
        _id: 'accountId2', region: 'us-west', accountReplicas: [{
          _id: 'accountId',
          region: 'vint-hill'
        }]
      });
      const account = await domainClient.getAccountInfo('accountId');
      _sinon2.default.assert.match(account, { id: 'accountId2', regions: ['us-west', 'vint-hill'] });
    });
  });

  /**
   * @test {DomainClient#getSignalClientHost}
   */
  describe('getSignalClientHost', () => {

    /**
     * @test {DomainClient#getSignalClientHost}
     */
    it('should return signal client host', async () => {
      const response = await domainClient.getSignalClientHost(['vint-hill']);
      _sinon2.default.assert.match(response, {
        host: 'https://copyfactory-api-v1',
        regions: ['vint-hill'],
        domain: 'agiliumtrade.agiliumtrade.ai'
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,