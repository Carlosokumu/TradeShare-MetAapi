'use strict';

var _metaApi = require('./metaApi.client');

var _metaApi2 = _interopRequireDefault(_metaApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {MetaApiClient}
 */
describe('MetaApiClient', () => {

  let apiClient;
  let domainClient;

  beforeEach(() => {
    domainClient = {
      token: 'token'
    };
    apiClient = new _metaApi2.default(domainClient);
  });

  it('should return account token type', () => {
    apiClient._tokenType.should.equal('account');
  });

  it('should return api token type', () => {
    domainClient.token = 'header.payload.sign';
    apiClient = new _metaApi2.default(domainClient);
    apiClient._tokenType.should.equal('api');
  });

  it('should check that current token is not JWT', () => {
    apiClient._isNotJwtToken().should.equal(true);
  });

  it('should check that current token is not account token', () => {
    domainClient.token = 'header.payload.sign';
    apiClient = new _metaApi2.default(domainClient);
    apiClient._isNotAccountToken().should.equal(true);
  });

  it('should handle no access error with account token', async () => {
    try {
      await apiClient._handleNoAccessError('methodName');
    } catch (error) {
      error.message.should.equal('You can not invoke methodName method, because you have connected with account access token. ' + 'Please use API access token from https://app.metaapi.cloud/token page to invoke this method.');
    }
  });

  it('should handle no access error with api token', async () => {
    domainClient.token = 'header.payload.sign';
    apiClient = new _metaApi2.default(domainClient);
    try {
      await apiClient._handleNoAccessError('methodName');
    } catch (error) {
      error.message.should.equal('You can not invoke methodName method, because you have connected with API access token. ' + 'Please use account access token to invoke this method.');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFBcGkuY2xpZW50LnNwZWMuZXM2Il0sIm5hbWVzIjpbImRlc2NyaWJlIiwiYXBpQ2xpZW50IiwiZG9tYWluQ2xpZW50IiwiYmVmb3JlRWFjaCIsInRva2VuIiwiTWV0YUFwaUNsaWVudCIsIml0IiwiX3Rva2VuVHlwZSIsInNob3VsZCIsImVxdWFsIiwiX2lzTm90Snd0VG9rZW4iLCJfaXNOb3RBY2NvdW50VG9rZW4iLCJfaGFuZGxlTm9BY2Nlc3NFcnJvciIsImVycm9yIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7OztBQUVBOzs7QUFHQUEsU0FBUyxlQUFULEVBQTBCLE1BQU07O0FBRTlCLE1BQUlDLFNBQUo7QUFDQSxNQUFJQyxZQUFKOztBQUVBQyxhQUFXLE1BQU07QUFDZkQsbUJBQWU7QUFDYkUsYUFBTztBQURNLEtBQWY7QUFHQUgsZ0JBQVksSUFBSUksaUJBQUosQ0FBa0JILFlBQWxCLENBQVo7QUFDRCxHQUxEOztBQU9BSSxLQUFHLGtDQUFILEVBQXVDLE1BQU07QUFDM0NMLGNBQVVNLFVBQVYsQ0FBcUJDLE1BQXJCLENBQTRCQyxLQUE1QixDQUFrQyxTQUFsQztBQUNELEdBRkQ7O0FBSUFILEtBQUcsOEJBQUgsRUFBbUMsTUFBTTtBQUN2Q0osaUJBQWFFLEtBQWIsR0FBcUIscUJBQXJCO0FBQ0FILGdCQUFZLElBQUlJLGlCQUFKLENBQWtCSCxZQUFsQixDQUFaO0FBQ0FELGNBQVVNLFVBQVYsQ0FBcUJDLE1BQXJCLENBQTRCQyxLQUE1QixDQUFrQyxLQUFsQztBQUNELEdBSkQ7O0FBTUFILEtBQUcsNENBQUgsRUFBaUQsTUFBTTtBQUNyREwsY0FBVVMsY0FBVixHQUEyQkYsTUFBM0IsQ0FBa0NDLEtBQWxDLENBQXdDLElBQXhDO0FBQ0QsR0FGRDs7QUFJQUgsS0FBRyxzREFBSCxFQUEyRCxNQUFNO0FBQy9ESixpQkFBYUUsS0FBYixHQUFxQixxQkFBckI7QUFDQUgsZ0JBQVksSUFBSUksaUJBQUosQ0FBa0JILFlBQWxCLENBQVo7QUFDQUQsY0FBVVUsa0JBQVYsR0FBK0JILE1BQS9CLENBQXNDQyxLQUF0QyxDQUE0QyxJQUE1QztBQUNELEdBSkQ7O0FBTUFILEtBQUcsa0RBQUgsRUFBdUQsWUFBWTtBQUNqRSxRQUFJO0FBQ0YsWUFBTUwsVUFBVVcsb0JBQVYsQ0FBK0IsWUFBL0IsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDZEEsWUFBTUMsT0FBTixDQUFjTixNQUFkLENBQXFCQyxLQUFyQixDQUNFLGlHQUNBLDhGQUZGO0FBSUQ7QUFDRixHQVREOztBQVdBSCxLQUFHLDhDQUFILEVBQW1ELFlBQVk7QUFDN0RKLGlCQUFhRSxLQUFiLEdBQXFCLHFCQUFyQjtBQUNBSCxnQkFBWSxJQUFJSSxpQkFBSixDQUFrQkgsWUFBbEIsQ0FBWjtBQUNBLFFBQUk7QUFDRixZQUFNRCxVQUFVVyxvQkFBVixDQUErQixZQUEvQixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9DLEtBQVAsRUFBYztBQUNkQSxZQUFNQyxPQUFOLENBQWNOLE1BQWQsQ0FBcUJDLEtBQXJCLENBQ0UsNkZBQ0Esd0RBRkY7QUFJRDtBQUNGLEdBWEQ7QUFhRCxDQXhERCIsImZpbGUiOiJtZXRhQXBpLmNsaWVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgTWV0YUFwaUNsaWVudCBmcm9tICcuL21ldGFBcGkuY2xpZW50JztcblxuLyoqXG4gKiBAdGVzdCB7TWV0YUFwaUNsaWVudH1cbiAqL1xuZGVzY3JpYmUoJ01ldGFBcGlDbGllbnQnLCAoKSA9PiB7XG5cbiAgbGV0IGFwaUNsaWVudDtcbiAgbGV0IGRvbWFpbkNsaWVudDtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBkb21haW5DbGllbnQgPSB7XG4gICAgICB0b2tlbjogJ3Rva2VuJ1xuICAgIH07XG4gICAgYXBpQ2xpZW50ID0gbmV3IE1ldGFBcGlDbGllbnQoZG9tYWluQ2xpZW50KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYWNjb3VudCB0b2tlbiB0eXBlJywgKCkgPT4ge1xuICAgIGFwaUNsaWVudC5fdG9rZW5UeXBlLnNob3VsZC5lcXVhbCgnYWNjb3VudCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBhcGkgdG9rZW4gdHlwZScsICgpID0+IHtcbiAgICBkb21haW5DbGllbnQudG9rZW4gPSAnaGVhZGVyLnBheWxvYWQuc2lnbic7XG4gICAgYXBpQ2xpZW50ID0gbmV3IE1ldGFBcGlDbGllbnQoZG9tYWluQ2xpZW50KTtcbiAgICBhcGlDbGllbnQuX3Rva2VuVHlwZS5zaG91bGQuZXF1YWwoJ2FwaScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNoZWNrIHRoYXQgY3VycmVudCB0b2tlbiBpcyBub3QgSldUJywgKCkgPT4ge1xuICAgIGFwaUNsaWVudC5faXNOb3RKd3RUb2tlbigpLnNob3VsZC5lcXVhbCh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjaGVjayB0aGF0IGN1cnJlbnQgdG9rZW4gaXMgbm90IGFjY291bnQgdG9rZW4nLCAoKSA9PiB7XG4gICAgZG9tYWluQ2xpZW50LnRva2VuID0gJ2hlYWRlci5wYXlsb2FkLnNpZ24nO1xuICAgIGFwaUNsaWVudCA9IG5ldyBNZXRhQXBpQ2xpZW50KGRvbWFpbkNsaWVudCk7XG4gICAgYXBpQ2xpZW50Ll9pc05vdEFjY291bnRUb2tlbigpLnNob3VsZC5lcXVhbCh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gYWNjZXNzIGVycm9yIHdpdGggYWNjb3VudCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXBpQ2xpZW50Ll9oYW5kbGVOb0FjY2Vzc0Vycm9yKCdtZXRob2ROYW1lJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGVycm9yLm1lc3NhZ2Uuc2hvdWxkLmVxdWFsKFxuICAgICAgICAnWW91IGNhbiBub3QgaW52b2tlIG1ldGhvZE5hbWUgbWV0aG9kLCBiZWNhdXNlIHlvdSBoYXZlIGNvbm5lY3RlZCB3aXRoIGFjY291bnQgYWNjZXNzIHRva2VuLiAnICtcbiAgICAgICAgJ1BsZWFzZSB1c2UgQVBJIGFjY2VzcyB0b2tlbiBmcm9tIGh0dHBzOi8vYXBwLm1ldGFhcGkuY2xvdWQvdG9rZW4gcGFnZSB0byBpbnZva2UgdGhpcyBtZXRob2QuJ1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIG5vIGFjY2VzcyBlcnJvciB3aXRoIGFwaSB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICBkb21haW5DbGllbnQudG9rZW4gPSAnaGVhZGVyLnBheWxvYWQuc2lnbic7XG4gICAgYXBpQ2xpZW50ID0gbmV3IE1ldGFBcGlDbGllbnQoZG9tYWluQ2xpZW50KTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXBpQ2xpZW50Ll9oYW5kbGVOb0FjY2Vzc0Vycm9yKCdtZXRob2ROYW1lJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGVycm9yLm1lc3NhZ2Uuc2hvdWxkLmVxdWFsKFxuICAgICAgICAnWW91IGNhbiBub3QgaW52b2tlIG1ldGhvZE5hbWUgbWV0aG9kLCBiZWNhdXNlIHlvdSBoYXZlIGNvbm5lY3RlZCB3aXRoIEFQSSBhY2Nlc3MgdG9rZW4uICcgK1xuICAgICAgICAnUGxlYXNlIHVzZSBhY2NvdW50IGFjY2VzcyB0b2tlbiB0byBpbnZva2UgdGhpcyBtZXRob2QuJ1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG59KTsiXX0=