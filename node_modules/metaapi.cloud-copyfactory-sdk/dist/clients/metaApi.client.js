'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _methodAccessError = require('./methodAccessError');

var _methodAccessError2 = _interopRequireDefault(_methodAccessError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * metaapi.cloud MetaTrader API client
 */
class MetaApiClient {

  /**
   * Constructs MetaTrader API client instance
   * @param {DomainClient} domainClient domain client
   */
  constructor(domainClient) {
    this._domainClient = domainClient;
    this._token = domainClient.token;
  }

  /**
   * Returns type of current token
   * @returns {string} Type of current token
   * @protected
   */
  get _tokenType() {
    if (typeof this._token === 'string' && this._token.split('.').length === 3) {
      return 'api';
    }
    if (typeof this._token === 'string' && this._token.split('.').length === 1) {
      return 'account';
    }
    return '';
  }

  /**
   * Checks that current token is not api token
   * @returns {boolean} Indicator of absence api token
   * @protected
   */
  _isNotJwtToken() {
    return typeof this._token !== 'string' || this._token.split('.').length !== 3;
  }

  /**
   * Checks that current token is not account token
   * @returns {boolean} Indicator of absence account token
   * @protected
   */
  _isNotAccountToken() {
    return typeof this._token !== 'string' || this._token.split('.').length !== 1;
  }

  /**
   * Handles no accessing to the method
   * @param {string} methodName Name of method
   * @protected
   * @throws
   */
  _handleNoAccessError(methodName) {
    return _promise2.default.reject(new _methodAccessError2.default(methodName, this._tokenType));
  }

}
exports.default = MetaApiClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFBcGkuY2xpZW50LmVzNiJdLCJuYW1lcyI6WyJNZXRhQXBpQ2xpZW50IiwiY29uc3RydWN0b3IiLCJkb21haW5DbGllbnQiLCJfZG9tYWluQ2xpZW50IiwiX3Rva2VuIiwidG9rZW4iLCJfdG9rZW5UeXBlIiwic3BsaXQiLCJsZW5ndGgiLCJfaXNOb3RKd3RUb2tlbiIsIl9pc05vdEFjY291bnRUb2tlbiIsIl9oYW5kbGVOb0FjY2Vzc0Vycm9yIiwibWV0aG9kTmFtZSIsInJlamVjdCIsIk1ldGhvZEFjY2Vzc0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBOzs7Ozs7QUFFQTs7O0FBR2UsTUFBTUEsYUFBTixDQUFvQjs7QUFFakM7Ozs7QUFJQUMsY0FBWUMsWUFBWixFQUEwQjtBQUN4QixTQUFLQyxhQUFMLEdBQXFCRCxZQUFyQjtBQUNBLFNBQUtFLE1BQUwsR0FBY0YsYUFBYUcsS0FBM0I7QUFDRDs7QUFFRDs7Ozs7QUFLQSxNQUFJQyxVQUFKLEdBQWlCO0FBQ2YsUUFBSSxPQUFPLEtBQUtGLE1BQVosS0FBdUIsUUFBdkIsSUFBbUMsS0FBS0EsTUFBTCxDQUFZRyxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxNQUF2QixLQUFrQyxDQUF6RSxFQUE0RTtBQUMxRSxhQUFPLEtBQVA7QUFDRDtBQUNELFFBQUksT0FBTyxLQUFLSixNQUFaLEtBQXVCLFFBQXZCLElBQW1DLEtBQUtBLE1BQUwsQ0FBWUcsS0FBWixDQUFrQixHQUFsQixFQUF1QkMsTUFBdkIsS0FBa0MsQ0FBekUsRUFBNEU7QUFDMUUsYUFBTyxTQUFQO0FBQ0Q7QUFDRCxXQUFPLEVBQVA7QUFDRDs7QUFFRDs7Ozs7QUFLQUMsbUJBQWlCO0FBQ2YsV0FBTyxPQUFPLEtBQUtMLE1BQVosS0FBdUIsUUFBdkIsSUFBbUMsS0FBS0EsTUFBTCxDQUFZRyxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxNQUF2QixLQUFrQyxDQUE1RTtBQUNEOztBQUVEOzs7OztBQUtBRSx1QkFBcUI7QUFDbkIsV0FBTyxPQUFPLEtBQUtOLE1BQVosS0FBdUIsUUFBdkIsSUFBbUMsS0FBS0EsTUFBTCxDQUFZRyxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxNQUF2QixLQUFrQyxDQUE1RTtBQUNEOztBQUVEOzs7Ozs7QUFNQUcsdUJBQXFCQyxVQUFyQixFQUFpQztBQUMvQixXQUFPLGtCQUFRQyxNQUFSLENBQWUsSUFBSUMsMkJBQUosQ0FBc0JGLFVBQXRCLEVBQWtDLEtBQUtOLFVBQXZDLENBQWYsQ0FBUDtBQUNEOztBQXBEZ0M7a0JBQWROLGEiLCJmaWxlIjoibWV0YUFwaS5jbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBNZXRob2RBY2Nlc3NFcnJvciBmcm9tICcuL21ldGhvZEFjY2Vzc0Vycm9yJztcblxuLyoqXG4gKiBtZXRhYXBpLmNsb3VkIE1ldGFUcmFkZXIgQVBJIGNsaWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhQXBpQ2xpZW50IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBNZXRhVHJhZGVyIEFQSSBjbGllbnQgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtEb21haW5DbGllbnR9IGRvbWFpbkNsaWVudCBkb21haW4gY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21haW5DbGllbnQpIHtcbiAgICB0aGlzLl9kb21haW5DbGllbnQgPSBkb21haW5DbGllbnQ7XG4gICAgdGhpcy5fdG9rZW4gPSBkb21haW5DbGllbnQudG9rZW47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0eXBlIG9mIGN1cnJlbnQgdG9rZW5cbiAgICogQHJldHVybnMge3N0cmluZ30gVHlwZSBvZiBjdXJyZW50IHRva2VuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldCBfdG9rZW5UeXBlKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdG9rZW4gPT09ICdzdHJpbmcnICYmIHRoaXMuX3Rva2VuLnNwbGl0KCcuJykubGVuZ3RoID09PSAzKSB7XG4gICAgICByZXR1cm4gJ2FwaSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5fdG9rZW4gPT09ICdzdHJpbmcnICYmIHRoaXMuX3Rva2VuLnNwbGl0KCcuJykubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gJ2FjY291bnQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoYXQgY3VycmVudCB0b2tlbiBpcyBub3QgYXBpIHRva2VuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBJbmRpY2F0b3Igb2YgYWJzZW5jZSBhcGkgdG9rZW5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2lzTm90Snd0VG9rZW4oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLl90b2tlbiAhPT0gJ3N0cmluZycgfHwgdGhpcy5fdG9rZW4uc3BsaXQoJy4nKS5sZW5ndGggIT09IDM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoYXQgY3VycmVudCB0b2tlbiBpcyBub3QgYWNjb3VudCB0b2tlblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gSW5kaWNhdG9yIG9mIGFic2VuY2UgYWNjb3VudCB0b2tlblxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfaXNOb3RBY2NvdW50VG9rZW4oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLl90b2tlbiAhPT0gJ3N0cmluZycgfHwgdGhpcy5fdG9rZW4uc3BsaXQoJy4nKS5sZW5ndGggIT09IDE7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBubyBhY2Nlc3NpbmcgdG8gdGhlIG1ldGhvZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBOYW1lIG9mIG1ldGhvZFxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEB0aHJvd3NcbiAgICovXG4gIF9oYW5kbGVOb0FjY2Vzc0Vycm9yKG1ldGhvZE5hbWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE1ldGhvZEFjY2Vzc0Vycm9yKG1ldGhvZE5hbWUsIHRoaXMuX3Rva2VuVHlwZSkpO1xuICB9XG5cbn1cbiJdfQ==