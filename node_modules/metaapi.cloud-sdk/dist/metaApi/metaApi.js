'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _httpClient = require('../clients/httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _provisioningProfile = require('../clients/metaApi/provisioningProfile.client');

var _provisioningProfile2 = _interopRequireDefault(_provisioningProfile);

var _provisioningProfileApi = require('./provisioningProfileApi');

var _provisioningProfileApi2 = _interopRequireDefault(_provisioningProfileApi);

var _metaApiWebsocket = require('../clients/metaApi/metaApiWebsocket.client');

var _metaApiWebsocket2 = _interopRequireDefault(_metaApiWebsocket);

var _metatraderAccountApi = require('./metatraderAccountApi');

var _metatraderAccountApi2 = _interopRequireDefault(_metatraderAccountApi);

var _metatraderAccount = require('../clients/metaApi/metatraderAccount.client');

var _metatraderAccount2 = _interopRequireDefault(_metatraderAccount);

var _metatraderAccountGeneratorApi = require('./metatraderAccountGeneratorApi');

var _metatraderAccountGeneratorApi2 = _interopRequireDefault(_metatraderAccountGeneratorApi);

var _metatraderAccountGenerator = require('../clients/metaApi/metatraderAccountGenerator.client');

var _metatraderAccountGenerator2 = _interopRequireDefault(_metatraderAccountGenerator);

var _historicalMarketData = require('../clients/metaApi/historicalMarketData.client');

var _historicalMarketData2 = _interopRequireDefault(_historicalMarketData);

var _clientApi = require('../clients/metaApi/clientApi.client');

var _clientApi2 = _interopRequireDefault(_clientApi);

var _connectionRegistry = require('./connectionRegistry');

var _connectionRegistry2 = _interopRequireDefault(_connectionRegistry);

var _errorHandler = require('../clients/errorHandler');

var _optionsValidator = require('../clients/optionsValidator');

var _optionsValidator2 = _interopRequireDefault(_optionsValidator);

var _latencyMonitor = require('./latencyMonitor');

var _latencyMonitor2 = _interopRequireDefault(_latencyMonitor);

var _expertAdvisor = require('../clients/metaApi/expertAdvisor.client');

var _expertAdvisor2 = _interopRequireDefault(_expertAdvisor);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _domain = require('../clients/domain.client');

var _domain2 = _interopRequireDefault(_domain);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Request retry options
 * @typedef {Object} RetryOpts
 * @property {Number} [retries] maximum amount of request retries, default value is 5
 * @property {Number} [minDelayInSeconds] minimum delay in seconds until request retry, default value is 1
 * @property {Number} [maxDelayInSeconds] maximum delay in seconds until request retry, default value is 30
 */

/**
 * Subscriptions refresh options
 * @typedef {Object} RefreshSubscriptionsOpts
 * @property {Number} [minDelayInSeconds] minimum delay in seconds until subscriptions refresh request,
 * default value is 1
 * @property {Number} [maxDelayInSeconds] maximum delay in seconds until subscriptions refresh request,
 * default value is 600
 */

/**
 * MetaApi options
 * @typedef {Object} MetaApiOpts
 * @property {String} [application] application id
 * @property {String} [domain] domain to connect to, default is agiliumtrade.agiliumtrade.ai
 * @property {String} [region] region to connect to
 * @property {Number} [requestTimeout] timeout for socket requests in seconds
 * @property {Number} [connectTimeout] timeout for connecting to server in seconds
 * @property {Number} [packetOrderingTimeout] packet ordering timeout in seconds
 * @property {PacketLoggerOpts} [packetLogger] packet logger options
 * @property {Boolean} [enableLatencyMonitor] an option to enable latency tracking
 * @property {Boolean} [enableLatencyTracking] an option to enable latency tracking
 * @property {SynchronizationThrottlerOpts} [synchronizationThrottler] options for synchronization throttler
 * @property {RetryOpts} [retryOpts] options for request retries
 * @property {Boolean} [useSharedClientApi] option to use a shared server
 * @property {RefreshSubscriptionsOpts} [refreshSubscriptionsOpts] subscriptions refresh options
 * @property {Number} [unsubscribeThrottlingIntervalInSeconds] a timeout in seconds for throttling repeat unsubscribe
 * requests when synchronization packets still arrive after unsubscription, default is 10 seconds
 * @property {number} [accountGeneratorRequestTimeout] MT account generator API request timeout. Default is 4 minutes
 */

/**
 * MetaApi MetaTrader API SDK
 */
class MetaApi {

  /**
   * Enables using Log4js logger with extended log levels for debugging instead of
   * console.* functions. Note that log4js configuration performed by the user.
   */
  static enableLog4jsLogging() {
    _logger2.default.useLog4js();
  }

  /**
   * Constructs MetaApi class instance
   * @param {String} token authorization token
   * @param {MetaApiOpts} opts application options
   */
  // eslint-disable-next-line complexity
  constructor(token, opts) {
    const validator = new _optionsValidator2.default();
    opts = opts || {};
    const application = opts.application || 'MetaApi';
    const domain = opts.domain || 'agiliumtrade.agiliumtrade.ai';
    const requestTimeout = validator.validateNonZero(opts.requestTimeout, 60, 'requestTimeout');
    const historicalMarketDataRequestTimeout = validator.validateNonZero(opts.historicalMarketDataRequestTimeout, 240, 'historicalMarketDataRequestTimeout');
    const connectTimeout = validator.validateNonZero(opts.connectTimeout, 60, 'connectTimeout');
    const packetOrderingTimeout = validator.validateNonZero(opts.packetOrderingTimeout, 60, 'packetOrderingTimeout');
    const retryOpts = opts.retryOpts || {};
    const packetLogger = opts.packetLogger || {};
    const synchronizationThrottler = opts.synchronizationThrottler || {};
    const accountGeneratorRequestTimeout = validator.validateNonZero(opts.accountGeneratorRequestTimeout, 240, 'accountGeneratorRequestTimeout');
    if (!application.match(/[a-zA-Z0-9_]+/)) {
      throw new _errorHandler.ValidationError('Application name must be non-empty string consisting from letters, digits and _ only');
    }
    const useSharedClientApi = opts.useSharedClientApi || false;
    const refreshSubscriptionsOpts = opts.refreshSubscriptionsOpts || {};
    const httpClient = new _httpClient2.default(requestTimeout, retryOpts);
    const domainClient = new _domain2.default(httpClient, token, domain);
    const historicalMarketDataHttpClient = new _httpClient2.default(historicalMarketDataRequestTimeout, retryOpts);
    const accountGeneratorHttpClient = new _httpClient2.default(accountGeneratorRequestTimeout, retryOpts);
    const clientApiClient = new _clientApi2.default(httpClient, domainClient);
    this._metaApiWebsocketClient = new _metaApiWebsocket2.default(domainClient, token, { application, domain,
      requestTimeout, connectTimeout, packetLogger, packetOrderingTimeout, synchronizationThrottler, retryOpts,
      useSharedClientApi, region: opts.region,
      unsubscribeThrottlingIntervalInSeconds: opts.unsubscribeThrottlingIntervalInSeconds });
    this._provisioningProfileApi = new _provisioningProfileApi2.default(new _provisioningProfile2.default(httpClient, domainClient));
    this._connectionRegistry = new _connectionRegistry2.default(this._metaApiWebsocketClient, clientApiClient, application, refreshSubscriptionsOpts);
    let historicalMarketDataClient = new _historicalMarketData2.default(historicalMarketDataHttpClient, domainClient);
    this._metatraderAccountApi = new _metatraderAccountApi2.default(new _metatraderAccount2.default(httpClient, domainClient), this._metaApiWebsocketClient, this._connectionRegistry, new _expertAdvisor2.default(httpClient, domainClient), historicalMarketDataClient, application);
    this._metatraderAccountGeneratorApi = new _metatraderAccountGeneratorApi2.default(new _metatraderAccountGenerator2.default(accountGeneratorHttpClient, domainClient));
    if (opts.enableLatencyTracking || opts.enableLatencyMonitor) {
      this._latencyMonitor = new _latencyMonitor2.default();
      this._metaApiWebsocketClient.addLatencyListener(this._latencyMonitor);
    }
  }

  /**
   * Returns provisioning profile API
   * @returns {ProvisioningProfileApi} provisioning profile API
   */
  get provisioningProfileApi() {
    return this._provisioningProfileApi;
  }

  /**
   * Returns MetaTrader account API
   * @return {MetatraderAccountApi} MetaTrader account API
   */
  get metatraderAccountApi() {
    return this._metatraderAccountApi;
  }

  /**
   * Returns MetaTrader account generator API
   * @return {MetatraderDemoAccountApi} MetaTrader account generator API
   */
  get metatraderAccountGeneratorApi() {
    return this._metatraderAccountGeneratorApi;
  }

  /**
   * Returns MetaApi application latency monitor
   * @return {LatencyMonitor} latency monitor
   */
  get latencyMonitor() {
    return this._latencyMonitor;
  }

  /**
   * Closes all clients and connections
   */
  close() {
    this._metaApiWebsocketClient.removeLatencyListener(this._latencyMonitor);
    this._metaApiWebsocketClient.close();
  }

}
exports.default = MetaApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,