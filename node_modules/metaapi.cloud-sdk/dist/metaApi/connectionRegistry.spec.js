'use strict';

var _is = require('babel-runtime/core-js/object/is');

var _is2 = _interopRequireDefault(_is);

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _streamingMetaApiConnection = require('./streamingMetaApiConnection');

var _streamingMetaApiConnection2 = _interopRequireDefault(_streamingMetaApiConnection);

var _connectionRegistry = require('./connectionRegistry');

var _connectionRegistry2 = _interopRequireDefault(_connectionRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {ConnectionRegistry}
 */
describe('ConnectionRegistry', () => {

  let sandbox;
  let registry;
  let metaApiWebsocketClient = {
    addSynchronizationListener: () => {},
    addReconnectListener: () => {},
    subscribe: () => {},
    regionsByAccounts: {}
  };
  let storage = {
    lastHistoryOrderTime: () => new Date('2020-01-01T00:00:00.000Z'),
    lastDealTime: () => new Date('2020-01-02T00:00:00.000Z'),
    loadDataFromDisk: () => ({ deals: [], historyOrders: [] })
  };

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    registry = new _connectionRegistry2.default(metaApiWebsocketClient);
    sandbox.stub(_streamingMetaApiConnection2.default.prototype, 'initialize').resolves();
    sandbox.stub(_streamingMetaApiConnection2.default.prototype, 'subscribe').resolves();
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
   * @test {ConnectionRegistry#connect}
   */
  it('should connect and add connection to registry', async () => {
    let account = { id: 'id', region: 'vint-hill', accountRegions: { 'vint-hill': 'id', 'new-york': 'idReplica' } };
    let connection = registry.connect(account, storage);
    await connection.connect();
    (connection instanceof _streamingMetaApiConnection2.default).should.be.true();
    connection.historyStorage.should.equal(storage);
    _sinon2.default.assert.calledOnce(connection.initialize);
    _sinon2.default.assert.calledOnce(connection.subscribe);
    _sinon2.default.assert.match(registry._connections, _sinon2.default.match.has('id', connection));
  });

  /**
   * @test {ConnectionRegistry#connect}
   */
  it('should return the same connection on second connect if same account id', async () => {
    let accounts = [{ id: 'id0', region: 'vint-hill', accountRegions: { 'vint-hill': 'id0', 'new-york': 'id0Replica' } }, { id: 'id1', region: 'vint-hill', accountRegions: { 'vint-hill': 'id1', 'new-york': 'id1Replica' } }];
    let connection0 = registry.connect(accounts[0], storage);
    let connection02 = registry.connect(accounts[0], storage);
    let connection1 = registry.connect(accounts[1], storage);
    await connection0.connect();
    await connection02.connect();
    await connection1.connect();
    _sinon2.default.assert.called(connection0.initialize);
    _sinon2.default.assert.called(connection0.subscribe);
    _sinon2.default.assert.called(connection1.initialize);
    _sinon2.default.assert.called(connection1.subscribe);
    _sinon2.default.assert.match(registry._connections, _sinon2.default.match.has('id0', connection0));
    _sinon2.default.assert.match(registry._connections, _sinon2.default.match.has('id1', connection1));
    _sinon2.default.assert.match((0, _is2.default)(connection0, connection02), true);
    _sinon2.default.assert.match((0, _is2.default)(connection0, connection1), false);
  });

  /**
   * @test {ConnectionRegistry#remove}
   */
  it('should remove the account from registry', async () => {
    let accounts = [{ id: 'id0', region: 'vint-hill', accountRegions: { 'vint-hill': 'id0', 'new-york': 'id0Replica' } }, { id: 'id1', region: 'vint-hill', accountRegions: { 'vint-hill': 'id1', 'new-york': 'id1Replica' } }];
    let connection0 = await registry.connect(accounts[0], storage);
    let connection1 = await registry.connect(accounts[1], storage);
    _sinon2.default.assert.match(registry._connections, _sinon2.default.match.has('id0', connection0));
    _sinon2.default.assert.match(registry._connections, _sinon2.default.match.has('id1', connection1));
    registry.remove(accounts[0].id);
    _sinon2.default.assert.match(registry._connections.id0, undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,