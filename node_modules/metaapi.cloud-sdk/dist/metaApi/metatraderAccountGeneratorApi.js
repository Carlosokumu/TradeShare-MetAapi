'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metatraderAccountCredentials = require('./metatraderAccountCredentials');

var _metatraderAccountCredentials2 = _interopRequireDefault(_metatraderAccountCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Exposes MetaTrader account generator API logic to the consumers
 */
class MetatraderAccountGeneratorApi {

  /**
   * Constructs a MetaTrader account generator API instance
   * @param {MetatraderAccountGeneratorClient} metatraderAccountGeneratorClient MetaTrader account generator REST API
   * client
   */
  constructor(metatraderAccountGeneratorClient) {
    this._metatraderAccountGeneratorClient = metatraderAccountGeneratorClient;
  }

  /**
   * Creates new MetaTrader 4 demo account.
   * See (https://metaapi.cloud/docs/provisioning/api/generateAccount/createMT4DemoAccount/)
   * @param {NewMT4DemoAccount} account account to create
   * @param {string} [profileId] id of the provisioning profile that will be used as the basis for creating this account
   * @return {Promise<MetatraderAccountCredentials>} promise resolving with MetaTrader account credentials entity
   */
  async createMT4DemoAccount(account, profileId) {
    let mtAccount = await this._metatraderAccountGeneratorClient.createMT4DemoAccount(account, profileId);
    return new _metatraderAccountCredentials2.default(mtAccount);
  }

  /**
   * Creates new MetaTrader 4 live account.
   * See https://metaapi.cloud/docs/provisioning/api/generateAccount/createMT4LiveAccount/
   * @param {NewMT4LiveAccount} account account to create
   * @param {string} [profileId] id of the provisioning profile that will be used as the basis for creating this account
   * @return {Promise<MetatraderAccountCredentials>} promise resolving with MetaTrader account credentials entity
   */
  async createMT4LiveAccount(account, profileId) {
    let mtAccount = await this._metatraderAccountGeneratorClient.createMT4LiveAccount(account, profileId);
    return new _metatraderAccountCredentials2.default(mtAccount);
  }

  /**
   * Creates new MetaTrader 5 demo account.
   * See https://metaapi.cloud/docs/provisioning/api/generateAccount/createMT5DemoAccount/
   * @param {NewMT5DemoAccount} account account to create
   * @param {string} [profileId] id of the provisioning profile that will be used as the basis for creating this account
   * @return {Promise<MetatraderAccountCredentials>} promise resolving with MetaTrader account credentials entity
   */
  async createMT5DemoAccount(account, profileId) {
    let mtAccount = await this._metatraderAccountGeneratorClient.createMT5DemoAccount(account, profileId);
    return new _metatraderAccountCredentials2.default(mtAccount);
  }

  /**
   * Creates new MetaTrader 5 live account.
   * See https://metaapi.cloud/docs/provisioning/api/generateAccount/createMT5LiveAccount/
   * @param {NewMT5LiveAccount} account account to create
   * @param {string} [profileId] id of the provisioning profile that will be used as the basis for creating this account
   * @return {Promise<MetatraderAccountCredentials>} promise resolving with MetaTrader account credentials entity
   */
  async createMT5LiveAccount(account, profileId) {
    let mtAccount = await this._metatraderAccountGeneratorClient.createMT5LiveAccount(account, profileId);
    return new _metatraderAccountCredentials2.default(mtAccount);
  }

}
exports.default = MetatraderAccountGeneratorApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL21ldGF0cmFkZXJBY2NvdW50R2VuZXJhdG9yQXBpLmVzNiJdLCJuYW1lcyI6WyJNZXRhdHJhZGVyQWNjb3VudEdlbmVyYXRvckFwaSIsImNvbnN0cnVjdG9yIiwibWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JDbGllbnQiLCJfbWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JDbGllbnQiLCJjcmVhdGVNVDREZW1vQWNjb3VudCIsImFjY291bnQiLCJwcm9maWxlSWQiLCJtdEFjY291bnQiLCJNZXRhdHJhZGVyQWNjb3VudENyZWRlbnRpYWxzIiwiY3JlYXRlTVQ0TGl2ZUFjY291bnQiLCJjcmVhdGVNVDVEZW1vQWNjb3VudCIsImNyZWF0ZU1UNUxpdmVBY2NvdW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7Ozs7OztBQUVBOzs7QUFHZSxNQUFNQSw2QkFBTixDQUFvQzs7QUFFakQ7Ozs7O0FBS0FDLGNBQVlDLGdDQUFaLEVBQThDO0FBQzVDLFNBQUtDLGlDQUFMLEdBQXlDRCxnQ0FBekM7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFFBQU1FLG9CQUFOLENBQTJCQyxPQUEzQixFQUFvQ0MsU0FBcEMsRUFBK0M7QUFDN0MsUUFBSUMsWUFBWSxNQUFNLEtBQUtKLGlDQUFMLENBQXVDQyxvQkFBdkMsQ0FBNERDLE9BQTVELEVBQXFFQyxTQUFyRSxDQUF0QjtBQUNBLFdBQU8sSUFBSUUsc0NBQUosQ0FBaUNELFNBQWpDLENBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFFBQU1FLG9CQUFOLENBQTJCSixPQUEzQixFQUFvQ0MsU0FBcEMsRUFBK0M7QUFDN0MsUUFBSUMsWUFBWSxNQUFNLEtBQUtKLGlDQUFMLENBQXVDTSxvQkFBdkMsQ0FBNERKLE9BQTVELEVBQXFFQyxTQUFyRSxDQUF0QjtBQUNBLFdBQU8sSUFBSUUsc0NBQUosQ0FBaUNELFNBQWpDLENBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFFBQU1HLG9CQUFOLENBQTJCTCxPQUEzQixFQUFvQ0MsU0FBcEMsRUFBK0M7QUFDN0MsUUFBSUMsWUFBWSxNQUFNLEtBQUtKLGlDQUFMLENBQXVDTyxvQkFBdkMsQ0FBNERMLE9BQTVELEVBQXFFQyxTQUFyRSxDQUF0QjtBQUNBLFdBQU8sSUFBSUUsc0NBQUosQ0FBaUNELFNBQWpDLENBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFFBQU1JLG9CQUFOLENBQTJCTixPQUEzQixFQUFvQ0MsU0FBcEMsRUFBK0M7QUFDN0MsUUFBSUMsWUFBWSxNQUFNLEtBQUtKLGlDQUFMLENBQXVDUSxvQkFBdkMsQ0FBNEROLE9BQTVELEVBQXFFQyxTQUFyRSxDQUF0QjtBQUNBLFdBQU8sSUFBSUUsc0NBQUosQ0FBaUNELFNBQWpDLENBQVA7QUFDRDs7QUF6RGdEO2tCQUE5QlAsNkIiLCJmaWxlIjoibWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JBcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBNZXRhdHJhZGVyQWNjb3VudENyZWRlbnRpYWxzIGZyb20gJy4vbWV0YXRyYWRlckFjY291bnRDcmVkZW50aWFscyc7XG5cbi8qKlxuICogRXhwb3NlcyBNZXRhVHJhZGVyIGFjY291bnQgZ2VuZXJhdG9yIEFQSSBsb2dpYyB0byB0aGUgY29uc3VtZXJzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ldGF0cmFkZXJBY2NvdW50R2VuZXJhdG9yQXBpIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIE1ldGFUcmFkZXIgYWNjb3VudCBnZW5lcmF0b3IgQVBJIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7TWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JDbGllbnR9IG1ldGF0cmFkZXJBY2NvdW50R2VuZXJhdG9yQ2xpZW50IE1ldGFUcmFkZXIgYWNjb3VudCBnZW5lcmF0b3IgUkVTVCBBUElcbiAgICogY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXRhdHJhZGVyQWNjb3VudEdlbmVyYXRvckNsaWVudCkge1xuICAgIHRoaXMuX21ldGF0cmFkZXJBY2NvdW50R2VuZXJhdG9yQ2xpZW50ID0gbWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JDbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBuZXcgTWV0YVRyYWRlciA0IGRlbW8gYWNjb3VudC5cbiAgICogU2VlIChodHRwczovL21ldGFhcGkuY2xvdWQvZG9jcy9wcm92aXNpb25pbmcvYXBpL2dlbmVyYXRlQWNjb3VudC9jcmVhdGVNVDREZW1vQWNjb3VudC8pXG4gICAqIEBwYXJhbSB7TmV3TVQ0RGVtb0FjY291bnR9IGFjY291bnQgYWNjb3VudCB0byBjcmVhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9maWxlSWRdIGlkIG9mIHRoZSBwcm92aXNpb25pbmcgcHJvZmlsZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYmFzaXMgZm9yIGNyZWF0aW5nIHRoaXMgYWNjb3VudFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1ldGF0cmFkZXJBY2NvdW50Q3JlZGVudGlhbHM+fSBwcm9taXNlIHJlc29sdmluZyB3aXRoIE1ldGFUcmFkZXIgYWNjb3VudCBjcmVkZW50aWFscyBlbnRpdHlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZU1UNERlbW9BY2NvdW50KGFjY291bnQsIHByb2ZpbGVJZCkge1xuICAgIGxldCBtdEFjY291bnQgPSBhd2FpdCB0aGlzLl9tZXRhdHJhZGVyQWNjb3VudEdlbmVyYXRvckNsaWVudC5jcmVhdGVNVDREZW1vQWNjb3VudChhY2NvdW50LCBwcm9maWxlSWQpO1xuICAgIHJldHVybiBuZXcgTWV0YXRyYWRlckFjY291bnRDcmVkZW50aWFscyhtdEFjY291bnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IE1ldGFUcmFkZXIgNCBsaXZlIGFjY291bnQuXG4gICAqIFNlZSBodHRwczovL21ldGFhcGkuY2xvdWQvZG9jcy9wcm92aXNpb25pbmcvYXBpL2dlbmVyYXRlQWNjb3VudC9jcmVhdGVNVDRMaXZlQWNjb3VudC9cbiAgICogQHBhcmFtIHtOZXdNVDRMaXZlQWNjb3VudH0gYWNjb3VudCBhY2NvdW50IHRvIGNyZWF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3Byb2ZpbGVJZF0gaWQgb2YgdGhlIHByb3Zpc2lvbmluZyBwcm9maWxlIHRoYXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBiYXNpcyBmb3IgY3JlYXRpbmcgdGhpcyBhY2NvdW50XG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWV0YXRyYWRlckFjY291bnRDcmVkZW50aWFscz59IHByb21pc2UgcmVzb2x2aW5nIHdpdGggTWV0YVRyYWRlciBhY2NvdW50IGNyZWRlbnRpYWxzIGVudGl0eVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlTVQ0TGl2ZUFjY291bnQoYWNjb3VudCwgcHJvZmlsZUlkKSB7XG4gICAgbGV0IG10QWNjb3VudCA9IGF3YWl0IHRoaXMuX21ldGF0cmFkZXJBY2NvdW50R2VuZXJhdG9yQ2xpZW50LmNyZWF0ZU1UNExpdmVBY2NvdW50KGFjY291bnQsIHByb2ZpbGVJZCk7XG4gICAgcmV0dXJuIG5ldyBNZXRhdHJhZGVyQWNjb3VudENyZWRlbnRpYWxzKG10QWNjb3VudCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBuZXcgTWV0YVRyYWRlciA1IGRlbW8gYWNjb3VudC5cbiAgICogU2VlIGh0dHBzOi8vbWV0YWFwaS5jbG91ZC9kb2NzL3Byb3Zpc2lvbmluZy9hcGkvZ2VuZXJhdGVBY2NvdW50L2NyZWF0ZU1UNURlbW9BY2NvdW50L1xuICAgKiBAcGFyYW0ge05ld01UNURlbW9BY2NvdW50fSBhY2NvdW50IGFjY291bnQgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvZmlsZUlkXSBpZCBvZiB0aGUgcHJvdmlzaW9uaW5nIHByb2ZpbGUgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGJhc2lzIGZvciBjcmVhdGluZyB0aGlzIGFjY291bnRcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXRhdHJhZGVyQWNjb3VudENyZWRlbnRpYWxzPn0gcHJvbWlzZSByZXNvbHZpbmcgd2l0aCBNZXRhVHJhZGVyIGFjY291bnQgY3JlZGVudGlhbHMgZW50aXR5XG4gICAqL1xuICBhc3luYyBjcmVhdGVNVDVEZW1vQWNjb3VudChhY2NvdW50LCBwcm9maWxlSWQpIHtcbiAgICBsZXQgbXRBY2NvdW50ID0gYXdhaXQgdGhpcy5fbWV0YXRyYWRlckFjY291bnRHZW5lcmF0b3JDbGllbnQuY3JlYXRlTVQ1RGVtb0FjY291bnQoYWNjb3VudCwgcHJvZmlsZUlkKTtcbiAgICByZXR1cm4gbmV3IE1ldGF0cmFkZXJBY2NvdW50Q3JlZGVudGlhbHMobXRBY2NvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBNZXRhVHJhZGVyIDUgbGl2ZSBhY2NvdW50LlxuICAgKiBTZWUgaHR0cHM6Ly9tZXRhYXBpLmNsb3VkL2RvY3MvcHJvdmlzaW9uaW5nL2FwaS9nZW5lcmF0ZUFjY291bnQvY3JlYXRlTVQ1TGl2ZUFjY291bnQvXG4gICAqIEBwYXJhbSB7TmV3TVQ1TGl2ZUFjY291bnR9IGFjY291bnQgYWNjb3VudCB0byBjcmVhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9maWxlSWRdIGlkIG9mIHRoZSBwcm92aXNpb25pbmcgcHJvZmlsZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYmFzaXMgZm9yIGNyZWF0aW5nIHRoaXMgYWNjb3VudFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1ldGF0cmFkZXJBY2NvdW50Q3JlZGVudGlhbHM+fSBwcm9taXNlIHJlc29sdmluZyB3aXRoIE1ldGFUcmFkZXIgYWNjb3VudCBjcmVkZW50aWFscyBlbnRpdHlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZU1UNUxpdmVBY2NvdW50KGFjY291bnQsIHByb2ZpbGVJZCkge1xuICAgIGxldCBtdEFjY291bnQgPSBhd2FpdCB0aGlzLl9tZXRhdHJhZGVyQWNjb3VudEdlbmVyYXRvckNsaWVudC5jcmVhdGVNVDVMaXZlQWNjb3VudChhY2NvdW50LCBwcm9maWxlSWQpO1xuICAgIHJldHVybiBuZXcgTWV0YXRyYWRlckFjY291bnRDcmVkZW50aWFscyhtdEFjY291bnQpO1xuICB9XG5cbn1cbiJdfQ==