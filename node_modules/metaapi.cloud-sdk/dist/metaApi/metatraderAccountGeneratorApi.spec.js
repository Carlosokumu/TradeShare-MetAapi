'use strict';

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _metatraderAccountGeneratorApi = require('./metatraderAccountGeneratorApi');

var _metatraderAccountGeneratorApi2 = _interopRequireDefault(_metatraderAccountGeneratorApi);

var _metatraderAccountCredentials = require('./metatraderAccountCredentials');

var _metatraderAccountCredentials2 = _interopRequireDefault(_metatraderAccountCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {MetatraderAccountGeneratorApi}
 * @test {MetatraderAccountCredentials}
 */
describe('MetatraderAccountGeneratorApi', () => {

  let sandbox;
  let api;
  let client = {
    createMT4DemoAccount: () => {},
    createMT5DemoAccount: () => {},
    createMT4LiveAccount: () => {},
    createMT5LiveAccount: () => {}
  };

  before(() => {
    api = new _metatraderAccountGeneratorApi2.default(client);
    sandbox = _sinon2.default.createSandbox();
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
   * @test {MetatraderAccountGeneratorApi#createMT4DemoAccount}
   */
  it('should create MT4 demo account', async () => {
    sandbox.stub(client, 'createMT4DemoAccount').resolves({
      login: '12345',
      password: 'qwerty',
      serverName: 'HugosWay-Demo3',
      investorPassword: 'qwerty'
    });
    let newAccountData = {
      accountType: 'type',
      balance: 10,
      email: 'test@test.com',
      leverage: 15,
      serverName: 'HugosWay-Demo3'
    };
    let account = await api.createMT4DemoAccount(newAccountData, 'profileId1');
    account.should.match({ login: '12345', password: 'qwerty', serverName: 'HugosWay-Demo3',
      investorPassword: 'qwerty' });
    (account instanceof _metatraderAccountCredentials2.default).should.be.true();
    _sinon2.default.assert.calledWith(client.createMT4DemoAccount, newAccountData, 'profileId1');
  });

  /**
   * @test {MetatraderAccountGeneratorApi#createMT4LiveAccount}
   */
  it('should create MT4 live account', async () => {
    sandbox.stub(client, 'createMT4LiveAccount').resolves({
      login: '12345',
      password: 'qwerty',
      serverName: 'HugosWay-Live3',
      investorPassword: 'qwerty'
    });
    let newAccountData = {
      accountType: 'type',
      balance: 10,
      email: 'test@test.com',
      leverage: 15,
      serverName: 'HugosWay-Live3'
    };
    let account = await api.createMT4LiveAccount(newAccountData, 'profileId1');
    account.should.match({ login: '12345', password: 'qwerty', serverName: 'HugosWay-Live3',
      investorPassword: 'qwerty' });
    (account instanceof _metatraderAccountCredentials2.default).should.be.true();
    _sinon2.default.assert.calledWith(client.createMT4LiveAccount, newAccountData, 'profileId1');
  });

  /**
   * @test {MetatraderAccountGeneratorApi#createMT5DemoAccount}
   */
  it('should create MT5 demo account', async () => {
    sandbox.stub(client, 'createMT5DemoAccount').resolves({
      login: '12345',
      password: 'qwerty',
      serverName: 'HugosWay-Demo3',
      investorPassword: 'qwerty'
    });
    let newAccountData = {
      accountType: 'type',
      balance: 15,
      email: 'test@test.com',
      leverage: 20,
      serverName: 'HugosWay-Demo3'
    };
    let account = await api.createMT5DemoAccount(newAccountData, 'profileId2');
    account.should.match({ login: '12345', password: 'qwerty', serverName: 'HugosWay-Demo3',
      investorPassword: 'qwerty' });
    (account instanceof _metatraderAccountCredentials2.default).should.be.true();
    _sinon2.default.assert.calledWith(client.createMT5DemoAccount, newAccountData, 'profileId2');
  });

  /**
   * @test {MetatraderAccountGeneratorApi#createMT5LiveAccount}
   */
  it('should create MT5 live account', async () => {
    sandbox.stub(client, 'createMT5LiveAccount').resolves({
      login: '12345',
      password: 'qwerty',
      serverName: 'HugosWay-Live3',
      investorPassword: 'qwerty'
    });
    let newAccountData = {
      accountType: 'type',
      balance: 15,
      email: 'test@test.com',
      leverage: 20,
      serverName: 'HugosWay-Live3'
    };
    let account = await api.createMT5LiveAccount(newAccountData, 'profileId2');
    account.should.match({ login: '12345', password: 'qwerty', serverName: 'HugosWay-Live3',
      investorPassword: 'qwerty' });
    (account instanceof _metatraderAccountCredentials2.default).should.be.true();
    _sinon2.default.assert.calledWith(client.createMT5LiveAccount, newAccountData, 'profileId2');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,