'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _terminalState = require('./terminalState');

var _terminalState2 = _interopRequireDefault(_terminalState);

var _cryptoJs = require('crypto-js');

var _cryptoJs2 = _interopRequireDefault(_cryptoJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {TerminalState}
 */
describe('TerminalState', () => {

  let state, sandbox;
  const md5 = arg => _cryptoJs2.default.MD5(arg).toString();

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    const clientApiClient = {
      getHashingIgnoredFieldLists: () => ({
        g1: {
          specification: ['description', 'expirationTime', 'expirationBrokerTime', 'startTime', 'startBrokerTime', 'pipSize'],
          position: ['time', 'updateTime', 'comment', 'brokerComment', 'originalComment', 'clientId', 'profit', 'realizedProfit', 'unrealizedProfit', 'currentPrice', 'currentTickValue', 'accountCurrencyExchangeRate', 'updateSequenceNumber'],
          order: ['time', 'expirationTime', 'comment', 'brokerComment', 'originalComment', 'clientId', 'currentPrice', 'accountCurrencyExchangeRate', 'updateSequenceNumber']
        },
        g2: {
          specification: ['pipSize'],
          position: ['comment', 'brokerComment', 'originalComment', 'clientId', 'profit', 'realizedProfit', 'unrealizedProfit', 'currentPrice', 'currentTickValue', 'accountCurrencyExchangeRate', 'updateSequenceNumber'],
          order: ['comment', 'brokerComment', 'originalComment', 'clientId', 'currentPrice', 'accountCurrencyExchangeRate', 'updateSequenceNumber']
        }
      })
    };
    state = new _terminalState2.default('accountId', clientApiClient);
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
   * @test {TerminalState#onConnected}
   * @test {TerminalState#onDisconnected}
   * @test {TerminalState#connected}
   */
  it('should return connection state', () => {
    state.connected.should.be.false();
    state.onConnected('vint-hill:1:ps-mpa-1');
    state.connected.should.be.true();
    state.onDisconnected('vint-hill:1:ps-mpa-1');
    state.connected.should.be.false();
  });

  /**
   * @test {TerminalState#onBrokerConnectionStatus}
   * @test {TerminalState#connectedToBroker}
   */
  it('should return broker connection state', async () => {
    const clock = _sinon2.default.useFakeTimers();
    state.connectedToBroker.should.be.false();
    state.onBrokerConnectionStatusChanged('vint-hill:1:ps-mpa-1', true);
    state.connectedToBroker.should.be.true();
    state.onBrokerConnectionStatusChanged('vint-hill:1:ps-mpa-1', false);
    state.connectedToBroker.should.be.false();
    state.onBrokerConnectionStatusChanged('vint-hill:1:ps-mpa-1', true);
    state.onDisconnected('vint-hill:1:ps-mpa-1');
    state.connectedToBroker.should.be.false();
    await clock.tickAsync(65000);
    clock.restore();
  });

  /**
   * @test {TerminalState#onAccountInformationUpdated}
   * @test {TerminalState#accountInformation}
   */
  it('should return account information', () => {
    _should2.default.not.exist(state.accountInformation);
    state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { balance: 1000 });
    state.accountInformation.should.match({ balance: 1000 });
  });

  /**
   * @test {TerminalState#onPositionUpdated}
   * @test {TerminalState#onPositionRemoved}
   * @test {TerminalState#positions}
   */
  it('should return positions', () => {
    state.positions.length.should.equal(0);
    state.onPositionUpdated('vint-hill:1:ps-mpa-1', { id: '1', profit: 10 });
    state.onPositionUpdated('vint-hill:1:ps-mpa-1', { id: '2' });
    state.onPositionUpdated('vint-hill:1:ps-mpa-1', { id: '1', profit: 11 });
    state.onPositionRemoved('vint-hill:1:ps-mpa-1', '2');
    state.positions.length.should.equal(1);
    state.positions.should.match([{ id: '1', profit: 11 }]);
  });

  /**
   * @test {TerminalState#onPendingOrderUpdated}
   * @test {TerminalState#onPendingOrderCompleted}
   * @test {TerminalState#orders}
   */
  it('should return orders', async () => {
    state.orders.length.should.equal(0);
    await state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', { id: '1', openPrice: 10 });
    await state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', { id: '2' });
    await state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', { id: '1', openPrice: 11 });
    state.orders.length.should.equal(2);
    await state.onPendingOrderCompleted('vint-hill:1:ps-mpa-1', '2');
    state.orders.length.should.equal(1);
    state.orders.should.match([{ id: '1', openPrice: 11 }]);
  });

  /**
   * @test {TerminalState#onSymbolSpecificationsUpdated}
   * @test {TerminalState#specifications}
   * @test {TerminalState#specification}
   */
  it('should return specifications', () => {
    state.specifications.length.should.equal(0);
    state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'EURUSD', tickSize: 0.00001 }, { symbol: 'GBPUSD' }], []);
    state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'AUDNZD' }, { symbol: 'EURUSD',
      tickSize: 0.0001 }], ['AUDNZD']);
    state.specifications.length.should.equal(2);
    state.specifications.should.match([{ symbol: 'EURUSD', tickSize: 0.0001 }, { symbol: 'GBPUSD' }]);
    state.specification('EURUSD').should.match({ symbol: 'EURUSD', tickSize: 0.0001 });
  });

  /**
   * @test {TerminalState#onSymbolPricesUpdated}
   * @test {TerminalState#price}
   * @test {TerminalState#lastQuoteTime}
   */
  it('should return price', () => {
    _should2.default.not.exist(state.price('EURUSD'));
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: new Date('2022-01-01T00:00:00.000Z'),
      brokerTime: '2022-01-01 02:00:00.000', symbol: 'EURUSD', bid: 1, ask: 1.1 }]);
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: new Date('2022-01-01T00:00:01.000Z'),
      brokerTime: '2022-01-01 02:00:01.000', symbol: 'GBPUSD' }]);
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: new Date('2022-01-01T00:00:02.000Z'),
      brokerTime: '2022-01-01 02:00:02.000', symbol: 'EURUSD', bid: 1, ask: 1.2 }]);
    state.price('EURUSD').should.match({ symbol: 'EURUSD', bid: 1, ask: 1.2 });
    state.lastQuoteTime.should.match({ time: new Date('2022-01-01T00:00:02.000Z'),
      brokerTime: '2022-01-01 02:00:02.000' });
  });

  /**
   * @test {TerminalState#onSymbolPricesUpdated}
   * @test {TerminalState#price}
   */
  it('should wait for price', async () => {
    _should2.default.not.exist(state.price('EURUSD'));
    let promise = state.waitForPrice('EURUSD');
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: new Date(), symbol: 'EURUSD', bid: 1, ask: 1.1 }]);
    (await promise).should.match({ symbol: 'EURUSD', bid: 1, ask: 1.1 });
  });

  /**
   * @test {TerminalState#onSymbolPricesUpdated}
   * @test {TerminalState#accountInformation}
   * @test {TerminalState#positions}
   */
  it('should update account equity and position profit on price update', () => {
    state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { equity: 1000, balance: 800 });
    state.onPositionsReplaced('vint-hill:1:ps-mpa-1', [{
      id: '1',
      symbol: 'EURUSD',
      type: 'POSITION_TYPE_BUY',
      currentPrice: 9,
      currentTickValue: 0.5,
      openPrice: 8,
      profit: 100,
      volume: 2
    }]);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    state.onPositionUpdated('vint-hill:1:ps-mpa-1', {
      id: '2',
      symbol: 'AUDUSD',
      type: 'POSITION_TYPE_BUY',
      currentPrice: 9,
      currentTickValue: 0.5,
      openPrice: 8,
      profit: 100,
      volume: 2
    });
    state.onPositionsSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'EURUSD', tickSize: 0.01, digits: 5 }, { symbol: 'AUDUSD', tickSize: 0.01, digits: 5 }], []);
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{
      time: new Date(),
      symbol: 'EURUSD',
      profitTickValue: 0.5,
      lossTickValue: 0.5,
      bid: 10,
      ask: 11
    }, {
      time: new Date(),
      symbol: 'AUDUSD',
      profitTickValue: 0.5,
      lossTickValue: 0.5,
      bid: 10,
      ask: 11
    }]);
    state.positions.map(p => p.profit).should.match([200, 200]);
    state.positions.map(p => p.unrealizedProfit).should.match([200, 200]);
    state.positions.map(p => p.currentPrice).should.match([10, 10]);
    state.accountInformation.equity.should.equal(1200);
  });

  /**
   * @test {TerminalState#onSymbolPricesUpdated}
   * @test {TerminalState#accountInformation}
   * @test {TerminalState#positions}
   */
  it('should update margin fields on price update', () => {
    state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { equity: 1000, balance: 800 });
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: new Date(), symbol: 'EURUSD', bid: 1, ask: 1.1 }], 100, 200, 400, 40000);
    state.accountInformation.equity.should.equal(100);
    state.accountInformation.margin.should.equal(200);
    state.accountInformation.freeMargin.should.equal(400);
    state.accountInformation.marginLevel.should.equal(40000);
  });

  /**
   * @test {TerminalState#onSymbolPriceUpdated}
   * @test {TerminalState#orders}
   */
  it('should update order currentPrice on price update', () => {
    state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', {
      id: '1',
      symbol: 'EURUSD',
      type: 'ORDER_TYPE_BUY_LIMIT',
      currentPrice: 9
    });
    state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', {
      id: '2',
      symbol: 'AUDUSD',
      type: 'ORDER_TYPE_SELL_LIMIT',
      currentPrice: 9
    });
    state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'EURUSD', tickSize: 0.01 }], []);
    state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{
      time: new Date(),
      symbol: 'EURUSD',
      profitTickValue: 0.5,
      lossTickValue: 0.5,
      bid: 10,
      ask: 11
    }]);
    state.orders.map(o => o.currentPrice).should.match([11, 9]);
  });

  /**
   * @test {TerminalState#onDisconnected}
   */
  it('should remove state on closed stream', async () => {
    const date = new Date();
    _sinon2.default.assert.match(state.price('EURUSD'), undefined);
    await state.onSymbolPricesUpdated('vint-hill:1:ps-mpa-1', [{ time: date, symbol: 'EURUSD', bid: 1, ask: 1.1 }]);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    _sinon2.default.assert.match(state.price('EURUSD'), { time: date, symbol: 'EURUSD', bid: 1, ask: 1.1 });
    await state.onDisconnected('vint-hill:1:ps-mpa-1');
  });

  /**
   * @test {TerminalState#onSynchronizationStarted}
   */
  it('should reset state on synchronization started event', async () => {
    const specification = { symbol: 'EURUSD', tickSize: 0.01 };
    const positions = [{
      id: '1',
      symbol: 'EURUSD',
      type: 'POSITION_TYPE_BUY',
      currentPrice: 9,
      currentTickValue: 0.5,
      openPrice: 8,
      profit: 100,
      volume: 2
    }];
    const orders = [{
      id: '1',
      symbol: 'EURUSD',
      type: 'ORDER_TYPE_BUY_LIMIT',
      currentPrice: 9
    }];
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [specification], []);
    await state.onPositionsReplaced('vint-hill:1:ps-mpa-1', positions);
    await state.onPendingOrdersReplaced('vint-hill:1:ps-mpa-1', orders);
    _sinon2.default.assert.match(state.accountInformation, { balance: 1000 });
    _sinon2.default.assert.match(state.specification('EURUSD'), specification);
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-1', false, false, false);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    _sinon2.default.assert.match(state.accountInformation, undefined);
    _sinon2.default.assert.match(state.specification('EURUSD'), specification);
    _sinon2.default.assert.match(state.orders, orders);
    _sinon2.default.assert.match(state.positions, positions);
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-1', true, false, false);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    _sinon2.default.assert.match(state.specification('EURUSD'), undefined);
    _sinon2.default.assert.match(state.orders, orders);
    _sinon2.default.assert.match(state.positions, positions);
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-1', true, false, true);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    _sinon2.default.assert.match(state.orders, []);
    _sinon2.default.assert.match(state.positions, positions);
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-1', true, true, true);
    state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
    _sinon2.default.assert.match(state.positions, []);
  });

  /**
   * @test {TerminalState#getHashes}
   */
  describe('hashes', () => {

    let getHashesSpy;

    beforeEach(() => {
      getHashesSpy = sandbox.spy(state, '_getHash');
    });

    /**
     * @test {TerminalState#getHashes}
     */
    it('should return hashes for terminal state data for cloud-g1 accounts', async () => {
      const specificationsHash = md5('[{"symbol":"AUDNZD","tickSize":0.01000000},{"symbol":"EURUSD",' + '"tickSize":0.00000100,"contractSize":1.00000000,"maxVolume":30000.00000000,' + '"hedgedMarginUsesLargerLeg":false,"digits":3}]');
      const positionsHash = md5('[{"id":"46214692","type":"POSITION_TYPE_BUY","symbol":"GBPUSD","magic":1000,' + '"openPrice":1.26101000,"volume":0.07000000,"swap":0.00000000,"commission":-0.25000000,' + '"stopLoss":1.17721000}]');
      const ordersHash = md5('[{"id":"46871284","type":"ORDER_TYPE_BUY_LIMIT","state":"ORDER_STATE_PLACED",' + '"symbol":"AUDNZD","magic":123456,"platform":"mt5","openPrice":1.03000000,' + '"volume":0.01000000,"currentVolume":0.01000000}]');
      let hashes = await state.getHashes('cloud-g1', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.match(hashes.specificationsMd5, null);
      _sinon2.default.assert.match(hashes.positionsMd5, null);
      _sinon2.default.assert.match(hashes.ordersMd5, null);
      await state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'AUDNZD', tickSize: 0.01, description: 'Test1' }, { symbol: 'EURUSD', tickSize: 0.000001, contractSize: 1, maxVolume: 30000,
        hedgedMarginUsesLargerLeg: false, digits: 3, description: 'Test2' }], []);
      await state.onPositionsReplaced('vint-hill:1:ps-mpa-1', [{
        id: '46214692',
        type: 'POSITION_TYPE_BUY',
        symbol: 'GBPUSD',
        magic: 1000,
        time: new Date('2020-04-15T02:45:06.521Z'),
        updateTime: new Date('2020-04-15T02:45:06.521Z'),
        openPrice: 1.26101,
        currentPrice: 1.24883,
        currentTickValue: 1,
        volume: 0.07,
        swap: 0,
        profit: -85.25999999999966,
        commission: -0.25,
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        stopLoss: 1.17721,
        unrealizedProfit: -85.25999999999901,
        realizedProfit: -6.536993168992922e-13,
        updateSequenceNumber: 13246,
        accountCurrencyExchangeRate: 1,
        comment: 'test',
        brokerComment: 'test2'
      }]);
      await state.onPendingOrdersReplaced('vint-hill:1:ps-mpa-1', [{
        id: '46871284',
        type: 'ORDER_TYPE_BUY_LIMIT',
        state: 'ORDER_STATE_PLACED',
        symbol: 'AUDNZD',
        magic: 123456,
        platform: 'mt5',
        time: '2020-04-20T08:38:58.270Z',
        openPrice: 1.03,
        currentPrice: 1.05206,
        volume: 0.01,
        currentVolume: 0.01,
        comment: 'COMMENT2',
        updateSequenceNumber: 13246,
        accountCurrencyExchangeRate: 1,
        brokerComment: 'test2',
        clientId: 'TE_GBPUSD_7hyINWqAlE'
      }]);
      state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
      hashes = await state.getHashes('cloud-g1', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.match(hashes.specificationsMd5, specificationsHash);
      _sinon2.default.assert.match(hashes.positionsMd5, positionsHash);
      _sinon2.default.assert.match(hashes.ordersMd5, ordersHash);
    });

    /**
     * @test {TerminalState#getHashes}
     */
    it('should return hashes for terminal state data for cloud-g2 accounts', async () => {
      const specificationsHash = md5('[{"symbol":"AUDNZD","tickSize":0.01,"description":"Test1"},' + '{"symbol":"EURUSD","tickSize":0.000001,"contractSize":1,"maxVolume":30000,' + '"hedgedMarginUsesLargerLeg":false,"digits":3,"description":"Test2"}]');
      const positionsHash = md5('[{"id":"46214692","type":"POSITION_TYPE_BUY","symbol":"GBPUSD","magic":1000,' + '"time":"2020-04-15T02:45:06.521Z","updateTime":"2020-04-15T02:45:06.521Z","openPrice":1.26101,' + '"volume":0.07,"swap":0,"commission":-0.25,"stopLoss":1.17721}]');
      const ordersHash = md5('[{"id":"46871284","type":"ORDER_TYPE_BUY_LIMIT","state":"ORDER_STATE_PLACED",' + '"symbol":"AUDNZD","magic":123456,"platform":"mt5","time":"2020-04-20T08:38:58.270Z","openPrice":1.03,' + '"volume":0.01,"currentVolume":0.01}]');
      let hashes = await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.match(hashes.specificationsMd5, null);
      _sinon2.default.assert.match(hashes.positionsMd5, null);
      _sinon2.default.assert.match(hashes.ordersMd5, null);
      await state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'AUDNZD', tickSize: 0.01, description: 'Test1' }, { symbol: 'EURUSD', tickSize: 0.000001, contractSize: 1, maxVolume: 30000,
        hedgedMarginUsesLargerLeg: false, digits: 3, description: 'Test2' }], []);
      await state.onPositionsReplaced('vint-hill:1:ps-mpa-1', [{
        id: '46214692',
        type: 'POSITION_TYPE_BUY',
        symbol: 'GBPUSD',
        magic: 1000,
        time: new Date('2020-04-15T02:45:06.521Z'),
        updateTime: new Date('2020-04-15T02:45:06.521Z'),
        openPrice: 1.26101,
        currentPrice: 1.24883,
        currentTickValue: 1,
        volume: 0.07,
        swap: 0,
        profit: -85.25999999999966,
        commission: -0.25,
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        stopLoss: 1.17721,
        unrealizedProfit: -85.25999999999901,
        realizedProfit: -6.536993168992922e-13,
        updateSequenceNumber: 13246,
        accountCurrencyExchangeRate: 1,
        comment: 'test',
        brokerComment: 'test2'
      }]);
      await state.onPendingOrdersReplaced('vint-hill:1:ps-mpa-1', [{
        id: '46871284',
        type: 'ORDER_TYPE_BUY_LIMIT',
        state: 'ORDER_STATE_PLACED',
        symbol: 'AUDNZD',
        magic: 123456,
        platform: 'mt5',
        time: '2020-04-20T08:38:58.270Z',
        openPrice: 1.03,
        currentPrice: 1.05206,
        volume: 0.01,
        currentVolume: 0.01,
        comment: 'COMMENT2',
        updateSequenceNumber: 13246,
        accountCurrencyExchangeRate: 1,
        brokerComment: 'test2',
        clientId: 'TE_GBPUSD_7hyINWqAlE'
      }]);
      state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
      hashes = await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.match(hashes.specificationsMd5, specificationsHash);
      _sinon2.default.assert.match(hashes.positionsMd5, positionsHash);
      _sinon2.default.assert.match(hashes.ordersMd5, ordersHash);
    });

    /**
     * @test {TerminalState#getHashes}
     */
    it('should cache specifications hash', async () => {
      await state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'AUDNZD', tickSize: 0.01, description: 'Test1' }], []);
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledOnce(getHashesSpy);
      await state.onSymbolSpecificationsUpdated('vint-hill:1:ps-mpa-1', [{ symbol: 'AUDNZD', tickSize: 0.02, description: 'Test1' }], []);
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledTwice(getHashesSpy);
    });

    /**
     * @test {TerminalState#getHashes}
     */
    it('should cache positions hash', async () => {
      await state.onPositionsReplaced('vint-hill:1:ps-mpa-1', [{
        id: '1',
        symbol: 'EURUSD',
        type: 'POSITION_TYPE_BUY',
        currentPrice: 9,
        currentTickValue: 0.5,
        openPrice: 8,
        profit: 100,
        volume: 2
      }]);
      state.onPositionsSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledOnce(getHashesSpy);
      state.onPositionUpdated('vint-hill:1:ps-mpa-1', {
        id: '1',
        symbol: 'EURUSD',
        type: 'POSITION_TYPE_BUY',
        currentPrice: 9,
        currentTickValue: 0.5,
        openPrice: 8,
        profit: 1000,
        volume: 2
      });
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledTwice(getHashesSpy);
      state.onPositionRemoved('vint-hill:1:ps-mpa-1', '1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledThrice(getHashesSpy);
      await state.onPositionsReplaced('vint-hill:1:ps-mpa-1', [{
        id: '1',
        symbol: 'EURUSD',
        type: 'POSITION_TYPE_BUY',
        currentPrice: 9,
        currentTickValue: 0.5,
        openPrice: 8,
        profit: 100,
        volume: 2
      }]);
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.callCount(getHashesSpy, 4);
    });

    /**
     * @test {TerminalState#getHashes}
     */
    it('should cache orders hash', async () => {
      await state.onPendingOrdersReplaced('vint-hill:1:ps-mpa-1', [{
        id: '1',
        symbol: 'EURUSD',
        type: 'ORDER_TYPE_BUY_LIMIT',
        currentPrice: 9
      }]);
      await state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.calledTwice(getHashesSpy);
      state.onPendingOrderUpdated('vint-hill:1:ps-mpa-1', {
        id: '1',
        symbol: 'EURUSD',
        type: 'ORDER_TYPE_BUY_LIMIT',
        currentPrice: 10
      });
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.callCount(getHashesSpy, 3);
      state.onPendingOrderCompleted('vint-hill:1:ps-mpa-1', '1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.callCount(getHashesSpy, 4);
      await state.onPendingOrdersReplaced('vint-hill:1:ps-mpa-1', [{
        id: '1',
        symbol: 'EURUSD',
        type: 'ORDER_TYPE_BUY_LIMIT',
        currentPrice: 10
      }]);
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      await state.getHashes('cloud-g2', 'vint-hill:1:ps-mpa-1');
      _sinon2.default.assert.callCount(getHashesSpy, 5);
    });
  });

  /**
   * @test {TerminalState#onSynchronizationStarted}
   */
  it('delete all unfinished states except for the latest on sync started', async () => {
    await state.onAccountInformationUpdated('vint-hill:2:ps-mpa-3', { 'balance': 1000 });
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-2', { 'balance': 1000 });
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-4', true, true, true);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-1']).not.eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-2']).eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:2:ps-mpa-3']).not.eql(undefined);
  });

  /**
   * @test {TerminalState#onPendingOrdersSynchronized}
   */
  it('should delete all disconnected states on sync finished', async () => {
    await state.onAccountInformationUpdated('vint-hill:2:ps-mpa-3', { 'balance': 1000 });
    await state.onPendingOrdersSynchronized('vint-hill:2:ps-mpa-3', 'synchronizationId');
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-1');
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-2', { 'balance': 1000 });
    await state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-2', 'synchronizationId2');
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-4', { 'balance': 1000 });
    await state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-4', 'synchronizationId2');
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-1']).not.eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-2']).eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:2:ps-mpa-3']).not.eql(undefined);
  });

  /**
   * @test {TerminalState#onDisconnected}
   */
  it('should delete state on disconnected if there is another synced state', async () => {
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-1');
    await state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-1', 'synchronizationId2');
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-2', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-2');
    await state.onPendingOrdersSynchronized('vint-hill:1:ps-mpa-2', 'synchronizationId2');
    await state.onStreamClosed('vint-hill:1:ps-mpa-2');
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-1']).not.eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-2']).eql(undefined);
  });

  /**
   * @test {TerminalState#onDisconnected}
   */
  it('should delete partially synced state on disconnected if there is another fresher state', async () => {
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-1');
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-2', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-2');
    await state.onStreamClosed('vint-hill:1:ps-mpa-1');
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-1']).eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-2']).not.eql(undefined);
  });

  /**
   * @test {TerminalState#onDisconnected}
   */
  it('should not delete partially synced state on disconnected if there is no fresher state', async () => {
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-1', false, false, false);
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-1', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-1');
    await new _promise2.default(res => setTimeout(res, 50));
    await state.onSynchronizationStarted('vint-hill:1:ps-mpa-2', false, false, false);
    await state.onAccountInformationUpdated('vint-hill:1:ps-mpa-2', { 'balance': 1000 });
    await state.onConnected('vint-hill:1:ps-mpa-2');
    await state.onDisconnected('vint-hill:1:ps-mpa-2');
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-1']).not.eql(undefined);
    (0, _should2.default)(state._stateByInstanceIndex['vint-hill:1:ps-mpa-2']).not.eql(undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL3Rlcm1pbmFsU3RhdGUuc3BlYy5lczYiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJzdGF0ZSIsInNhbmRib3giLCJtZDUiLCJhcmciLCJjcnlwdG8iLCJNRDUiLCJ0b1N0cmluZyIsImJlZm9yZSIsInNpbm9uIiwiY3JlYXRlU2FuZGJveCIsImJlZm9yZUVhY2giLCJjbGllbnRBcGlDbGllbnQiLCJnZXRIYXNoaW5nSWdub3JlZEZpZWxkTGlzdHMiLCJnMSIsInNwZWNpZmljYXRpb24iLCJwb3NpdGlvbiIsIm9yZGVyIiwiZzIiLCJUZXJtaW5hbFN0YXRlIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiY29ubmVjdGVkIiwic2hvdWxkIiwiYmUiLCJmYWxzZSIsIm9uQ29ubmVjdGVkIiwidHJ1ZSIsIm9uRGlzY29ubmVjdGVkIiwiY2xvY2siLCJ1c2VGYWtlVGltZXJzIiwiY29ubmVjdGVkVG9Ccm9rZXIiLCJvbkJyb2tlckNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkIiwidGlja0FzeW5jIiwibm90IiwiZXhpc3QiLCJhY2NvdW50SW5mb3JtYXRpb24iLCJvbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQiLCJiYWxhbmNlIiwibWF0Y2giLCJwb3NpdGlvbnMiLCJsZW5ndGgiLCJlcXVhbCIsIm9uUG9zaXRpb25VcGRhdGVkIiwiaWQiLCJwcm9maXQiLCJvblBvc2l0aW9uUmVtb3ZlZCIsIm9yZGVycyIsIm9uUGVuZGluZ09yZGVyVXBkYXRlZCIsIm9wZW5QcmljZSIsIm9uUGVuZGluZ09yZGVyQ29tcGxldGVkIiwic3BlY2lmaWNhdGlvbnMiLCJvblN5bWJvbFNwZWNpZmljYXRpb25zVXBkYXRlZCIsInN5bWJvbCIsInRpY2tTaXplIiwicHJpY2UiLCJvblN5bWJvbFByaWNlc1VwZGF0ZWQiLCJ0aW1lIiwiRGF0ZSIsImJyb2tlclRpbWUiLCJiaWQiLCJhc2siLCJsYXN0UXVvdGVUaW1lIiwicHJvbWlzZSIsIndhaXRGb3JQcmljZSIsImVxdWl0eSIsIm9uUG9zaXRpb25zUmVwbGFjZWQiLCJ0eXBlIiwiY3VycmVudFByaWNlIiwiY3VycmVudFRpY2tWYWx1ZSIsInZvbHVtZSIsIm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCIsIm9uUG9zaXRpb25zU3luY2hyb25pemVkIiwiZGlnaXRzIiwicHJvZml0VGlja1ZhbHVlIiwibG9zc1RpY2tWYWx1ZSIsIm1hcCIsInAiLCJ1bnJlYWxpemVkUHJvZml0IiwibWFyZ2luIiwiZnJlZU1hcmdpbiIsIm1hcmdpbkxldmVsIiwibyIsImRhdGUiLCJhc3NlcnQiLCJ1bmRlZmluZWQiLCJvblBlbmRpbmdPcmRlcnNSZXBsYWNlZCIsIm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCIsImdldEhhc2hlc1NweSIsInNweSIsInNwZWNpZmljYXRpb25zSGFzaCIsInBvc2l0aW9uc0hhc2giLCJvcmRlcnNIYXNoIiwiaGFzaGVzIiwiZ2V0SGFzaGVzIiwic3BlY2lmaWNhdGlvbnNNZDUiLCJwb3NpdGlvbnNNZDUiLCJvcmRlcnNNZDUiLCJkZXNjcmlwdGlvbiIsImNvbnRyYWN0U2l6ZSIsIm1heFZvbHVtZSIsImhlZGdlZE1hcmdpblVzZXNMYXJnZXJMZWciLCJtYWdpYyIsInVwZGF0ZVRpbWUiLCJzd2FwIiwiY29tbWlzc2lvbiIsImNsaWVudElkIiwic3RvcExvc3MiLCJyZWFsaXplZFByb2ZpdCIsInVwZGF0ZVNlcXVlbmNlTnVtYmVyIiwiYWNjb3VudEN1cnJlbmN5RXhjaGFuZ2VSYXRlIiwiY29tbWVudCIsImJyb2tlckNvbW1lbnQiLCJwbGF0Zm9ybSIsImN1cnJlbnRWb2x1bWUiLCJjYWxsZWRPbmNlIiwiY2FsbGVkVHdpY2UiLCJjYWxsZWRUaHJpY2UiLCJjYWxsQ291bnQiLCJfc3RhdGVCeUluc3RhbmNlSW5kZXgiLCJlcWwiLCJvblN0cmVhbUNsb3NlZCIsInJlcyIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFD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QUFNMUIsTUFBTTRCLGNBQU4sQ0FBcUIsc0JBQXJCLENBQU47QUFDQSwwQkFBTzVCLE1BQU11SCxxQkFBTixDQUE0QixzQkFBNUIsQ0FBUCxFQUE0RHJGLEdBQTVELENBQWdFc0YsR0FBaEUsQ0FBb0VuQyxTQUFwRTtBQUNBLDBCQUFPckYsTUFBTXVILHFCQUFOLENBQTRCLHNCQUE1QixDQUFQLEVBQTREckYsR0FBNUQsQ0FBZ0VzRixHQUFoRSxDQUFvRW5DLFNBQXBFO0FBQ0QsR0FYRDtBQWFELENBN3FCRCIsImZpbGUiOiJ0ZXJtaW5hbFN0YXRlLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBzaG91bGQgZnJvbSAnc2hvdWxkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgVGVybWluYWxTdGF0ZSBmcm9tICcuL3Rlcm1pbmFsU3RhdGUnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8tanMnO1xuXG4vKipcbiAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlfVxuICovXG5kZXNjcmliZSgnVGVybWluYWxTdGF0ZScsICgpID0+IHtcblxuICBsZXQgc3RhdGUsIHNhbmRib3g7XG4gIGNvbnN0IG1kNSA9IChhcmcpID0+IGNyeXB0by5NRDUoYXJnKS50b1N0cmluZygpO1xuXG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgc2FuZGJveCA9IHNpbm9uLmNyZWF0ZVNhbmRib3goKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50QXBpQ2xpZW50ID0ge1xuICAgICAgZ2V0SGFzaGluZ0lnbm9yZWRGaWVsZExpc3RzOiAoKSA9PiAoe1xuICAgICAgICBnMToge1xuICAgICAgICAgIHNwZWNpZmljYXRpb246IFtcbiAgICAgICAgICAgICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAnZXhwaXJhdGlvblRpbWUnLFxuICAgICAgICAgICAgJ2V4cGlyYXRpb25Ccm9rZXJUaW1lJyxcbiAgICAgICAgICAgICdzdGFydFRpbWUnLFxuICAgICAgICAgICAgJ3N0YXJ0QnJva2VyVGltZScsXG4gICAgICAgICAgICAncGlwU2l6ZSdcbiAgICAgICAgICBdLFxuICAgICAgICAgIHBvc2l0aW9uOiBbXG4gICAgICAgICAgICAndGltZScsXG4gICAgICAgICAgICAndXBkYXRlVGltZScsXG4gICAgICAgICAgICAnY29tbWVudCcsXG4gICAgICAgICAgICAnYnJva2VyQ29tbWVudCcsXG4gICAgICAgICAgICAnb3JpZ2luYWxDb21tZW50JyxcbiAgICAgICAgICAgICdjbGllbnRJZCcsXG4gICAgICAgICAgICAncHJvZml0JyxcbiAgICAgICAgICAgICdyZWFsaXplZFByb2ZpdCcsXG4gICAgICAgICAgICAndW5yZWFsaXplZFByb2ZpdCcsXG4gICAgICAgICAgICAnY3VycmVudFByaWNlJyxcbiAgICAgICAgICAgICdjdXJyZW50VGlja1ZhbHVlJyxcbiAgICAgICAgICAgICdhY2NvdW50Q3VycmVuY3lFeGNoYW5nZVJhdGUnLFxuICAgICAgICAgICAgJ3VwZGF0ZVNlcXVlbmNlTnVtYmVyJ1xuICAgICAgICAgIF0sXG4gICAgICAgICAgb3JkZXI6IFtcbiAgICAgICAgICAgICd0aW1lJyxcbiAgICAgICAgICAgICdleHBpcmF0aW9uVGltZScsXG4gICAgICAgICAgICAnY29tbWVudCcsXG4gICAgICAgICAgICAnYnJva2VyQ29tbWVudCcsXG4gICAgICAgICAgICAnb3JpZ2luYWxDb21tZW50JyxcbiAgICAgICAgICAgICdjbGllbnRJZCcsXG4gICAgICAgICAgICAnY3VycmVudFByaWNlJyxcbiAgICAgICAgICAgICdhY2NvdW50Q3VycmVuY3lFeGNoYW5nZVJhdGUnLFxuICAgICAgICAgICAgJ3VwZGF0ZVNlcXVlbmNlTnVtYmVyJ1xuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgZzI6IHtcbiAgICAgICAgICBzcGVjaWZpY2F0aW9uOiBbXG4gICAgICAgICAgICAncGlwU2l6ZSdcbiAgICAgICAgICBdLFxuICAgICAgICAgIHBvc2l0aW9uOiBbXG4gICAgICAgICAgICAnY29tbWVudCcsXG4gICAgICAgICAgICAnYnJva2VyQ29tbWVudCcsXG4gICAgICAgICAgICAnb3JpZ2luYWxDb21tZW50JyxcbiAgICAgICAgICAgICdjbGllbnRJZCcsXG4gICAgICAgICAgICAncHJvZml0JyxcbiAgICAgICAgICAgICdyZWFsaXplZFByb2ZpdCcsXG4gICAgICAgICAgICAndW5yZWFsaXplZFByb2ZpdCcsXG4gICAgICAgICAgICAnY3VycmVudFByaWNlJyxcbiAgICAgICAgICAgICdjdXJyZW50VGlja1ZhbHVlJyxcbiAgICAgICAgICAgICdhY2NvdW50Q3VycmVuY3lFeGNoYW5nZVJhdGUnLFxuICAgICAgICAgICAgJ3VwZGF0ZVNlcXVlbmNlTnVtYmVyJ1xuICAgICAgICAgIF0sXG4gICAgICAgICAgb3JkZXI6IFtcbiAgICAgICAgICAgICdjb21tZW50JyxcbiAgICAgICAgICAgICdicm9rZXJDb21tZW50JyxcbiAgICAgICAgICAgICdvcmlnaW5hbENvbW1lbnQnLFxuICAgICAgICAgICAgJ2NsaWVudElkJyxcbiAgICAgICAgICAgICdjdXJyZW50UHJpY2UnLFxuICAgICAgICAgICAgJ2FjY291bnRDdXJyZW5jeUV4Y2hhbmdlUmF0ZScsXG4gICAgICAgICAgICAndXBkYXRlU2VxdWVuY2VOdW1iZXInXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gICAgc3RhdGUgPSBuZXcgVGVybWluYWxTdGF0ZSgnYWNjb3VudElkJywgY2xpZW50QXBpQ2xpZW50KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI29uQ29ubmVjdGVkfVxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvbkRpc2Nvbm5lY3RlZH1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjY29ubmVjdGVkfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCByZXR1cm4gY29ubmVjdGlvbiBzdGF0ZScsICgpID0+IHtcbiAgICBzdGF0ZS5jb25uZWN0ZWQuc2hvdWxkLmJlLmZhbHNlKCk7XG4gICAgc3RhdGUub25Db25uZWN0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgc3RhdGUuY29ubmVjdGVkLnNob3VsZC5iZS50cnVlKCk7XG4gICAgc3RhdGUub25EaXNjb25uZWN0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgc3RhdGUuY29ubmVjdGVkLnNob3VsZC5iZS5mYWxzZSgpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25Ccm9rZXJDb25uZWN0aW9uU3RhdHVzfVxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNjb25uZWN0ZWRUb0Jyb2tlcn1cbiAgICovXG4gIGl0KCdzaG91bGQgcmV0dXJuIGJyb2tlciBjb25uZWN0aW9uIHN0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNsb2NrID0gc2lub24udXNlRmFrZVRpbWVycygpO1xuICAgIHN0YXRlLmNvbm5lY3RlZFRvQnJva2VyLnNob3VsZC5iZS5mYWxzZSgpO1xuICAgIHN0YXRlLm9uQnJva2VyQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgdHJ1ZSk7XG4gICAgc3RhdGUuY29ubmVjdGVkVG9Ccm9rZXIuc2hvdWxkLmJlLnRydWUoKTtcbiAgICBzdGF0ZS5vbkJyb2tlckNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIGZhbHNlKTtcbiAgICBzdGF0ZS5jb25uZWN0ZWRUb0Jyb2tlci5zaG91bGQuYmUuZmFsc2UoKTtcbiAgICBzdGF0ZS5vbkJyb2tlckNvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHRydWUpO1xuICAgIHN0YXRlLm9uRGlzY29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgIHN0YXRlLmNvbm5lY3RlZFRvQnJva2VyLnNob3VsZC5iZS5mYWxzZSgpO1xuICAgIGF3YWl0IGNsb2NrLnRpY2tBc3luYyg2NTAwMCk7XG4gICAgY2xvY2sucmVzdG9yZSgpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkfVxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNhY2NvdW50SW5mb3JtYXRpb259XG4gICAqL1xuICBpdCgnc2hvdWxkIHJldHVybiBhY2NvdW50IGluZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgIHNob3VsZC5ub3QuZXhpc3Qoc3RhdGUuYWNjb3VudEluZm9ybWF0aW9uKTtcbiAgICBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywge2JhbGFuY2U6IDEwMDB9KTtcbiAgICBzdGF0ZS5hY2NvdW50SW5mb3JtYXRpb24uc2hvdWxkLm1hdGNoKHtiYWxhbmNlOiAxMDAwfSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblBvc2l0aW9uVXBkYXRlZH1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25Qb3NpdGlvblJlbW92ZWR9XG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI3Bvc2l0aW9uc31cbiAgICovXG4gIGl0KCdzaG91bGQgcmV0dXJuIHBvc2l0aW9ucycsICgpID0+IHtcbiAgICBzdGF0ZS5wb3NpdGlvbnMubGVuZ3RoLnNob3VsZC5lcXVhbCgwKTtcbiAgICBzdGF0ZS5vblBvc2l0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7aWQ6ICcxJywgcHJvZml0OiAxMH0pO1xuICAgIHN0YXRlLm9uUG9zaXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHtpZDogJzInfSk7XG4gICAgc3RhdGUub25Qb3NpdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywge2lkOiAnMScsIHByb2ZpdDogMTF9KTtcbiAgICBzdGF0ZS5vblBvc2l0aW9uUmVtb3ZlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnMicpO1xuICAgIHN0YXRlLnBvc2l0aW9ucy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgIHN0YXRlLnBvc2l0aW9ucy5zaG91bGQubWF0Y2goW3tpZDogJzEnLCBwcm9maXQ6IDExfV0pO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25QZW5kaW5nT3JkZXJVcGRhdGVkfVxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblBlbmRpbmdPcmRlckNvbXBsZXRlZH1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb3JkZXJzfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCByZXR1cm4gb3JkZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgIHN0YXRlLm9yZGVycy5sZW5ndGguc2hvdWxkLmVxdWFsKDApO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7aWQ6ICcxJywgb3BlblByaWNlOiAxMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7aWQ6ICcyJ30pO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7aWQ6ICcxJywgb3BlblByaWNlOiAxMX0pO1xuICAgIHN0YXRlLm9yZGVycy5sZW5ndGguc2hvdWxkLmVxdWFsKDIpO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyQ29tcGxldGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICcyJyk7XG4gICAgc3RhdGUub3JkZXJzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG4gICAgc3RhdGUub3JkZXJzLnNob3VsZC5tYXRjaChbe2lkOiAnMScsIG9wZW5QcmljZTogMTF9XSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblN5bWJvbFNwZWNpZmljYXRpb25zVXBkYXRlZH1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjc3BlY2lmaWNhdGlvbnN9XG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI3NwZWNpZmljYXRpb259XG4gICAqL1xuICBpdCgnc2hvdWxkIHJldHVybiBzcGVjaWZpY2F0aW9ucycsICgpID0+IHtcbiAgICBzdGF0ZS5zcGVjaWZpY2F0aW9ucy5sZW5ndGguc2hvdWxkLmVxdWFsKDApO1xuICAgIHN0YXRlLm9uU3ltYm9sU3BlY2lmaWNhdGlvbnNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFxuICAgICAgW3tzeW1ib2w6ICdFVVJVU0QnLCB0aWNrU2l6ZTogMC4wMDAwMX0sIHtzeW1ib2w6ICdHQlBVU0QnfV0sIFtdKTtcbiAgICBzdGF0ZS5vblN5bWJvbFNwZWNpZmljYXRpb25zVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbe3N5bWJvbDogJ0FVRE5aRCd9LCB7c3ltYm9sOiAnRVVSVVNEJywgXG4gICAgICB0aWNrU2l6ZTogMC4wMDAxfV0sIFsnQVVETlpEJ10pO1xuICAgIHN0YXRlLnNwZWNpZmljYXRpb25zLmxlbmd0aC5zaG91bGQuZXF1YWwoMik7XG4gICAgc3RhdGUuc3BlY2lmaWNhdGlvbnMuc2hvdWxkLm1hdGNoKFt7c3ltYm9sOiAnRVVSVVNEJywgdGlja1NpemU6IDAuMDAwMX0sIHtzeW1ib2w6ICdHQlBVU0QnfV0pO1xuICAgIHN0YXRlLnNwZWNpZmljYXRpb24oJ0VVUlVTRCcpLnNob3VsZC5tYXRjaCh7c3ltYm9sOiAnRVVSVVNEJywgdGlja1NpemU6IDAuMDAwMX0pO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25TeW1ib2xQcmljZXNVcGRhdGVkfVxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNwcmljZX1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjbGFzdFF1b3RlVGltZX1cbiAgICovXG4gIGl0KCdzaG91bGQgcmV0dXJuIHByaWNlJywgKCkgPT4ge1xuICAgIHNob3VsZC5ub3QuZXhpc3Qoc3RhdGUucHJpY2UoJ0VVUlVTRCcpKTtcbiAgICBzdGF0ZS5vblN5bWJvbFByaWNlc1VwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3t0aW1lOiBuZXcgRGF0ZSgnMjAyMi0wMS0wMVQwMDowMDowMC4wMDBaJyksXG4gICAgICBicm9rZXJUaW1lOiAnMjAyMi0wMS0wMSAwMjowMDowMC4wMDAnLCBzeW1ib2w6ICdFVVJVU0QnLCBiaWQ6IDEsIGFzazogMS4xfV0pO1xuICAgIHN0YXRlLm9uU3ltYm9sUHJpY2VzVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbe3RpbWU6IG5ldyBEYXRlKCcyMDIyLTAxLTAxVDAwOjAwOjAxLjAwMFonKSxcbiAgICAgIGJyb2tlclRpbWU6ICcyMDIyLTAxLTAxIDAyOjAwOjAxLjAwMCcsIHN5bWJvbDogJ0dCUFVTRCd9XSk7XG4gICAgc3RhdGUub25TeW1ib2xQcmljZXNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7dGltZTogbmV3IERhdGUoJzIwMjItMDEtMDFUMDA6MDA6MDIuMDAwWicpLFxuICAgICAgYnJva2VyVGltZTogJzIwMjItMDEtMDEgMDI6MDA6MDIuMDAwJywgc3ltYm9sOiAnRVVSVVNEJywgYmlkOiAxLCBhc2s6IDEuMn1dKTtcbiAgICBzdGF0ZS5wcmljZSgnRVVSVVNEJykuc2hvdWxkLm1hdGNoKHtzeW1ib2w6ICdFVVJVU0QnLCBiaWQ6IDEsIGFzazogMS4yfSk7XG4gICAgc3RhdGUubGFzdFF1b3RlVGltZS5zaG91bGQubWF0Y2goe3RpbWU6IG5ldyBEYXRlKCcyMDIyLTAxLTAxVDAwOjAwOjAyLjAwMFonKSxcbiAgICAgIGJyb2tlclRpbWU6ICcyMDIyLTAxLTAxIDAyOjAwOjAyLjAwMCd9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI29uU3ltYm9sUHJpY2VzVXBkYXRlZH1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjcHJpY2V9XG4gICAqL1xuICBpdCgnc2hvdWxkIHdhaXQgZm9yIHByaWNlJywgYXN5bmMgKCkgPT4ge1xuICAgIHNob3VsZC5ub3QuZXhpc3Qoc3RhdGUucHJpY2UoJ0VVUlVTRCcpKTtcbiAgICBsZXQgcHJvbWlzZSA9IHN0YXRlLndhaXRGb3JQcmljZSgnRVVSVVNEJyk7XG4gICAgc3RhdGUub25TeW1ib2xQcmljZXNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7dGltZTogbmV3IERhdGUoKSwgc3ltYm9sOiAnRVVSVVNEJywgYmlkOiAxLCBhc2s6IDEuMX1dKTtcbiAgICAoYXdhaXQgcHJvbWlzZSkuc2hvdWxkLm1hdGNoKHtzeW1ib2w6ICdFVVJVU0QnLCBiaWQ6IDEsIGFzazogMS4xfSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblN5bWJvbFByaWNlc1VwZGF0ZWR9XG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2FjY291bnRJbmZvcm1hdGlvbn1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjcG9zaXRpb25zfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgYWNjb3VudCBlcXVpdHkgYW5kIHBvc2l0aW9uIHByb2ZpdCBvbiBwcmljZSB1cGRhdGUnLCAoKSA9PiB7XG4gICAgc3RhdGUub25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHtlcXVpdHk6IDEwMDAsIGJhbGFuY2U6IDgwMH0pO1xuICAgIHN0YXRlLm9uUG9zaXRpb25zUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tcbiAgICAgIGlkOiAnMScsXG4gICAgICBzeW1ib2w6ICdFVVJVU0QnLFxuICAgICAgdHlwZTogJ1BPU0lUSU9OX1RZUEVfQlVZJyxcbiAgICAgIGN1cnJlbnRQcmljZTogOSxcbiAgICAgIGN1cnJlbnRUaWNrVmFsdWU6IDAuNSxcbiAgICAgIG9wZW5QcmljZTogOCxcbiAgICAgIHByb2ZpdDogMTAwLFxuICAgICAgdm9sdW1lOiAyXG4gICAgfV0pO1xuICAgIHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICBzdGF0ZS5vblBvc2l0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7XG4gICAgICBpZDogJzInLFxuICAgICAgc3ltYm9sOiAnQVVEVVNEJyxcbiAgICAgIHR5cGU6ICdQT1NJVElPTl9UWVBFX0JVWScsXG4gICAgICBjdXJyZW50UHJpY2U6IDksXG4gICAgICBjdXJyZW50VGlja1ZhbHVlOiAwLjUsXG4gICAgICBvcGVuUHJpY2U6IDgsXG4gICAgICBwcm9maXQ6IDEwMCxcbiAgICAgIHZvbHVtZTogMlxuICAgIH0pO1xuICAgIHN0YXRlLm9uUG9zaXRpb25zU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICdzeW5jaHJvbml6YXRpb25JZCcpO1xuICAgIHN0YXRlLm9uU3ltYm9sU3BlY2lmaWNhdGlvbnNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7c3ltYm9sOiAnRVVSVVNEJywgdGlja1NpemU6IDAuMDEsIGRpZ2l0czogNX0sXG4gICAgICB7c3ltYm9sOiAnQVVEVVNEJywgdGlja1NpemU6IDAuMDEsIGRpZ2l0czogNX1dLCBbXSk7XG4gICAgc3RhdGUub25TeW1ib2xQcmljZXNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFtcbiAgICAgIHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgICAgcHJvZml0VGlja1ZhbHVlOiAwLjUsXG4gICAgICAgIGxvc3NUaWNrVmFsdWU6IDAuNSxcbiAgICAgICAgYmlkOiAxMCxcbiAgICAgICAgYXNrOiAxMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGltZTogbmV3IERhdGUoKSxcbiAgICAgICAgc3ltYm9sOiAnQVVEVVNEJyxcbiAgICAgICAgcHJvZml0VGlja1ZhbHVlOiAwLjUsXG4gICAgICAgIGxvc3NUaWNrVmFsdWU6IDAuNSxcbiAgICAgICAgYmlkOiAxMCxcbiAgICAgICAgYXNrOiAxMVxuICAgICAgfVxuICAgIF0pO1xuICAgIHN0YXRlLnBvc2l0aW9ucy5tYXAocCA9PiBwLnByb2ZpdCkuc2hvdWxkLm1hdGNoKFsyMDAsIDIwMF0pO1xuICAgIHN0YXRlLnBvc2l0aW9ucy5tYXAocCA9PiBwLnVucmVhbGl6ZWRQcm9maXQpLnNob3VsZC5tYXRjaChbMjAwLCAyMDBdKTtcbiAgICBzdGF0ZS5wb3NpdGlvbnMubWFwKHAgPT4gcC5jdXJyZW50UHJpY2UpLnNob3VsZC5tYXRjaChbMTAsIDEwXSk7XG4gICAgc3RhdGUuYWNjb3VudEluZm9ybWF0aW9uLmVxdWl0eS5zaG91bGQuZXF1YWwoMTIwMCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblN5bWJvbFByaWNlc1VwZGF0ZWR9XG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2FjY291bnRJbmZvcm1hdGlvbn1cbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjcG9zaXRpb25zfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgbWFyZ2luIGZpZWxkcyBvbiBwcmljZSB1cGRhdGUnLCAoKSA9PiB7XG4gICAgc3RhdGUub25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHtlcXVpdHk6IDEwMDAsIGJhbGFuY2U6IDgwMH0pO1xuICAgIHN0YXRlLm9uU3ltYm9sUHJpY2VzVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbe3RpbWU6IG5ldyBEYXRlKCksIHN5bWJvbDogJ0VVUlVTRCcsIGJpZDogMSwgYXNrOiAxLjF9XSwgXG4gICAgICAxMDAsIDIwMCwgNDAwLCA0MDAwMCk7XG4gICAgc3RhdGUuYWNjb3VudEluZm9ybWF0aW9uLmVxdWl0eS5zaG91bGQuZXF1YWwoMTAwKTtcbiAgICBzdGF0ZS5hY2NvdW50SW5mb3JtYXRpb24ubWFyZ2luLnNob3VsZC5lcXVhbCgyMDApO1xuICAgIHN0YXRlLmFjY291bnRJbmZvcm1hdGlvbi5mcmVlTWFyZ2luLnNob3VsZC5lcXVhbCg0MDApO1xuICAgIHN0YXRlLmFjY291bnRJbmZvcm1hdGlvbi5tYXJnaW5MZXZlbC5zaG91bGQuZXF1YWwoNDAwMDApO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25TeW1ib2xQcmljZVVwZGF0ZWR9XG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI29yZGVyc31cbiAgICovXG4gIGl0KCdzaG91bGQgdXBkYXRlIG9yZGVyIGN1cnJlbnRQcmljZSBvbiBwcmljZSB1cGRhdGUnLCAoKSA9PiB7XG4gICAgc3RhdGUub25QZW5kaW5nT3JkZXJVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHtcbiAgICAgIGlkOiAnMScsXG4gICAgICBzeW1ib2w6ICdFVVJVU0QnLFxuICAgICAgdHlwZTogJ09SREVSX1RZUEVfQlVZX0xJTUlUJyxcbiAgICAgIGN1cnJlbnRQcmljZTogOVxuICAgIH0pO1xuICAgIHN0YXRlLm9uUGVuZGluZ09yZGVyVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7XG4gICAgICBpZDogJzInLFxuICAgICAgc3ltYm9sOiAnQVVEVVNEJyxcbiAgICAgIHR5cGU6ICdPUkRFUl9UWVBFX1NFTExfTElNSVQnLFxuICAgICAgY3VycmVudFByaWNlOiA5XG4gICAgfSk7XG4gICAgc3RhdGUub25TeW1ib2xTcGVjaWZpY2F0aW9uc1VwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tzeW1ib2w6ICdFVVJVU0QnLCB0aWNrU2l6ZTogMC4wMX1dLCBbXSk7XG4gICAgc3RhdGUub25TeW1ib2xQcmljZXNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7XG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgIHByb2ZpdFRpY2tWYWx1ZTogMC41LFxuICAgICAgbG9zc1RpY2tWYWx1ZTogMC41LFxuICAgICAgYmlkOiAxMCxcbiAgICAgIGFzazogMTFcbiAgICB9XSk7XG4gICAgc3RhdGUub3JkZXJzLm1hcChvID0+IG8uY3VycmVudFByaWNlKS5zaG91bGQubWF0Y2goWzExLCA5XSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvbkRpc2Nvbm5lY3RlZH1cbiAgICovXG4gIGl0KCdzaG91bGQgcmVtb3ZlIHN0YXRlIG9uIGNsb3NlZCBzdHJlYW0nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgc2lub24uYXNzZXJ0Lm1hdGNoKHN0YXRlLnByaWNlKCdFVVJVU0QnKSwgdW5kZWZpbmVkKTtcbiAgICBhd2FpdCBzdGF0ZS5vblN5bWJvbFByaWNlc1VwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3t0aW1lOiBkYXRlLCBzeW1ib2w6ICdFVVJVU0QnLCBiaWQ6IDEsIGFzazogMS4xfV0pO1xuICAgIHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUucHJpY2UoJ0VVUlVTRCcpLCB7dGltZTogZGF0ZSwgc3ltYm9sOiAnRVVSVVNEJywgYmlkOiAxLCBhc2s6IDEuMX0pO1xuICAgIGF3YWl0IHN0YXRlLm9uRGlzY29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25TeW5jaHJvbml6YXRpb25TdGFydGVkfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCByZXNldCBzdGF0ZSBvbiBzeW5jaHJvbml6YXRpb24gc3RhcnRlZCBldmVudCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzcGVjaWZpY2F0aW9uID0ge3N5bWJvbDogJ0VVUlVTRCcsIHRpY2tTaXplOiAwLjAxfTtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbe1xuICAgICAgaWQ6ICcxJyxcbiAgICAgIHN5bWJvbDogJ0VVUlVTRCcsXG4gICAgICB0eXBlOiAnUE9TSVRJT05fVFlQRV9CVVknLFxuICAgICAgY3VycmVudFByaWNlOiA5LFxuICAgICAgY3VycmVudFRpY2tWYWx1ZTogMC41LFxuICAgICAgb3BlblByaWNlOiA4LFxuICAgICAgcHJvZml0OiAxMDAsXG4gICAgICB2b2x1bWU6IDJcbiAgICB9XTtcbiAgICBjb25zdCBvcmRlcnMgPSBbe1xuICAgICAgaWQ6ICcxJyxcbiAgICAgIHN5bWJvbDogJ0VVUlVTRCcsXG4gICAgICB0eXBlOiAnT1JERVJfVFlQRV9CVVlfTElNSVQnLFxuICAgICAgY3VycmVudFByaWNlOiA5XG4gICAgfV07XG4gICAgYXdhaXQgc3RhdGUub25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHsnYmFsYW5jZSc6IDEwMDB9KTtcbiAgICBhd2FpdCBzdGF0ZS5vblN5bWJvbFNwZWNpZmljYXRpb25zVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbc3BlY2lmaWNhdGlvbl0sIFtdKTtcbiAgICBhd2FpdCBzdGF0ZS5vblBvc2l0aW9uc1JlcGxhY2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHBvc2l0aW9ucyk7XG4gICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgb3JkZXJzKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUuYWNjb3VudEluZm9ybWF0aW9uLCB7YmFsYW5jZTogMTAwMH0pO1xuICAgIHNpbm9uLmFzc2VydC5tYXRjaChzdGF0ZS5zcGVjaWZpY2F0aW9uKCdFVVJVU0QnKSwgc3BlY2lmaWNhdGlvbik7XG4gICAgYXdhaXQgc3RhdGUub25TeW5jaHJvbml6YXRpb25TdGFydGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgIHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUuYWNjb3VudEluZm9ybWF0aW9uLCB1bmRlZmluZWQpO1xuICAgIHNpbm9uLmFzc2VydC5tYXRjaChzdGF0ZS5zcGVjaWZpY2F0aW9uKCdFVVJVU0QnKSwgc3BlY2lmaWNhdGlvbik7XG4gICAgc2lub24uYXNzZXJ0Lm1hdGNoKHN0YXRlLm9yZGVycywgb3JkZXJzKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUucG9zaXRpb25zLCBwb3NpdGlvbnMpO1xuICAgIGF3YWl0IHN0YXRlLm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB0cnVlLCBmYWxzZSwgZmFsc2UpO1xuICAgIHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUuc3BlY2lmaWNhdGlvbignRVVSVVNEJyksIHVuZGVmaW5lZCk7XG4gICAgc2lub24uYXNzZXJ0Lm1hdGNoKHN0YXRlLm9yZGVycywgb3JkZXJzKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUucG9zaXRpb25zLCBwb3NpdGlvbnMpO1xuICAgIGF3YWl0IHN0YXRlLm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgc3RhdGUub25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICdzeW5jaHJvbml6YXRpb25JZCcpO1xuICAgIHNpbm9uLmFzc2VydC5tYXRjaChzdGF0ZS5vcmRlcnMsIFtdKTtcbiAgICBzaW5vbi5hc3NlcnQubWF0Y2goc3RhdGUucG9zaXRpb25zLCBwb3NpdGlvbnMpO1xuICAgIGF3YWl0IHN0YXRlLm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICBzdGF0ZS5vblBlbmRpbmdPcmRlcnNTeW5jaHJvbml6ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgJ3N5bmNocm9uaXphdGlvbklkJyk7XG4gICAgc2lub24uYXNzZXJ0Lm1hdGNoKHN0YXRlLnBvc2l0aW9ucywgW10pO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjZ2V0SGFzaGVzfVxuICAgKi9cbiAgZGVzY3JpYmUoJ2hhc2hlcycsICgpID0+IHtcblxuICAgIGxldCBnZXRIYXNoZXNTcHk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGdldEhhc2hlc1NweSA9IHNhbmRib3guc3B5KHN0YXRlLCAnX2dldEhhc2gnKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2dldEhhc2hlc31cbiAgICAgKi9cbiAgICBpdCgnc2hvdWxkIHJldHVybiBoYXNoZXMgZm9yIHRlcm1pbmFsIHN0YXRlIGRhdGEgZm9yIGNsb3VkLWcxIGFjY291bnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BlY2lmaWNhdGlvbnNIYXNoID0gbWQ1KCdbe1wic3ltYm9sXCI6XCJBVUROWkRcIixcInRpY2tTaXplXCI6MC4wMTAwMDAwMH0se1wic3ltYm9sXCI6XCJFVVJVU0RcIiwnICtcbiAgICAgICdcInRpY2tTaXplXCI6MC4wMDAwMDEwMCxcImNvbnRyYWN0U2l6ZVwiOjEuMDAwMDAwMDAsXCJtYXhWb2x1bWVcIjozMDAwMC4wMDAwMDAwMCwnICtcbiAgICAgICdcImhlZGdlZE1hcmdpblVzZXNMYXJnZXJMZWdcIjpmYWxzZSxcImRpZ2l0c1wiOjN9XScpO1xuICAgICAgY29uc3QgcG9zaXRpb25zSGFzaCA9IG1kNSgnW3tcImlkXCI6XCI0NjIxNDY5MlwiLFwidHlwZVwiOlwiUE9TSVRJT05fVFlQRV9CVVlcIixcInN5bWJvbFwiOlwiR0JQVVNEXCIsXCJtYWdpY1wiOjEwMDAsJyArXG4gICAgICAnXCJvcGVuUHJpY2VcIjoxLjI2MTAxMDAwLFwidm9sdW1lXCI6MC4wNzAwMDAwMCxcInN3YXBcIjowLjAwMDAwMDAwLFwiY29tbWlzc2lvblwiOi0wLjI1MDAwMDAwLCcgK1xuICAgICAgJ1wic3RvcExvc3NcIjoxLjE3NzIxMDAwfV0nKTtcbiAgICAgIGNvbnN0IG9yZGVyc0hhc2ggPSBtZDUoJ1t7XCJpZFwiOlwiNDY4NzEyODRcIixcInR5cGVcIjpcIk9SREVSX1RZUEVfQlVZX0xJTUlUXCIsXCJzdGF0ZVwiOlwiT1JERVJfU1RBVEVfUExBQ0VEXCIsJyArXG4gICAgICAnXCJzeW1ib2xcIjpcIkFVRE5aRFwiLFwibWFnaWNcIjoxMjM0NTYsXCJwbGF0Zm9ybVwiOlwibXQ1XCIsXCJvcGVuUHJpY2VcIjoxLjAzMDAwMDAwLCcgK1xuICAgICAgJ1widm9sdW1lXCI6MC4wMTAwMDAwMCxcImN1cnJlbnRWb2x1bWVcIjowLjAxMDAwMDAwfV0nKTtcbiAgICAgIGxldCBoYXNoZXMgPSBhd2FpdCBzdGF0ZS5nZXRIYXNoZXMoJ2Nsb3VkLWcxJywgJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgICBzaW5vbi5hc3NlcnQubWF0Y2goaGFzaGVzLnNwZWNpZmljYXRpb25zTWQ1LCBudWxsKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMucG9zaXRpb25zTWQ1LCBudWxsKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMub3JkZXJzTWQ1LCBudWxsKTtcbiAgICAgIGF3YWl0IHN0YXRlLm9uU3ltYm9sU3BlY2lmaWNhdGlvbnNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFtcbiAgICAgICAge3N5bWJvbDogJ0FVRE5aRCcsIHRpY2tTaXplOiAwLjAxLCBkZXNjcmlwdGlvbjogJ1Rlc3QxJ30sXG4gICAgICAgIHtzeW1ib2w6ICdFVVJVU0QnLCB0aWNrU2l6ZTogMC4wMDAwMDEsIGNvbnRyYWN0U2l6ZTogMSwgbWF4Vm9sdW1lOiAzMDAwMCxcbiAgICAgICAgICBoZWRnZWRNYXJnaW5Vc2VzTGFyZ2VyTGVnOiBmYWxzZSwgZGlnaXRzOiAzLCBkZXNjcmlwdGlvbjogJ1Rlc3QyJ31dLCBbXSk7XG4gICAgICBhd2FpdCBzdGF0ZS5vblBvc2l0aW9uc1JlcGxhY2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7XG4gICAgICAgIGlkOiAnNDYyMTQ2OTInLFxuICAgICAgICB0eXBlOiAnUE9TSVRJT05fVFlQRV9CVVknLFxuICAgICAgICBzeW1ib2w6ICdHQlBVU0QnLFxuICAgICAgICBtYWdpYzogMTAwMCxcbiAgICAgICAgdGltZTogbmV3IERhdGUoJzIwMjAtMDQtMTVUMDI6NDU6MDYuNTIxWicpLFxuICAgICAgICB1cGRhdGVUaW1lOiBuZXcgRGF0ZSgnMjAyMC0wNC0xNVQwMjo0NTowNi41MjFaJyksXG4gICAgICAgIG9wZW5QcmljZTogMS4yNjEwMSxcbiAgICAgICAgY3VycmVudFByaWNlOiAxLjI0ODgzLFxuICAgICAgICBjdXJyZW50VGlja1ZhbHVlOiAxLFxuICAgICAgICB2b2x1bWU6IDAuMDcsXG4gICAgICAgIHN3YXA6IDAsXG4gICAgICAgIHByb2ZpdDogLTg1LjI1OTk5OTk5OTk5OTY2LFxuICAgICAgICBjb21taXNzaW9uOiAtMC4yNSxcbiAgICAgICAgY2xpZW50SWQ6ICdURV9HQlBVU0RfN2h5SU5XcUFsRScsXG4gICAgICAgIHN0b3BMb3NzOiAxLjE3NzIxLFxuICAgICAgICB1bnJlYWxpemVkUHJvZml0OiAtODUuMjU5OTk5OTk5OTk5MDEsXG4gICAgICAgIHJlYWxpemVkUHJvZml0OiAtNi41MzY5OTMxNjg5OTI5MjJlLTEzLFxuICAgICAgICB1cGRhdGVTZXF1ZW5jZU51bWJlcjogMTMyNDYsXG4gICAgICAgIGFjY291bnRDdXJyZW5jeUV4Y2hhbmdlUmF0ZTogMSxcbiAgICAgICAgY29tbWVudDogJ3Rlc3QnLFxuICAgICAgICBicm9rZXJDb21tZW50OiAndGVzdDInLFxuICAgICAgfV0pO1xuICAgICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tcbiAgICAgICAgaWQ6ICc0Njg3MTI4NCcsXG4gICAgICAgIHR5cGU6ICdPUkRFUl9UWVBFX0JVWV9MSU1JVCcsXG4gICAgICAgIHN0YXRlOiAnT1JERVJfU1RBVEVfUExBQ0VEJyxcbiAgICAgICAgc3ltYm9sOiAnQVVETlpEJyxcbiAgICAgICAgbWFnaWM6IDEyMzQ1NixcbiAgICAgICAgcGxhdGZvcm06ICdtdDUnLFxuICAgICAgICB0aW1lOiAnMjAyMC0wNC0yMFQwODozODo1OC4yNzBaJyxcbiAgICAgICAgb3BlblByaWNlOiAxLjAzLFxuICAgICAgICBjdXJyZW50UHJpY2U6IDEuMDUyMDYsXG4gICAgICAgIHZvbHVtZTogMC4wMSxcbiAgICAgICAgY3VycmVudFZvbHVtZTogMC4wMSxcbiAgICAgICAgY29tbWVudDogJ0NPTU1FTlQyJyxcbiAgICAgICAgdXBkYXRlU2VxdWVuY2VOdW1iZXI6IDEzMjQ2LFxuICAgICAgICBhY2NvdW50Q3VycmVuY3lFeGNoYW5nZVJhdGU6IDEsXG4gICAgICAgIGJyb2tlckNvbW1lbnQ6ICd0ZXN0MicsXG4gICAgICAgIGNsaWVudElkOiAnVEVfR0JQVVNEXzdoeUlOV3FBbEUnLFxuICAgICAgfV0pO1xuICAgICAgc3RhdGUub25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICdzeW5jaHJvbml6YXRpb25JZCcpO1xuICAgICAgaGFzaGVzID0gYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMScsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0Lm1hdGNoKGhhc2hlcy5zcGVjaWZpY2F0aW9uc01kNSwgc3BlY2lmaWNhdGlvbnNIYXNoKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMucG9zaXRpb25zTWQ1LCBwb3NpdGlvbnNIYXNoKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMub3JkZXJzTWQ1LCBvcmRlcnNIYXNoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2dldEhhc2hlc31cbiAgICAgKi9cbiAgICBpdCgnc2hvdWxkIHJldHVybiBoYXNoZXMgZm9yIHRlcm1pbmFsIHN0YXRlIGRhdGEgZm9yIGNsb3VkLWcyIGFjY291bnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BlY2lmaWNhdGlvbnNIYXNoID0gbWQ1KCdbe1wic3ltYm9sXCI6XCJBVUROWkRcIixcInRpY2tTaXplXCI6MC4wMSxcImRlc2NyaXB0aW9uXCI6XCJUZXN0MVwifSwnICtcbiAgICAgICd7XCJzeW1ib2xcIjpcIkVVUlVTRFwiLFwidGlja1NpemVcIjowLjAwMDAwMSxcImNvbnRyYWN0U2l6ZVwiOjEsXCJtYXhWb2x1bWVcIjozMDAwMCwnICtcbiAgICAgICdcImhlZGdlZE1hcmdpblVzZXNMYXJnZXJMZWdcIjpmYWxzZSxcImRpZ2l0c1wiOjMsXCJkZXNjcmlwdGlvblwiOlwiVGVzdDJcIn1dJyk7XG4gICAgICBjb25zdCBwb3NpdGlvbnNIYXNoID0gbWQ1KCdbe1wiaWRcIjpcIjQ2MjE0NjkyXCIsXCJ0eXBlXCI6XCJQT1NJVElPTl9UWVBFX0JVWVwiLFwic3ltYm9sXCI6XCJHQlBVU0RcIixcIm1hZ2ljXCI6MTAwMCwnICtcbiAgICAgICdcInRpbWVcIjpcIjIwMjAtMDQtMTVUMDI6NDU6MDYuNTIxWlwiLFwidXBkYXRlVGltZVwiOlwiMjAyMC0wNC0xNVQwMjo0NTowNi41MjFaXCIsXCJvcGVuUHJpY2VcIjoxLjI2MTAxLCcgKyBcbiAgICAgICdcInZvbHVtZVwiOjAuMDcsXCJzd2FwXCI6MCxcImNvbW1pc3Npb25cIjotMC4yNSxcInN0b3BMb3NzXCI6MS4xNzcyMX1dJyk7XG4gICAgICBjb25zdCBvcmRlcnNIYXNoID0gbWQ1KCdbe1wiaWRcIjpcIjQ2ODcxMjg0XCIsXCJ0eXBlXCI6XCJPUkRFUl9UWVBFX0JVWV9MSU1JVFwiLFwic3RhdGVcIjpcIk9SREVSX1NUQVRFX1BMQUNFRFwiLCcgK1xuICAgICAgJ1wic3ltYm9sXCI6XCJBVUROWkRcIixcIm1hZ2ljXCI6MTIzNDU2LFwicGxhdGZvcm1cIjpcIm10NVwiLFwidGltZVwiOlwiMjAyMC0wNC0yMFQwODozODo1OC4yNzBaXCIsXCJvcGVuUHJpY2VcIjoxLjAzLCcgK1xuICAgICAgJ1widm9sdW1lXCI6MC4wMSxcImN1cnJlbnRWb2x1bWVcIjowLjAxfV0nKTtcbiAgICAgIGxldCBoYXNoZXMgPSBhd2FpdCBzdGF0ZS5nZXRIYXNoZXMoJ2Nsb3VkLWcyJywgJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgICBzaW5vbi5hc3NlcnQubWF0Y2goaGFzaGVzLnNwZWNpZmljYXRpb25zTWQ1LCBudWxsKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMucG9zaXRpb25zTWQ1LCBudWxsKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMub3JkZXJzTWQ1LCBudWxsKTtcbiAgICAgIGF3YWl0IHN0YXRlLm9uU3ltYm9sU3BlY2lmaWNhdGlvbnNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFtcbiAgICAgICAge3N5bWJvbDogJ0FVRE5aRCcsIHRpY2tTaXplOiAwLjAxLCBkZXNjcmlwdGlvbjogJ1Rlc3QxJ30sXG4gICAgICAgIHtzeW1ib2w6ICdFVVJVU0QnLCB0aWNrU2l6ZTogMC4wMDAwMDEsIGNvbnRyYWN0U2l6ZTogMSwgbWF4Vm9sdW1lOiAzMDAwMCxcbiAgICAgICAgICBoZWRnZWRNYXJnaW5Vc2VzTGFyZ2VyTGVnOiBmYWxzZSwgZGlnaXRzOiAzLCBkZXNjcmlwdGlvbjogJ1Rlc3QyJ31dLCBbXSk7XG4gICAgICBhd2FpdCBzdGF0ZS5vblBvc2l0aW9uc1JlcGxhY2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFt7XG4gICAgICAgIGlkOiAnNDYyMTQ2OTInLFxuICAgICAgICB0eXBlOiAnUE9TSVRJT05fVFlQRV9CVVknLFxuICAgICAgICBzeW1ib2w6ICdHQlBVU0QnLFxuICAgICAgICBtYWdpYzogMTAwMCxcbiAgICAgICAgdGltZTogbmV3IERhdGUoJzIwMjAtMDQtMTVUMDI6NDU6MDYuNTIxWicpLFxuICAgICAgICB1cGRhdGVUaW1lOiBuZXcgRGF0ZSgnMjAyMC0wNC0xNVQwMjo0NTowNi41MjFaJyksXG4gICAgICAgIG9wZW5QcmljZTogMS4yNjEwMSxcbiAgICAgICAgY3VycmVudFByaWNlOiAxLjI0ODgzLFxuICAgICAgICBjdXJyZW50VGlja1ZhbHVlOiAxLFxuICAgICAgICB2b2x1bWU6IDAuMDcsXG4gICAgICAgIHN3YXA6IDAsXG4gICAgICAgIHByb2ZpdDogLTg1LjI1OTk5OTk5OTk5OTY2LFxuICAgICAgICBjb21taXNzaW9uOiAtMC4yNSxcbiAgICAgICAgY2xpZW50SWQ6ICdURV9HQlBVU0RfN2h5SU5XcUFsRScsXG4gICAgICAgIHN0b3BMb3NzOiAxLjE3NzIxLFxuICAgICAgICB1bnJlYWxpemVkUHJvZml0OiAtODUuMjU5OTk5OTk5OTk5MDEsXG4gICAgICAgIHJlYWxpemVkUHJvZml0OiAtNi41MzY5OTMxNjg5OTI5MjJlLTEzLFxuICAgICAgICB1cGRhdGVTZXF1ZW5jZU51bWJlcjogMTMyNDYsXG4gICAgICAgIGFjY291bnRDdXJyZW5jeUV4Y2hhbmdlUmF0ZTogMSxcbiAgICAgICAgY29tbWVudDogJ3Rlc3QnLFxuICAgICAgICBicm9rZXJDb21tZW50OiAndGVzdDInLFxuICAgICAgfV0pO1xuICAgICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tcbiAgICAgICAgaWQ6ICc0Njg3MTI4NCcsXG4gICAgICAgIHR5cGU6ICdPUkRFUl9UWVBFX0JVWV9MSU1JVCcsXG4gICAgICAgIHN0YXRlOiAnT1JERVJfU1RBVEVfUExBQ0VEJyxcbiAgICAgICAgc3ltYm9sOiAnQVVETlpEJyxcbiAgICAgICAgbWFnaWM6IDEyMzQ1NixcbiAgICAgICAgcGxhdGZvcm06ICdtdDUnLFxuICAgICAgICB0aW1lOiAnMjAyMC0wNC0yMFQwODozODo1OC4yNzBaJyxcbiAgICAgICAgb3BlblByaWNlOiAxLjAzLFxuICAgICAgICBjdXJyZW50UHJpY2U6IDEuMDUyMDYsXG4gICAgICAgIHZvbHVtZTogMC4wMSxcbiAgICAgICAgY3VycmVudFZvbHVtZTogMC4wMSxcbiAgICAgICAgY29tbWVudDogJ0NPTU1FTlQyJyxcbiAgICAgICAgdXBkYXRlU2VxdWVuY2VOdW1iZXI6IDEzMjQ2LFxuICAgICAgICBhY2NvdW50Q3VycmVuY3lFeGNoYW5nZVJhdGU6IDEsXG4gICAgICAgIGJyb2tlckNvbW1lbnQ6ICd0ZXN0MicsXG4gICAgICAgIGNsaWVudElkOiAnVEVfR0JQVVNEXzdoeUlOV3FBbEUnLFxuICAgICAgfV0pO1xuICAgICAgc3RhdGUub25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICdzeW5jaHJvbml6YXRpb25JZCcpO1xuICAgICAgaGFzaGVzID0gYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0Lm1hdGNoKGhhc2hlcy5zcGVjaWZpY2F0aW9uc01kNSwgc3BlY2lmaWNhdGlvbnNIYXNoKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMucG9zaXRpb25zTWQ1LCBwb3NpdGlvbnNIYXNoKTtcbiAgICAgIHNpbm9uLmFzc2VydC5tYXRjaChoYXNoZXMub3JkZXJzTWQ1LCBvcmRlcnNIYXNoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2dldEhhc2hlc31cbiAgICAgKi9cbiAgICBpdCgnc2hvdWxkIGNhY2hlIHNwZWNpZmljYXRpb25zIGhhc2gnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzdGF0ZS5vblN5bWJvbFNwZWNpZmljYXRpb25zVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbXG4gICAgICAgIHtzeW1ib2w6ICdBVUROWkQnLCB0aWNrU2l6ZTogMC4wMSwgZGVzY3JpcHRpb246ICdUZXN0MSd9XSwgW10pO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2UoZ2V0SGFzaGVzU3B5KTtcbiAgICAgIGF3YWl0IHN0YXRlLm9uU3ltYm9sU3BlY2lmaWNhdGlvbnNVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIFtcbiAgICAgICAge3N5bWJvbDogJ0FVRE5aRCcsIHRpY2tTaXplOiAwLjAyLCBkZXNjcmlwdGlvbjogJ1Rlc3QxJ31dLCBbXSk7XG4gICAgICBhd2FpdCBzdGF0ZS5nZXRIYXNoZXMoJ2Nsb3VkLWcyJywgJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgICBzaW5vbi5hc3NlcnQuY2FsbGVkVHdpY2UoZ2V0SGFzaGVzU3B5KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI2dldEhhc2hlc31cbiAgICAgKi9cbiAgICBpdCgnc2hvdWxkIGNhY2hlIHBvc2l0aW9ucyBoYXNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc3RhdGUub25Qb3NpdGlvbnNSZXBsYWNlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbe1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBzeW1ib2w6ICdFVVJVU0QnLFxuICAgICAgICB0eXBlOiAnUE9TSVRJT05fVFlQRV9CVVknLFxuICAgICAgICBjdXJyZW50UHJpY2U6IDksXG4gICAgICAgIGN1cnJlbnRUaWNrVmFsdWU6IDAuNSxcbiAgICAgICAgb3BlblByaWNlOiA4LFxuICAgICAgICBwcm9maXQ6IDEwMCxcbiAgICAgICAgdm9sdW1lOiAyXG4gICAgICB9XSk7XG4gICAgICBzdGF0ZS5vblBvc2l0aW9uc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRPbmNlKGdldEhhc2hlc1NweSk7XG4gICAgICBzdGF0ZS5vblBvc2l0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIHN5bWJvbDogJ0VVUlVTRCcsXG4gICAgICAgIHR5cGU6ICdQT1NJVElPTl9UWVBFX0JVWScsXG4gICAgICAgIGN1cnJlbnRQcmljZTogOSxcbiAgICAgICAgY3VycmVudFRpY2tWYWx1ZTogMC41LFxuICAgICAgICBvcGVuUHJpY2U6IDgsXG4gICAgICAgIHByb2ZpdDogMTAwMCxcbiAgICAgICAgdm9sdW1lOiAyXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRUd2ljZShnZXRIYXNoZXNTcHkpO1xuICAgICAgc3RhdGUub25Qb3NpdGlvblJlbW92ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgJzEnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRUaHJpY2UoZ2V0SGFzaGVzU3B5KTtcbiAgICAgIGF3YWl0IHN0YXRlLm9uUG9zaXRpb25zUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tcbiAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgICAgdHlwZTogJ1BPU0lUSU9OX1RZUEVfQlVZJyxcbiAgICAgICAgY3VycmVudFByaWNlOiA5LFxuICAgICAgICBjdXJyZW50VGlja1ZhbHVlOiAwLjUsXG4gICAgICAgIG9wZW5QcmljZTogOCxcbiAgICAgICAgcHJvZml0OiAxMDAsXG4gICAgICAgIHZvbHVtZTogMlxuICAgICAgfV0pO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0LmNhbGxDb3VudChnZXRIYXNoZXNTcHksIDQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjZ2V0SGFzaGVzfVxuICAgICAqL1xuICAgIGl0KCdzaG91bGQgY2FjaGUgb3JkZXJzIGhhc2gnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzdGF0ZS5vblBlbmRpbmdPcmRlcnNSZXBsYWNlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCBbe1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBzeW1ib2w6ICdFVVJVU0QnLFxuICAgICAgICB0eXBlOiAnT1JERVJfVFlQRV9CVVlfTElNSVQnLFxuICAgICAgICBjdXJyZW50UHJpY2U6IDlcbiAgICAgIH1dKTtcbiAgICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIGF3YWl0IHN0YXRlLmdldEhhc2hlcygnY2xvdWQtZzInLCAndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRUd2ljZShnZXRIYXNoZXNTcHkpO1xuICAgICAgc3RhdGUub25QZW5kaW5nT3JkZXJVcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHtcbiAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgICAgdHlwZTogJ09SREVSX1RZUEVfQlVZX0xJTUlUJyxcbiAgICAgICAgY3VycmVudFByaWNlOiAxMFxuICAgICAgfSk7XG4gICAgICBhd2FpdCBzdGF0ZS5nZXRIYXNoZXMoJ2Nsb3VkLWcyJywgJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgICBhd2FpdCBzdGF0ZS5nZXRIYXNoZXMoJ2Nsb3VkLWcyJywgJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgICBzaW5vbi5hc3NlcnQuY2FsbENvdW50KGdldEhhc2hlc1NweSwgMyk7XG4gICAgICBzdGF0ZS5vblBlbmRpbmdPcmRlckNvbXBsZXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCAnMScpO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0LmNhbGxDb3VudChnZXRIYXNoZXNTcHksIDQpO1xuICAgICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzUmVwbGFjZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgW3tcbiAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgc3ltYm9sOiAnRVVSVVNEJyxcbiAgICAgICAgdHlwZTogJ09SREVSX1RZUEVfQlVZX0xJTUlUJyxcbiAgICAgICAgY3VycmVudFByaWNlOiAxMFxuICAgICAgfV0pO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgYXdhaXQgc3RhdGUuZ2V0SGFzaGVzKCdjbG91ZC1nMicsICd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgICAgc2lub24uYXNzZXJ0LmNhbGxDb3VudChnZXRIYXNoZXNTcHksIDUpO1xuICAgIH0pO1xuXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAdGVzdCB7VGVybWluYWxTdGF0ZSNvblN5bmNocm9uaXphdGlvblN0YXJ0ZWR9XG4gICAqL1xuICBpdCgnZGVsZXRlIGFsbCB1bmZpbmlzaGVkIHN0YXRlcyBleGNlcHQgZm9yIHRoZSBsYXRlc3Qgb24gc3luYyBzdGFydGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN0YXRlLm9uQWNjb3VudEluZm9ybWF0aW9uVXBkYXRlZCgndmludC1oaWxsOjI6cHMtbXBhLTMnLCB7J2JhbGFuY2UnOiAxMDAwfSk7XG4gICAgYXdhaXQgc3RhdGUub25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHsnYmFsYW5jZSc6IDEwMDB9KTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCgndmludC1oaWxsOjE6cHMtbXBhLTQnLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICBzaG91bGQoc3RhdGUuX3N0YXRlQnlJbnN0YW5jZUluZGV4Wyd2aW50LWhpbGw6MTpwcy1tcGEtMSddKS5ub3QuZXFsKHVuZGVmaW5lZCk7XG4gICAgc2hvdWxkKHN0YXRlLl9zdGF0ZUJ5SW5zdGFuY2VJbmRleFsndmludC1oaWxsOjE6cHMtbXBhLTInXSkuZXFsKHVuZGVmaW5lZCk7XG4gICAgc2hvdWxkKHN0YXRlLl9zdGF0ZUJ5SW5zdGFuY2VJbmRleFsndmludC1oaWxsOjI6cHMtbXBhLTMnXSkubm90LmVxbCh1bmRlZmluZWQpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCBkZWxldGUgYWxsIGRpc2Nvbm5lY3RlZCBzdGF0ZXMgb24gc3luYyBmaW5pc2hlZCcsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoyOnBzLW1wYS0zJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjI6cHMtbXBhLTMnLCAnc3luY2hyb25pemF0aW9uSWQnKTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uQ29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgIGF3YWl0IHN0YXRlLm9uQWNjb3VudEluZm9ybWF0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTInLCB7J2JhbGFuY2UnOiAxMDAwfSk7XG4gICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMicsICdzeW5jaHJvbml6YXRpb25JZDInKTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS00JywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTQnLCAnc3luY2hyb25pemF0aW9uSWQyJyk7XG4gICAgc2hvdWxkKHN0YXRlLl9zdGF0ZUJ5SW5zdGFuY2VJbmRleFsndmludC1oaWxsOjE6cHMtbXBhLTEnXSkubm90LmVxbCh1bmRlZmluZWQpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJ10pLmVxbCh1bmRlZmluZWQpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoyOnBzLW1wYS0zJ10pLm5vdC5lcWwodW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI29uRGlzY29ubmVjdGVkfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCBkZWxldGUgc3RhdGUgb24gZGlzY29ubmVjdGVkIGlmIHRoZXJlIGlzIGFub3RoZXIgc3luY2VkIHN0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN0YXRlLm9uQWNjb3VudEluZm9ybWF0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7J2JhbGFuY2UnOiAxMDAwfSk7XG4gICAgYXdhaXQgc3RhdGUub25Db25uZWN0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgYXdhaXQgc3RhdGUub25QZW5kaW5nT3JkZXJzU3luY2hyb25pemVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsICdzeW5jaHJvbml6YXRpb25JZDInKTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uQ29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMicpO1xuICAgIGF3YWl0IHN0YXRlLm9uUGVuZGluZ09yZGVyc1N5bmNocm9uaXplZCgndmludC1oaWxsOjE6cHMtbXBhLTInLCAnc3luY2hyb25pemF0aW9uSWQyJyk7XG4gICAgYXdhaXQgc3RhdGUub25TdHJlYW1DbG9zZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJyk7XG4gICAgc2hvdWxkKHN0YXRlLl9zdGF0ZUJ5SW5zdGFuY2VJbmRleFsndmludC1oaWxsOjE6cHMtbXBhLTEnXSkubm90LmVxbCh1bmRlZmluZWQpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJ10pLmVxbCh1bmRlZmluZWQpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qge1Rlcm1pbmFsU3RhdGUjb25EaXNjb25uZWN0ZWR9XG4gICAqL1xuICBpdCgnc2hvdWxkIGRlbGV0ZSBwYXJ0aWFsbHkgc3luY2VkIHN0YXRlIG9uIGRpc2Nvbm5lY3RlZCBpZiB0aGVyZSBpcyBhbm90aGVyIGZyZXNoZXIgc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc3RhdGUub25BY2NvdW50SW5mb3JtYXRpb25VcGRhdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIHsnYmFsYW5jZSc6IDEwMDB9KTtcbiAgICBhd2FpdCBzdGF0ZS5vbkNvbm5lY3RlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnKTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uQ29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMicpO1xuICAgIGF3YWl0IHN0YXRlLm9uU3RyZWFtQ2xvc2VkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJ10pLmVxbCh1bmRlZmluZWQpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJ10pLm5vdC5lcWwodW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IHtUZXJtaW5hbFN0YXRlI29uRGlzY29ubmVjdGVkfVxuICAgKi9cbiAgaXQoJ3Nob3VsZCBub3QgZGVsZXRlIHBhcnRpYWxseSBzeW5jZWQgc3RhdGUgb24gZGlzY29ubmVjdGVkIGlmIHRoZXJlIGlzIG5vIGZyZXNoZXIgc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc3RhdGUub25TeW5jaHJvbml6YXRpb25TdGFydGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMScsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgIGF3YWl0IHN0YXRlLm9uQWNjb3VudEluZm9ybWF0aW9uVXBkYXRlZCgndmludC1oaWxsOjE6cHMtbXBhLTEnLCB7J2JhbGFuY2UnOiAxMDAwfSk7XG4gICAgYXdhaXQgc3RhdGUub25Db25uZWN0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJyk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCA1MCkpO1xuICAgIGF3YWl0IHN0YXRlLm9uU3luY2hyb25pemF0aW9uU3RhcnRlZCgndmludC1oaWxsOjE6cHMtbXBhLTInLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICBhd2FpdCBzdGF0ZS5vbkFjY291bnRJbmZvcm1hdGlvblVwZGF0ZWQoJ3ZpbnQtaGlsbDoxOnBzLW1wYS0yJywgeydiYWxhbmNlJzogMTAwMH0pO1xuICAgIGF3YWl0IHN0YXRlLm9uQ29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMicpO1xuICAgIGF3YWl0IHN0YXRlLm9uRGlzY29ubmVjdGVkKCd2aW50LWhpbGw6MTpwcy1tcGEtMicpO1xuICAgIHNob3VsZChzdGF0ZS5fc3RhdGVCeUluc3RhbmNlSW5kZXhbJ3ZpbnQtaGlsbDoxOnBzLW1wYS0xJ10pLm5vdC5lcWwodW5kZWZpbmVkKTtcbiAgICBzaG91bGQoc3RhdGUuX3N0YXRlQnlJbnN0YW5jZUluZGV4Wyd2aW50LWhpbGw6MTpwcy1tcGEtMiddKS5ub3QuZXFsKHVuZGVmaW5lZCk7XG4gIH0pO1xuXG59KTtcbiJdfQ==