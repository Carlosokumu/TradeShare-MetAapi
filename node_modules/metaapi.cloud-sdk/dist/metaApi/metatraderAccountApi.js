'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metatraderAccount = require('./metatraderAccount');

var _metatraderAccount2 = _interopRequireDefault(_metatraderAccount);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Exposes MetaTrader account API logic to the consumers
 */
class MetatraderAccountApi {

  /**
   * Constructs a MetaTrader account API instance
   * @param {MetatraderAccountClient} metatraderAccountClient MetaTrader account REST API client
   * @param {MetaApiWebsocketClient} metaApiWebsocketClient MetaApi websocket client
   * @param {ConnectionRegistry} connectionRegistry metatrader account connection registry
   * @param {ExpertAdvisorClient} expertAdvisorClient expert advisor REST API client
   * @param {HistoricalMarketDataClient} historicalMarketDataClient historical market data HTTP API client
   * @param {string} application application name
   */
  constructor(metatraderAccountClient, metaApiWebsocketClient, connectionRegistry, expertAdvisorClient, historicalMarketDataClient, application) {
    this._metatraderAccountClient = metatraderAccountClient;
    this._metaApiWebsocketClient = metaApiWebsocketClient;
    this._connectionRegistry = connectionRegistry;
    this._expertAdvisorClient = expertAdvisorClient;
    this._historicalMarketDataClient = historicalMarketDataClient;
    this._application = application;
  }

  /**
   * Retrieves MetaTrader accounts
   * @param {AccountsFilter} accountsFilter optional filter
   * @return {Promise<Array<MetatraderAccount>>} promise resolving with an array of MetaTrader account entities
   */
  async getAccounts(accountsFilter) {
    let accounts = await this._metatraderAccountClient.getAccounts(accountsFilter);
    if (accounts.items) {
      accounts = accounts.items;
    }
    return accounts.map(a => new _metatraderAccount2.default(a, this._metatraderAccountClient, this._metaApiWebsocketClient, this._connectionRegistry, this._expertAdvisorClient, this._historicalMarketDataClient, this._application));
  }

  /**
   * Retrieves a MetaTrader account by id
   * @param {String} accountId MetaTrader account id
   * @return {Promise<MetatraderAccount>} promise resolving with MetaTrader account entity
   */
  async getAccount(accountId) {
    let account = await this._metatraderAccountClient.getAccount(accountId);
    return new _metatraderAccount2.default(account, this._metatraderAccountClient, this._metaApiWebsocketClient, this._connectionRegistry, this._expertAdvisorClient, this._historicalMarketDataClient, this._application);
  }

  /**
   * Retrieves a MetaTrader account by token
   * @return {Promise<MetatraderAccount>} promise resolving with MetaTrader account entity
   */
  async getAccountByToken() {
    let account = await this._metatraderAccountClient.getAccountByToken();
    return new _metatraderAccount2.default(account, this._metatraderAccountClient, this._metaApiWebsocketClient, this._connectionRegistry, this._expertAdvisorClient, this._historicalMarketDataClient, this._application);
  }

  /**
   * Creates a MetaTrader account
   * @param {NewMetatraderAccountDto} account MetaTrader account data
   * @return {Promise<MetatraderAccount>} promise resolving with MetaTrader account entity
   */
  async createAccount(account) {
    let id = await this._metatraderAccountClient.createAccount(account);
    return this.getAccount(id.id);
  }

}
exports.default = MetatraderAccountApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL21ldGF0cmFkZXJBY2NvdW50QXBpLmVzNiJdLCJuYW1lcyI6WyJNZXRhdHJhZGVyQWNjb3VudEFwaSIsImNvbnN0cnVjdG9yIiwibWV0YXRyYWRlckFjY291bnRDbGllbnQiLCJtZXRhQXBpV2Vic29ja2V0Q2xpZW50IiwiY29ubmVjdGlvblJlZ2lzdHJ5IiwiZXhwZXJ0QWR2aXNvckNsaWVudCIsImhpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50IiwiYXBwbGljYXRpb24iLCJfbWV0YXRyYWRlckFjY291bnRDbGllbnQiLCJfbWV0YUFwaVdlYnNvY2tldENsaWVudCIsIl9jb25uZWN0aW9uUmVnaXN0cnkiLCJfZXhwZXJ0QWR2aXNvckNsaWVudCIsIl9oaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCIsIl9hcHBsaWNhdGlvbiIsImdldEFjY291bnRzIiwiYWNjb3VudHNGaWx0ZXIiLCJhY2NvdW50cyIsIml0ZW1zIiwibWFwIiwiYSIsIk1ldGF0cmFkZXJBY2NvdW50IiwiZ2V0QWNjb3VudCIsImFjY291bnRJZCIsImFjY291bnQiLCJnZXRBY2NvdW50QnlUb2tlbiIsImNyZWF0ZUFjY291bnQiLCJpZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBOzs7Ozs7QUFFQTs7O0FBR2UsTUFBTUEsb0JBQU4sQ0FBMkI7O0FBRXhDOzs7Ozs7Ozs7QUFTQUMsY0FBWUMsdUJBQVosRUFBcUNDLHNCQUFyQyxFQUE2REMsa0JBQTdELEVBQWlGQyxtQkFBakYsRUFDRUMsMEJBREYsRUFDOEJDLFdBRDlCLEVBQzJDO0FBQ3pDLFNBQUtDLHdCQUFMLEdBQWdDTix1QkFBaEM7QUFDQSxTQUFLTyx1QkFBTCxHQUErQk4sc0JBQS9CO0FBQ0EsU0FBS08sbUJBQUwsR0FBMkJOLGtCQUEzQjtBQUNBLFNBQUtPLG9CQUFMLEdBQTRCTixtQkFBNUI7QUFDQSxTQUFLTywyQkFBTCxHQUFtQ04sMEJBQW5DO0FBQ0EsU0FBS08sWUFBTCxHQUFvQk4sV0FBcEI7QUFDRDs7QUFFRDs7Ozs7QUFLQSxRQUFNTyxXQUFOLENBQWtCQyxjQUFsQixFQUFrQztBQUNoQyxRQUFJQyxXQUFXLE1BQU0sS0FBS1Isd0JBQUwsQ0FBOEJNLFdBQTlCLENBQTBDQyxjQUExQyxDQUFyQjtBQUNBLFFBQUlDLFNBQVNDLEtBQWIsRUFBb0I7QUFDbEJELGlCQUFXQSxTQUFTQyxLQUFwQjtBQUNEO0FBQ0QsV0FBT0QsU0FBU0UsR0FBVCxDQUFhQyxLQUFLLElBQUlDLDJCQUFKLENBQXNCRCxDQUF0QixFQUF5QixLQUFLWCx3QkFBOUIsRUFBd0QsS0FBS0MsdUJBQTdELEVBQ3ZCLEtBQUtDLG1CQURrQixFQUNHLEtBQUtDLG9CQURSLEVBQzhCLEtBQUtDLDJCQURuQyxFQUNnRSxLQUFLQyxZQURyRSxDQUFsQixDQUFQO0FBRUQ7O0FBRUQ7Ozs7O0FBS0EsUUFBTVEsVUFBTixDQUFpQkMsU0FBakIsRUFBNEI7QUFDMUIsUUFBSUMsVUFBVSxNQUFNLEtBQUtmLHdCQUFMLENBQThCYSxVQUE5QixDQUF5Q0MsU0FBekMsQ0FBcEI7QUFDQSxXQUFPLElBQUlGLDJCQUFKLENBQXNCRyxPQUF0QixFQUErQixLQUFLZix3QkFBcEMsRUFBOEQsS0FBS0MsdUJBQW5FLEVBQ0wsS0FBS0MsbUJBREEsRUFDc0IsS0FBS0Msb0JBRDNCLEVBQ2lELEtBQUtDLDJCQUR0RCxFQUNtRixLQUFLQyxZQUR4RixDQUFQO0FBRUQ7O0FBRUQ7Ozs7QUFJQSxRQUFNVyxpQkFBTixHQUEwQjtBQUN4QixRQUFJRCxVQUFVLE1BQU0sS0FBS2Ysd0JBQUwsQ0FBOEJnQixpQkFBOUIsRUFBcEI7QUFDQSxXQUFPLElBQUlKLDJCQUFKLENBQXNCRyxPQUF0QixFQUErQixLQUFLZix3QkFBcEMsRUFBOEQsS0FBS0MsdUJBQW5FLEVBQ0wsS0FBS0MsbUJBREEsRUFDcUIsS0FBS0Msb0JBRDFCLEVBQ2dELEtBQUtDLDJCQURyRCxFQUNrRixLQUFLQyxZQUR2RixDQUFQO0FBRUQ7O0FBRUQ7Ozs7O0FBS0EsUUFBTVksYUFBTixDQUFvQkYsT0FBcEIsRUFBNkI7QUFDM0IsUUFBSUcsS0FBSyxNQUFNLEtBQUtsQix3QkFBTCxDQUE4QmlCLGFBQTlCLENBQTRDRixPQUE1QyxDQUFmO0FBQ0EsV0FBTyxLQUFLRixVQUFMLENBQWdCSyxHQUFHQSxFQUFuQixDQUFQO0FBQ0Q7O0FBaEV1QztrQkFBckIxQixvQiIsImZpbGUiOiJtZXRhdHJhZGVyQWNjb3VudEFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE1ldGF0cmFkZXJBY2NvdW50IGZyb20gJy4vbWV0YXRyYWRlckFjY291bnQnO1xuXG4vKipcbiAqIEV4cG9zZXMgTWV0YVRyYWRlciBhY2NvdW50IEFQSSBsb2dpYyB0byB0aGUgY29uc3VtZXJzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ldGF0cmFkZXJBY2NvdW50QXBpIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIE1ldGFUcmFkZXIgYWNjb3VudCBBUEkgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtNZXRhdHJhZGVyQWNjb3VudENsaWVudH0gbWV0YXRyYWRlckFjY291bnRDbGllbnQgTWV0YVRyYWRlciBhY2NvdW50IFJFU1QgQVBJIGNsaWVudFxuICAgKiBAcGFyYW0ge01ldGFBcGlXZWJzb2NrZXRDbGllbnR9IG1ldGFBcGlXZWJzb2NrZXRDbGllbnQgTWV0YUFwaSB3ZWJzb2NrZXQgY2xpZW50XG4gICAqIEBwYXJhbSB7Q29ubmVjdGlvblJlZ2lzdHJ5fSBjb25uZWN0aW9uUmVnaXN0cnkgbWV0YXRyYWRlciBhY2NvdW50IGNvbm5lY3Rpb24gcmVnaXN0cnlcbiAgICogQHBhcmFtIHtFeHBlcnRBZHZpc29yQ2xpZW50fSBleHBlcnRBZHZpc29yQ2xpZW50IGV4cGVydCBhZHZpc29yIFJFU1QgQVBJIGNsaWVudFxuICAgKiBAcGFyYW0ge0hpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50fSBoaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCBoaXN0b3JpY2FsIG1hcmtldCBkYXRhIEhUVFAgQVBJIGNsaWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwbGljYXRpb24gYXBwbGljYXRpb24gbmFtZVxuICAgKi9cbiAgY29uc3RydWN0b3IobWV0YXRyYWRlckFjY291bnRDbGllbnQsIG1ldGFBcGlXZWJzb2NrZXRDbGllbnQsIGNvbm5lY3Rpb25SZWdpc3RyeSwgZXhwZXJ0QWR2aXNvckNsaWVudCwgXG4gICAgaGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQsIGFwcGxpY2F0aW9uKSB7XG4gICAgdGhpcy5fbWV0YXRyYWRlckFjY291bnRDbGllbnQgPSBtZXRhdHJhZGVyQWNjb3VudENsaWVudDtcbiAgICB0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50ID0gbWV0YUFwaVdlYnNvY2tldENsaWVudDtcbiAgICB0aGlzLl9jb25uZWN0aW9uUmVnaXN0cnkgPSBjb25uZWN0aW9uUmVnaXN0cnk7XG4gICAgdGhpcy5fZXhwZXJ0QWR2aXNvckNsaWVudCA9IGV4cGVydEFkdmlzb3JDbGllbnQ7XG4gICAgdGhpcy5faGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQgPSBoaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudDtcbiAgICB0aGlzLl9hcHBsaWNhdGlvbiA9IGFwcGxpY2F0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBNZXRhVHJhZGVyIGFjY291bnRzXG4gICAqIEBwYXJhbSB7QWNjb3VudHNGaWx0ZXJ9IGFjY291bnRzRmlsdGVyIG9wdGlvbmFsIGZpbHRlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PE1ldGF0cmFkZXJBY2NvdW50Pj59IHByb21pc2UgcmVzb2x2aW5nIHdpdGggYW4gYXJyYXkgb2YgTWV0YVRyYWRlciBhY2NvdW50IGVudGl0aWVzXG4gICAqL1xuICBhc3luYyBnZXRBY2NvdW50cyhhY2NvdW50c0ZpbHRlcikge1xuICAgIGxldCBhY2NvdW50cyA9IGF3YWl0IHRoaXMuX21ldGF0cmFkZXJBY2NvdW50Q2xpZW50LmdldEFjY291bnRzKGFjY291bnRzRmlsdGVyKTtcbiAgICBpZiAoYWNjb3VudHMuaXRlbXMpIHtcbiAgICAgIGFjY291bnRzID0gYWNjb3VudHMuaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBhY2NvdW50cy5tYXAoYSA9PiBuZXcgTWV0YXRyYWRlckFjY291bnQoYSwgdGhpcy5fbWV0YXRyYWRlckFjY291bnRDbGllbnQsIHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQsIFxuICAgICAgdGhpcy5fY29ubmVjdGlvblJlZ2lzdHJ5LCB0aGlzLl9leHBlcnRBZHZpc29yQ2xpZW50LCB0aGlzLl9oaXN0b3JpY2FsTWFya2V0RGF0YUNsaWVudCwgdGhpcy5fYXBwbGljYXRpb24pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBNZXRhVHJhZGVyIGFjY291bnQgYnkgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFjY291bnRJZCBNZXRhVHJhZGVyIGFjY291bnQgaWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXRhdHJhZGVyQWNjb3VudD59IHByb21pc2UgcmVzb2x2aW5nIHdpdGggTWV0YVRyYWRlciBhY2NvdW50IGVudGl0eVxuICAgKi9cbiAgYXN5bmMgZ2V0QWNjb3VudChhY2NvdW50SWQpIHtcbiAgICBsZXQgYWNjb3VudCA9IGF3YWl0IHRoaXMuX21ldGF0cmFkZXJBY2NvdW50Q2xpZW50LmdldEFjY291bnQoYWNjb3VudElkKTtcbiAgICByZXR1cm4gbmV3IE1ldGF0cmFkZXJBY2NvdW50KGFjY291bnQsIHRoaXMuX21ldGF0cmFkZXJBY2NvdW50Q2xpZW50LCB0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50LCBcbiAgICAgIHRoaXMuX2Nvbm5lY3Rpb25SZWdpc3RyeSwgIHRoaXMuX2V4cGVydEFkdmlzb3JDbGllbnQsIHRoaXMuX2hpc3RvcmljYWxNYXJrZXREYXRhQ2xpZW50LCB0aGlzLl9hcHBsaWNhdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgTWV0YVRyYWRlciBhY2NvdW50IGJ5IHRva2VuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TWV0YXRyYWRlckFjY291bnQ+fSBwcm9taXNlIHJlc29sdmluZyB3aXRoIE1ldGFUcmFkZXIgYWNjb3VudCBlbnRpdHlcbiAgICovXG4gIGFzeW5jIGdldEFjY291bnRCeVRva2VuKCkge1xuICAgIGxldCBhY2NvdW50ID0gYXdhaXQgdGhpcy5fbWV0YXRyYWRlckFjY291bnRDbGllbnQuZ2V0QWNjb3VudEJ5VG9rZW4oKTtcbiAgICByZXR1cm4gbmV3IE1ldGF0cmFkZXJBY2NvdW50KGFjY291bnQsIHRoaXMuX21ldGF0cmFkZXJBY2NvdW50Q2xpZW50LCB0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50LCBcbiAgICAgIHRoaXMuX2Nvbm5lY3Rpb25SZWdpc3RyeSwgdGhpcy5fZXhwZXJ0QWR2aXNvckNsaWVudCwgdGhpcy5faGlzdG9yaWNhbE1hcmtldERhdGFDbGllbnQsIHRoaXMuX2FwcGxpY2F0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgTWV0YVRyYWRlciBhY2NvdW50XG4gICAqIEBwYXJhbSB7TmV3TWV0YXRyYWRlckFjY291bnREdG99IGFjY291bnQgTWV0YVRyYWRlciBhY2NvdW50IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZXRhdHJhZGVyQWNjb3VudD59IHByb21pc2UgcmVzb2x2aW5nIHdpdGggTWV0YVRyYWRlciBhY2NvdW50IGVudGl0eVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlQWNjb3VudChhY2NvdW50KSB7XG4gICAgbGV0IGlkID0gYXdhaXQgdGhpcy5fbWV0YXRyYWRlckFjY291bnRDbGllbnQuY3JlYXRlQWNjb3VudChhY2NvdW50KTtcbiAgICByZXR1cm4gdGhpcy5nZXRBY2NvdW50KGlkLmlkKTtcbiAgfVxuXG59XG4iXX0=