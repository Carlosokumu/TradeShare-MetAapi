'use strict';

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _idb = require('idb');

var _browserHistoryDatabase = require('./browserHistoryDatabase');

var _browserHistoryDatabase2 = _interopRequireDefault(_browserHistoryDatabase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('fake-indexeddb/auto');


describe('BrowserHistoryDatabase', () => {

  let db;

  before(async () => {
    db = _browserHistoryDatabase2.default.getInstance();
  });

  beforeEach(async () => {
    await (0, _idb.deleteDB)('metaapi');
  });

  afterEach(async () => {
    await (0, _idb.deleteDB)('metaapi');
  });

  it('should clear db', async () => {
    await db.flush('accountId', 'MetaApi', [{ id: '2' }], [{ id: '1' }]);
    await db.clear('accountId', 'MetaApi');
    let { deals, historyOrders } = await db.loadHistory('accountId', 'MetaApi');
    deals.should.match([]);
    historyOrders.should.match([]);
  });

  it('should record and then read db contents', async () => {
    await db.flush('accountId', 'MetaApi', [{ id: '2' }], [{ id: '1' }]);
    await db.flush('accountId', 'MetaApi', [{ id: '3' }], [{ id: '2' }]);
    let { deals, historyOrders } = await db.loadHistory('accountId', 'MetaApi');
    deals.should.match([{ id: '1' }, { id: '2' }]);
    historyOrders.should.match([{ id: '2' }, { id: '3' }]);
  });
  it('should read db contents only for current account and application', async () => {
    await db.flush('31а3c7b9-958f-4827-96f9-7d296c8ad03e', 'MetaApi', [{ id: '4' }], [{ id: '5' }]);
    await db.flush('96773bff-27f4-4070-91eg-d6ba828ae9051', 'MetaApi', [{ id: '2' }], [{ id: '1' }]);
    await db.flush('96773bff-27f4-4070-91eg-d6ba828ae9051', 'MetaApi', [{ id: '3' }], [{ id: '2' }]);
    let { deals, historyOrders } = await db.loadHistory('31а3c7b9-958f-4827-96f9-7d296c8ad03e', 'MetaApi');
    deals.should.match([{ id: '5' }]);
    deals.length.should.eql(1);
    historyOrders.should.match([{ id: '4' }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhQXBpL2hpc3RvcnlEYXRhYmFzZS9icm93c2VySGlzdG9yeURhdGFiYXNlLnNwZWMuZXM2Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJkZXNjcmliZSIsImRiIiwiYmVmb3JlIiwiQnJvd3Nlckhpc3RvcnlEYXRhYmFzZSIsImdldEluc3RhbmNlIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsIml0IiwiZmx1c2giLCJpZCIsImNsZWFyIiwiZGVhbHMiLCJoaXN0b3J5T3JkZXJzIiwibG9hZEhpc3RvcnkiLCJzaG91bGQiLCJtYXRjaCIsImxlbmd0aCIsImVxbCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7QUFFQTs7QUFDQTs7Ozs7O0FBRkFBLFFBQVEscUJBQVI7OztBQUlBQyxTQUFTLHdCQUFULEVBQW1DLE1BQU07O0FBRXZDLE1BQUlDLEVBQUo7O0FBRUFDLFNBQU8sWUFBWTtBQUNqQkQsU0FBS0UsaUNBQXVCQyxXQUF2QixFQUFMO0FBQ0QsR0FGRDs7QUFJQUMsYUFBVyxZQUFZO0FBQ3JCLFVBQU0sbUJBQVMsU0FBVCxDQUFOO0FBQ0QsR0FGRDs7QUFJQUMsWUFBVSxZQUFZO0FBQ3BCLFVBQU0sbUJBQVMsU0FBVCxDQUFOO0FBQ0QsR0FGRDs7QUFJQUMsS0FBRyxpQkFBSCxFQUFzQixZQUFZO0FBQ2hDLFVBQU1OLEdBQUdPLEtBQUgsQ0FBUyxXQUFULEVBQXNCLFNBQXRCLEVBQWlDLENBQUMsRUFBQ0MsSUFBSSxHQUFMLEVBQUQsQ0FBakMsRUFBOEMsQ0FBQyxFQUFDQSxJQUFJLEdBQUwsRUFBRCxDQUE5QyxDQUFOO0FBQ0EsVUFBTVIsR0FBR1MsS0FBSCxDQUFTLFdBQVQsRUFBc0IsU0FBdEIsQ0FBTjtBQUNBLFFBQUksRUFBQ0MsS0FBRCxFQUFRQyxhQUFSLEtBQXlCLE1BQU1YLEdBQUdZLFdBQUgsQ0FBZSxXQUFmLEVBQTRCLFNBQTVCLENBQW5DO0FBQ0FGLFVBQU1HLE1BQU4sQ0FBYUMsS0FBYixDQUFtQixFQUFuQjtBQUNBSCxrQkFBY0UsTUFBZCxDQUFxQkMsS0FBckIsQ0FBMkIsRUFBM0I7QUFDRCxHQU5EOztBQVFBUixLQUFHLHlDQUFILEVBQThDLFlBQVk7QUFDeEQsVUFBTU4sR0FBR08sS0FBSCxDQUFTLFdBQVQsRUFBc0IsU0FBdEIsRUFBaUMsQ0FBQyxFQUFDQyxJQUFJLEdBQUwsRUFBRCxDQUFqQyxFQUE4QyxDQUFDLEVBQUNBLElBQUksR0FBTCxFQUFELENBQTlDLENBQU47QUFDQSxVQUFNUixHQUFHTyxLQUFILENBQVMsV0FBVCxFQUFzQixTQUF0QixFQUFpQyxDQUFDLEVBQUNDLElBQUksR0FBTCxFQUFELENBQWpDLEVBQThDLENBQUMsRUFBQ0EsSUFBSSxHQUFMLEVBQUQsQ0FBOUMsQ0FBTjtBQUNBLFFBQUksRUFBQ0UsS0FBRCxFQUFRQyxhQUFSLEtBQXlCLE1BQU1YLEdBQUdZLFdBQUgsQ0FBZSxXQUFmLEVBQTRCLFNBQTVCLENBQW5DO0FBQ0FGLFVBQU1HLE1BQU4sQ0FBYUMsS0FBYixDQUFtQixDQUFDLEVBQUNOLElBQUksR0FBTCxFQUFELEVBQVksRUFBQ0EsSUFBSSxHQUFMLEVBQVosQ0FBbkI7QUFDQUcsa0JBQWNFLE1BQWQsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsRUFBQ04sSUFBSSxHQUFMLEVBQUQsRUFBWSxFQUFDQSxJQUFJLEdBQUwsRUFBWixDQUEzQjtBQUNELEdBTkQ7QUFPQUYsS0FBRyxrRUFBSCxFQUF1RSxZQUFZO0FBQ2pGLFVBQU1OLEdBQUdPLEtBQUgsQ0FBUyxzQ0FBVCxFQUFpRCxTQUFqRCxFQUE0RCxDQUFDLEVBQUNDLElBQUksR0FBTCxFQUFELENBQTVELEVBQXlFLENBQUMsRUFBQ0EsSUFBSSxHQUFMLEVBQUQsQ0FBekUsQ0FBTjtBQUNBLFVBQU1SLEdBQUdPLEtBQUgsQ0FBUyx1Q0FBVCxFQUFrRCxTQUFsRCxFQUE2RCxDQUFDLEVBQUNDLElBQUksR0FBTCxFQUFELENBQTdELEVBQTBFLENBQUMsRUFBQ0EsSUFBSSxHQUFMLEVBQUQsQ0FBMUUsQ0FBTjtBQUNBLFVBQU1SLEdBQUdPLEtBQUgsQ0FBUyx1Q0FBVCxFQUFrRCxTQUFsRCxFQUE2RCxDQUFDLEVBQUNDLElBQUksR0FBTCxFQUFELENBQTdELEVBQTBFLENBQUMsRUFBQ0EsSUFBSSxHQUFMLEVBQUQsQ0FBMUUsQ0FBTjtBQUNBLFFBQUksRUFBQ0UsS0FBRCxFQUFRQyxhQUFSLEtBQXlCLE1BQU1YLEdBQUdZLFdBQUgsQ0FBZSxzQ0FBZixFQUF1RCxTQUF2RCxDQUFuQztBQUNBRixVQUFNRyxNQUFOLENBQWFDLEtBQWIsQ0FBbUIsQ0FBQyxFQUFDTixJQUFJLEdBQUwsRUFBRCxDQUFuQjtBQUNBRSxVQUFNSyxNQUFOLENBQWFGLE1BQWIsQ0FBb0JHLEdBQXBCLENBQXdCLENBQXhCO0FBQ0FMLGtCQUFjRSxNQUFkLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLEVBQUNOLElBQUksR0FBTCxFQUFELENBQTNCO0FBQ0QsR0FSRDtBQVVELENBekNEIiwiZmlsZSI6ImJyb3dzZXJIaXN0b3J5RGF0YWJhc2Uuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHNob3VsZCBmcm9tICdzaG91bGQnO1xucmVxdWlyZSgnZmFrZS1pbmRleGVkZGIvYXV0bycpO1xuaW1wb3J0IHtkZWxldGVEQn0gZnJvbSAnaWRiJztcbmltcG9ydCBCcm93c2VySGlzdG9yeURhdGFiYXNlIGZyb20gJy4vYnJvd3Nlckhpc3RvcnlEYXRhYmFzZSc7XG5cbmRlc2NyaWJlKCdCcm93c2VySGlzdG9yeURhdGFiYXNlJywgKCkgPT4ge1xuXG4gIGxldCBkYjtcblxuICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgIGRiID0gQnJvd3Nlckhpc3RvcnlEYXRhYmFzZS5nZXRJbnN0YW5jZSgpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBkZWxldGVEQignbWV0YWFwaScpO1xuICB9KTtcblxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRlbGV0ZURCKCdtZXRhYXBpJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2xlYXIgZGInLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGIuZmx1c2goJ2FjY291bnRJZCcsICdNZXRhQXBpJywgW3tpZDogJzInfV0sIFt7aWQ6ICcxJ31dKTtcbiAgICBhd2FpdCBkYi5jbGVhcignYWNjb3VudElkJywgJ01ldGFBcGknKTtcbiAgICBsZXQge2RlYWxzLCBoaXN0b3J5T3JkZXJzfSA9IGF3YWl0IGRiLmxvYWRIaXN0b3J5KCdhY2NvdW50SWQnLCAnTWV0YUFwaScpO1xuICAgIGRlYWxzLnNob3VsZC5tYXRjaChbXSk7XG4gICAgaGlzdG9yeU9yZGVycy5zaG91bGQubWF0Y2goW10pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlY29yZCBhbmQgdGhlbiByZWFkIGRiIGNvbnRlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRiLmZsdXNoKCdhY2NvdW50SWQnLCAnTWV0YUFwaScsIFt7aWQ6ICcyJ31dLCBbe2lkOiAnMSd9XSk7XG4gICAgYXdhaXQgZGIuZmx1c2goJ2FjY291bnRJZCcsICdNZXRhQXBpJywgW3tpZDogJzMnfV0sIFt7aWQ6ICcyJ31dKTtcbiAgICBsZXQge2RlYWxzLCBoaXN0b3J5T3JkZXJzfSA9IGF3YWl0IGRiLmxvYWRIaXN0b3J5KCdhY2NvdW50SWQnLCAnTWV0YUFwaScpO1xuICAgIGRlYWxzLnNob3VsZC5tYXRjaChbe2lkOiAnMSd9LCB7aWQ6ICcyJ31dKTtcbiAgICBoaXN0b3J5T3JkZXJzLnNob3VsZC5tYXRjaChbe2lkOiAnMid9LCB7aWQ6ICczJ31dKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmVhZCBkYiBjb250ZW50cyBvbmx5IGZvciBjdXJyZW50IGFjY291bnQgYW5kIGFwcGxpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRiLmZsdXNoKCczMdCwM2M3YjktOTU4Zi00ODI3LTk2ZjktN2QyOTZjOGFkMDNlJywgJ01ldGFBcGknLCBbe2lkOiAnNCd9XSwgW3tpZDogJzUnfV0pO1xuICAgIGF3YWl0IGRiLmZsdXNoKCc5Njc3M2JmZi0yN2Y0LTQwNzAtOTFlZy1kNmJhODI4YWU5MDUxJywgJ01ldGFBcGknLCBbe2lkOiAnMid9XSwgW3tpZDogJzEnfV0pO1xuICAgIGF3YWl0IGRiLmZsdXNoKCc5Njc3M2JmZi0yN2Y0LTQwNzAtOTFlZy1kNmJhODI4YWU5MDUxJywgJ01ldGFBcGknLCBbe2lkOiAnMyd9XSwgW3tpZDogJzInfV0pO1xuICAgIGxldCB7ZGVhbHMsIGhpc3RvcnlPcmRlcnN9ID0gYXdhaXQgZGIubG9hZEhpc3RvcnkoJzMx0LAzYzdiOS05NThmLTQ4MjctOTZmOS03ZDI5NmM4YWQwM2UnLCAnTWV0YUFwaScpO1xuICAgIGRlYWxzLnNob3VsZC5tYXRjaChbe2lkOiAnNSd9XSk7XG4gICAgZGVhbHMubGVuZ3RoLnNob3VsZC5lcWwoMSk7XG4gICAgaGlzdG9yeU9yZGVycy5zaG91bGQubWF0Y2goW3tpZDogJzQnfV0pO1xuICB9KTtcblxufSk7XG4iXX0=