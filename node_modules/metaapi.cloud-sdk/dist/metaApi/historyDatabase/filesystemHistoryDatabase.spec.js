'use strict';

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _filesystemHistoryDatabase = require('./filesystemHistoryDatabase');

var _filesystemHistoryDatabase2 = _interopRequireDefault(_filesystemHistoryDatabase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('FilesystemHistoryDatabase', () => {

  let db;

  before(async () => {
    db = _filesystemHistoryDatabase2.default.getInstance();
  });

  beforeEach(async () => {
    await removeDataFolder();
  });

  async function removeDataFolder() {
    if (!_fs2.default.existsSync('.metaapi')) {
      return;
    }
    let files = await _fs2.default.promises.readdir('.metaapi');
    for (let file of files) {
      if (file === 'logs') {
        let logFiles = await _fs2.default.promises.readdir(_path2.default.join('.metaapi', 'logs'));
        for (let f of logFiles) {
          await _fs2.default.promises.unlink(_path2.default.join('.metaapi', 'logs', f));
        }
        await _fs2.default.promises.rmdir(_path2.default.join('.metaapi', 'logs'));
      } else {
        await _fs2.default.promises.unlink(_path2.default.join('.metaapi', file));
      }
    }
    await _fs2.default.promises.rmdir('.metaapi');
  }

  afterEach(async () => {
    await removeDataFolder();
  });

  it('should read db contents', async () => {
    let dealsData = '{"id":"1"}\n{"id":"2"}\n';
    let historyOrdersData = '{"id":"2"}\n{"id":"3"}\n';
    await _fs2.default.promises.mkdir('.metaapi', { recursive: true });
    await _fs2.default.promises.writeFile(_path2.default.join('.metaapi', 'accountId-MetaApi-deals.bin'), dealsData, 'utf-8');
    await _fs2.default.promises.writeFile(_path2.default.join('.metaapi', 'accountId-MetaApi-historyOrders.bin'), historyOrdersData, 'utf-8');
    let { deals, historyOrders } = await db.loadHistory('accountId', 'MetaApi');
    deals.should.match([{ id: '1' }, { id: '2' }]);
    historyOrders.should.match([{ id: '2' }, { id: '3' }]);
  });

  it('should clear db', async () => {
    let dealsData = '{"id":"1"}\n{"id":"2"}\n';
    let historyOrdersData = '{"id":"2"}\n{"id":"3"}\n';
    await _fs2.default.promises.mkdir('.metaapi', { recursive: true });
    await _fs2.default.promises.writeFile(_path2.default.join('.metaapi', 'accountId-MetaApi-deals.bin'), dealsData, 'utf-8');
    await _fs2.default.promises.writeFile(_path2.default.join('.metaapi', 'accountId-MetaApi-historyOrders.bin'), historyOrdersData, 'utf-8');
    await db.clear('accountId', 'MetaApi');
    let { deals, historyOrders } = await db.loadHistory('accountId', 'MetaApi');
    deals.should.match([]);
    historyOrders.should.match([]);
  });

  it('should flush to db', async () => {
    await db.flush('accountId', 'MetaApi', [{ id: '2' }], [{ id: '1' }]);
    await db.flush('accountId', 'MetaApi', [{ id: '3' }], [{ id: '2' }]);
    let { deals, historyOrders } = await db.loadHistory('accountId', 'MetaApi');
    deals.should.match([{ id: '1' }, { id: '2' }]);
    historyOrders.should.match([{ id: '2' }, { id: '3' }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,