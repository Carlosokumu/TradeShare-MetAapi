'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _historyDatabase = require('./historyDatabase');

var _historyDatabase2 = _interopRequireDefault(_historyDatabase);

var _logger = require('../../logger');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides access to history database stored on filesystem
 */
class FilesystemHistoryDatabase extends _historyDatabase2.default {

  /**
   * Constructs the class instance
   */
  constructor() {
    super();
    this._logger = (0, _logger.getLogger)('FilesystemHistoryDatabase');
  }

  /**
   * Returns history database instance
   * @returns {HistoryDatabase} history database instance
   */
  static getInstance() {
    if (!FilesystemHistoryDatabase.instance) {
      FilesystemHistoryDatabase.instance = new FilesystemHistoryDatabase();
    }
    return FilesystemHistoryDatabase.instance;
  }

  /**
   * Loads history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise<{deals: Array<MetatraderDeal>, historyOrders: Array<MetatraderOrder>}>} full account history
   */
  async loadHistory(accountId, application) {
    let { dealsFile, historyOrdersFile } = await this._getDbLocation(accountId, application);
    let deals = await this._readDb(accountId, dealsFile);
    if (deals.length && Array.isArray(deals[0])) {
      this.clear(accountId, application);
      deals = [];
    }
    deals.forEach(deal => deal.time = new Date(deal.time));
    let historyOrders = await this._readDb(accountId, historyOrdersFile);
    if (historyOrders.length && Array.isArray(historyOrders[0])) {
      this.clear(accountId, application);
      historyOrders = [];
    }
    historyOrders.forEach(historyOrder => {
      historyOrder.time = new Date(historyOrder.time);
      historyOrder.doneTime = new Date(historyOrder.doneTime);
    });
    return { deals, historyOrders };
  }

  /**
   * Removes history from database
   * @param {string} accountId account id
   * @param {string} application application name
   * @return {Promise} promise resolving when the history is removed
   */
  async clear(accountId, application) {
    let { dealsFile, historyOrdersFile } = await this._getDbLocation(accountId, application);
    if (_fs2.default.existsSync(dealsFile)) {
      await _fs2.default.promises.unlink(dealsFile);
    }
    if (_fs2.default.existsSync(historyOrdersFile)) {
      await _fs2.default.promises.unlink(historyOrdersFile);
    }
  }

  /**
   * Flushes the new history to db
   * @param {string} accountId account id
   * @param {string} application application name
   * @param {Array<MetatraderOrder>} newHistoryOrders history orders to save to db
   * @param {Array<MetatraderDeal>} newDeals deals to save to db
   * @return {Promise} promise resolving when the history is flushed
   */
  async flush(accountId, application, newHistoryOrders, newDeals) {
    let { dealsFile, historyOrdersFile } = await this._getDbLocation(accountId, application);
    await this._appendDb(historyOrdersFile, newHistoryOrders);
    await this._appendDb(dealsFile, newDeals);
  }

  async _getDbLocation(accountId, application) {
    let dir = _path2.default.join(process.cwd(), '.metaapi');
    await _fs2.default.promises.mkdir(dir, { recursive: true });
    return {
      dealsFile: _path2.default.join(dir, `${accountId}-${application}-deals.bin`),
      historyOrdersFile: _path2.default.join(dir, `${accountId}-${application}-historyOrders.bin`)
    };
  }

  async _readDb(accountId, file) {
    if (!_fs2.default.existsSync(file)) {
      return [];
    }
    try {
      let data = await _fs2.default.promises.readFile(file, 'utf-8');
      let lines = data.split('\n');
      let result = [];
      for (let line of lines) {
        if (line.length) {
          result.push(JSON.parse(line));
        }
      }
      return result;
    } catch (err) {
      this._logger.warn(`${accountId}: failed to read history db, will remove ${file} now`, err);
      await _fs2.default.promises.unlink(file);
      return [];
    }
  }

  async _appendDb(file, records) {
    if (records && records.length) {
      await _fs2.default.promises.appendFile(file, records.map(r => (0, _stringify2.default)(r) + '\n').join(''), 'utf-8');
    }
  }

}
exports.default = FilesystemHistoryDatabase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,