'use strict';

var _httpClient = require('./httpClient');

var _metaApi = require('./metaApi.client');

var _metaApi2 = _interopRequireDefault(_metaApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const provisioningApiUrl = 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai';

/**
 * @test {MetaApiClient}
 */
describe('MetaApiClient', () => {

  let apiClient;
  const token = 'token';
  const apiToken = 'header.payload.sign';
  let httpClient = new _httpClient.HttpClientMock(() => 'empty');
  let domainClient;

  beforeEach(() => {
    domainClient = {
      token,
      domain: 'agiliumtrade.agiliumtrade.ai',
      getUrl: () => {}
    };
    apiClient = new _metaApi2.default(httpClient, domainClient);
  });

  it('should return account token type', () => {
    apiClient._tokenType.should.equal('account');
  });

  it('should return api token type', () => {
    domainClient.token = apiToken;
    apiClient = new _metaApi2.default(httpClient, domainClient);
    apiClient._tokenType.should.equal('api');
  });

  it('should check that current token is not JWT', () => {
    apiClient._isNotJwtToken().should.equal(true);
  });

  it('should check that current token is not account token', () => {
    domainClient.token = apiToken;
    apiClient = new _metaApi2.default(httpClient, domainClient);
    apiClient._isNotAccountToken().should.equal(true);
  });

  it('should handle no access error with account token', async () => {
    try {
      await apiClient._handleNoAccessError('methodName');
      sinon.assert.fail();
    } catch (error) {
      error.message.should.equal('You can not invoke methodName method, because you have connected with account access token. ' + 'Please use API access token from https://app.metaapi.cloud/token page to invoke this method.');
    }
  });

  it('should handle no access error with api token', async () => {
    domainClient.token = apiToken;
    apiClient = new _metaApi2.default(httpClient, domainClient);
    try {
      await apiClient._handleNoAccessError('methodName');
      sinon.assert.fail();
    } catch (error) {
      error.message.should.equal('You can not invoke methodName method, because you have connected with API access token. ' + 'Please use account access token to invoke this method.');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFBcGkuY2xpZW50LnNwZWMuZXM2Il0sIm5hbWVzIjpbInByb3Zpc2lvbmluZ0FwaVVybCIsImRlc2NyaWJlIiwiYXBpQ2xpZW50IiwidG9rZW4iLCJhcGlUb2tlbiIsImh0dHBDbGllbnQiLCJIdHRwQ2xpZW50TW9jayIsImRvbWFpbkNsaWVudCIsImJlZm9yZUVhY2giLCJkb21haW4iLCJnZXRVcmwiLCJNZXRhQXBpQ2xpZW50IiwiaXQiLCJfdG9rZW5UeXBlIiwic2hvdWxkIiwiZXF1YWwiLCJfaXNOb3RKd3RUb2tlbiIsIl9pc05vdEFjY291bnRUb2tlbiIsIl9oYW5kbGVOb0FjY2Vzc0Vycm9yIiwic2lub24iLCJhc3NlcnQiLCJmYWlsIiwiZXJyb3IiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEscUJBQXFCLDZEQUEzQjs7QUFFQTs7O0FBR0FDLFNBQVMsZUFBVCxFQUEwQixNQUFNOztBQUU5QixNQUFJQyxTQUFKO0FBQ0EsUUFBTUMsUUFBUSxPQUFkO0FBQ0EsUUFBTUMsV0FBVyxxQkFBakI7QUFDQSxNQUFJQyxhQUFhLElBQUlDLDBCQUFKLENBQW1CLE1BQU0sT0FBekIsQ0FBakI7QUFDQSxNQUFJQyxZQUFKOztBQUVBQyxhQUFXLE1BQU07QUFDZkQsbUJBQWU7QUFDYkosV0FEYTtBQUViTSxjQUFRLDhCQUZLO0FBR2JDLGNBQVEsTUFBTSxDQUFFO0FBSEgsS0FBZjtBQUtBUixnQkFBWSxJQUFJUyxpQkFBSixDQUFrQk4sVUFBbEIsRUFBOEJFLFlBQTlCLENBQVo7QUFDRCxHQVBEOztBQVNBSyxLQUFHLGtDQUFILEVBQXVDLE1BQU07QUFDM0NWLGNBQVVXLFVBQVYsQ0FBcUJDLE1BQXJCLENBQTRCQyxLQUE1QixDQUFrQyxTQUFsQztBQUNELEdBRkQ7O0FBSUFILEtBQUcsOEJBQUgsRUFBbUMsTUFBTTtBQUN2Q0wsaUJBQWFKLEtBQWIsR0FBcUJDLFFBQXJCO0FBQ0FGLGdCQUFZLElBQUlTLGlCQUFKLENBQWtCTixVQUFsQixFQUE4QkUsWUFBOUIsQ0FBWjtBQUNBTCxjQUFVVyxVQUFWLENBQXFCQyxNQUFyQixDQUE0QkMsS0FBNUIsQ0FBa0MsS0FBbEM7QUFDRCxHQUpEOztBQU1BSCxLQUFHLDRDQUFILEVBQWlELE1BQU07QUFDckRWLGNBQVVjLGNBQVYsR0FBMkJGLE1BQTNCLENBQWtDQyxLQUFsQyxDQUF3QyxJQUF4QztBQUNELEdBRkQ7O0FBSUFILEtBQUcsc0RBQUgsRUFBMkQsTUFBTTtBQUMvREwsaUJBQWFKLEtBQWIsR0FBcUJDLFFBQXJCO0FBQ0FGLGdCQUFZLElBQUlTLGlCQUFKLENBQWtCTixVQUFsQixFQUE4QkUsWUFBOUIsQ0FBWjtBQUNBTCxjQUFVZSxrQkFBVixHQUErQkgsTUFBL0IsQ0FBc0NDLEtBQXRDLENBQTRDLElBQTVDO0FBQ0QsR0FKRDs7QUFNQUgsS0FBRyxrREFBSCxFQUF1RCxZQUFZO0FBQ2pFLFFBQUk7QUFDRixZQUFNVixVQUFVZ0Isb0JBQVYsQ0FBK0IsWUFBL0IsQ0FBTjtBQUNBQyxZQUFNQyxNQUFOLENBQWFDLElBQWI7QUFDRCxLQUhELENBR0UsT0FBT0MsS0FBUCxFQUFjO0FBQ2RBLFlBQU1DLE9BQU4sQ0FBY1QsTUFBZCxDQUFxQkMsS0FBckIsQ0FDRSxpR0FDQSw4RkFGRjtBQUlEO0FBQ0YsR0FWRDs7QUFZQUgsS0FBRyw4Q0FBSCxFQUFtRCxZQUFZO0FBQzdETCxpQkFBYUosS0FBYixHQUFxQkMsUUFBckI7QUFDQUYsZ0JBQVksSUFBSVMsaUJBQUosQ0FBa0JOLFVBQWxCLEVBQThCRSxZQUE5QixDQUFaO0FBQ0EsUUFBSTtBQUNGLFlBQU1MLFVBQVVnQixvQkFBVixDQUErQixZQUEvQixDQUFOO0FBQ0FDLFlBQU1DLE1BQU4sQ0FBYUMsSUFBYjtBQUNELEtBSEQsQ0FHRSxPQUFPQyxLQUFQLEVBQWM7QUFDZEEsWUFBTUMsT0FBTixDQUFjVCxNQUFkLENBQXFCQyxLQUFyQixDQUNFLDZGQUNBLHdEQUZGO0FBSUQ7QUFDRixHQVpEO0FBY0QsQ0EvREQiLCJmaWxlIjoibWV0YUFwaS5jbGllbnQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtIdHRwQ2xpZW50TW9ja30gZnJvbSAnLi9odHRwQ2xpZW50JztcbmltcG9ydCBNZXRhQXBpQ2xpZW50IGZyb20gJy4vbWV0YUFwaS5jbGllbnQnO1xuXG5jb25zdCBwcm92aXNpb25pbmdBcGlVcmwgPSAnaHR0cHM6Ly9tdC1wcm92aXNpb25pbmctYXBpLXYxLmFnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknO1xuXG4vKipcbiAqIEB0ZXN0IHtNZXRhQXBpQ2xpZW50fVxuICovXG5kZXNjcmliZSgnTWV0YUFwaUNsaWVudCcsICgpID0+IHtcblxuICBsZXQgYXBpQ2xpZW50O1xuICBjb25zdCB0b2tlbiA9ICd0b2tlbic7XG4gIGNvbnN0IGFwaVRva2VuID0gJ2hlYWRlci5wYXlsb2FkLnNpZ24nO1xuICBsZXQgaHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50TW9jaygoKSA9PiAnZW1wdHknKTtcbiAgbGV0IGRvbWFpbkNsaWVudDtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBkb21haW5DbGllbnQgPSB7XG4gICAgICB0b2tlbixcbiAgICAgIGRvbWFpbjogJ2FnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknLFxuICAgICAgZ2V0VXJsOiAoKSA9PiB7fVxuICAgIH07XG4gICAgYXBpQ2xpZW50ID0gbmV3IE1ldGFBcGlDbGllbnQoaHR0cENsaWVudCwgZG9tYWluQ2xpZW50KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYWNjb3VudCB0b2tlbiB0eXBlJywgKCkgPT4ge1xuICAgIGFwaUNsaWVudC5fdG9rZW5UeXBlLnNob3VsZC5lcXVhbCgnYWNjb3VudCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBhcGkgdG9rZW4gdHlwZScsICgpID0+IHtcbiAgICBkb21haW5DbGllbnQudG9rZW4gPSBhcGlUb2tlbjtcbiAgICBhcGlDbGllbnQgPSBuZXcgTWV0YUFwaUNsaWVudChodHRwQ2xpZW50LCBkb21haW5DbGllbnQpO1xuICAgIGFwaUNsaWVudC5fdG9rZW5UeXBlLnNob3VsZC5lcXVhbCgnYXBpJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2hlY2sgdGhhdCBjdXJyZW50IHRva2VuIGlzIG5vdCBKV1QnLCAoKSA9PiB7XG4gICAgYXBpQ2xpZW50Ll9pc05vdEp3dFRva2VuKCkuc2hvdWxkLmVxdWFsKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNoZWNrIHRoYXQgY3VycmVudCB0b2tlbiBpcyBub3QgYWNjb3VudCB0b2tlbicsICgpID0+IHtcbiAgICBkb21haW5DbGllbnQudG9rZW4gPSBhcGlUb2tlbjtcbiAgICBhcGlDbGllbnQgPSBuZXcgTWV0YUFwaUNsaWVudChodHRwQ2xpZW50LCBkb21haW5DbGllbnQpO1xuICAgIGFwaUNsaWVudC5faXNOb3RBY2NvdW50VG9rZW4oKS5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIG5vIGFjY2VzcyBlcnJvciB3aXRoIGFjY291bnQgdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGFwaUNsaWVudC5faGFuZGxlTm9BY2Nlc3NFcnJvcignbWV0aG9kTmFtZScpO1xuICAgICAgc2lub24uYXNzZXJ0LmZhaWwoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3IubWVzc2FnZS5zaG91bGQuZXF1YWwoXG4gICAgICAgICdZb3UgY2FuIG5vdCBpbnZva2UgbWV0aG9kTmFtZSBtZXRob2QsIGJlY2F1c2UgeW91IGhhdmUgY29ubmVjdGVkIHdpdGggYWNjb3VudCBhY2Nlc3MgdG9rZW4uICcgK1xuICAgICAgICAnUGxlYXNlIHVzZSBBUEkgYWNjZXNzIHRva2VuIGZyb20gaHR0cHM6Ly9hcHAubWV0YWFwaS5jbG91ZC90b2tlbiBwYWdlIHRvIGludm9rZSB0aGlzIG1ldGhvZC4nXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gYWNjZXNzIGVycm9yIHdpdGggYXBpIHRva2VuJywgYXN5bmMgKCkgPT4ge1xuICAgIGRvbWFpbkNsaWVudC50b2tlbiA9IGFwaVRva2VuO1xuICAgIGFwaUNsaWVudCA9IG5ldyBNZXRhQXBpQ2xpZW50KGh0dHBDbGllbnQsIGRvbWFpbkNsaWVudCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGFwaUNsaWVudC5faGFuZGxlTm9BY2Nlc3NFcnJvcignbWV0aG9kTmFtZScpO1xuICAgICAgc2lub24uYXNzZXJ0LmZhaWwoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3IubWVzc2FnZS5zaG91bGQuZXF1YWwoXG4gICAgICAgICdZb3UgY2FuIG5vdCBpbnZva2UgbWV0aG9kTmFtZSBtZXRob2QsIGJlY2F1c2UgeW91IGhhdmUgY29ubmVjdGVkIHdpdGggQVBJIGFjY2VzcyB0b2tlbi4gJyArXG4gICAgICAgICdQbGVhc2UgdXNlIGFjY291bnQgYWNjZXNzIHRva2VuIHRvIGludm9rZSB0aGlzIG1ldGhvZC4nXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbn0pOyJdfQ==