'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Connection URL managing client
 */
class DomainClient {

  /**
   * Constructs domain client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {String} token authorization token
   * @param {String} domain domain to connect to, default is agiliumtrade.agiliumtrade.ai
   */
  constructor(httpClient, token, domain = 'agiliumtrade.agiliumtrade.ai') {
    this._httpClient = httpClient;
    this._domain = domain;
    this._token = token;
    this._urlCache = {
      domain: null,
      hostname: null,
      requestPromise: null,
      lastUpdated: 0
    };
    this._retryIntervalInSeconds = 1;
    this._logger = _logger2.default.getLogger('DomainClient');
  }

  /**
   * Returns domain client domain
   * @returns {String} client domain
   */
  get domain() {
    return this._domain;
  }

  /**
   * Returns domain client token
   * @returns {String} client token
   */
  get token() {
    return this._token;
  }

  /**
   * Returns the API URL
   * @param {String} host REST API host
   * @param {String} region host region
   * @returns {String} API URL
   */
  async getUrl(host, region) {
    await this._updateDomain();
    return `${host}.${region}.${this._urlCache.domain}`;
  }

  /**
   * Domain settings
   * @typedef {Object} DomainSettings
   * @property {String} hostname client api host name
   * @property {String} domain client api domain for regions
   */

  /**
   * Returns domain settings
   * @returns {DomainSettings} domain settings
   */
  async getSettings() {
    await this._updateDomain();
    return { domain: this._urlCache.domain, hostname: this._urlCache.hostname };
  }

  async _updateDomain() {
    if (!this._urlCache.domain || this._urlCache.lastUpdated < Date.now() - 1000 * 60 * 10) {
      if (this._urlCache.requestPromise) {
        await this._urlCache.requestPromise;
      } else {
        let resolve, reject;
        this._urlCache.requestPromise = new _promise2.default((res, rej) => {
          resolve = res, reject = rej;
        });
        let isCacheUpdated = false;
        while (!isCacheUpdated) {
          const opts = {
            url: `https://mt-provisioning-api-v1.${this._domain}/users/current/servers/mt-client-api`,
            method: 'GET',
            headers: {
              'auth-token': this._token
            },
            json: true
          };

          try {
            const urlSettings = await this._httpClient.request(opts, '_updateDomain');
            this._urlCache = {
              domain: urlSettings.domain,
              hostname: urlSettings.hostname,
              requestPromise: null,
              lastUpdated: Date.now()
            };
            resolve();
            isCacheUpdated = true;
            this._retryIntervalInSeconds = 1;
          } catch (err) {
            this._logger.error('Failed to update domain settings cache', err);
            this._retryIntervalInSeconds = Math.min(this._retryIntervalInSeconds * 2, 300);
            await new _promise2.default(res => setTimeout(res, this._retryIntervalInSeconds * 1000));
          }
        }
      }
    }
  }

}
exports.default = DomainClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL2RvbWFpbi5jbGllbnQuZXM2Il0sIm5hbWVzIjpbIkRvbWFpbkNsaWVudCIsImNvbnN0cnVjdG9yIiwiaHR0cENsaWVudCIsInRva2VuIiwiZG9tYWluIiwiX2h0dHBDbGllbnQiLCJfZG9tYWluIiwiX3Rva2VuIiwiX3VybENhY2hlIiwiaG9zdG5hbWUiLCJyZXF1ZXN0UHJvbWlzZSIsImxhc3RVcGRhdGVkIiwiX3JldHJ5SW50ZXJ2YWxJblNlY29uZHMiLCJfbG9nZ2VyIiwiTG9nZ2VyTWFuYWdlciIsImdldExvZ2dlciIsImdldFVybCIsImhvc3QiLCJyZWdpb24iLCJfdXBkYXRlRG9tYWluIiwiZ2V0U2V0dGluZ3MiLCJEYXRlIiwibm93IiwicmVzb2x2ZSIsInJlamVjdCIsInJlcyIsInJlaiIsImlzQ2FjaGVVcGRhdGVkIiwib3B0cyIsInVybCIsIm1ldGhvZCIsImhlYWRlcnMiLCJqc29uIiwidXJsU2V0dGluZ3MiLCJyZXF1ZXN0IiwiZXJyIiwiZXJyb3IiLCJNYXRoIiwibWluIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7O0FBRUE7OztBQUdlLE1BQU1BLFlBQU4sQ0FBbUI7O0FBRWhDOzs7Ozs7QUFNQUMsY0FBWUMsVUFBWixFQUF3QkMsS0FBeEIsRUFBK0JDLFNBQVMsOEJBQXhDLEVBQXdFO0FBQ3RFLFNBQUtDLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksT0FBTCxHQUFlRixNQUFmO0FBQ0EsU0FBS0csTUFBTCxHQUFjSixLQUFkO0FBQ0EsU0FBS0ssU0FBTCxHQUFpQjtBQUNmSixjQUFRLElBRE87QUFFZkssZ0JBQVUsSUFGSztBQUdmQyxzQkFBZ0IsSUFIRDtBQUlmQyxtQkFBYTtBQUpFLEtBQWpCO0FBTUEsU0FBS0MsdUJBQUwsR0FBK0IsQ0FBL0I7QUFDQSxTQUFLQyxPQUFMLEdBQWVDLGlCQUFjQyxTQUFkLENBQXdCLGNBQXhCLENBQWY7QUFDRDs7QUFFRDs7OztBQUlBLE1BQUlYLE1BQUosR0FBYTtBQUNYLFdBQU8sS0FBS0UsT0FBWjtBQUNEOztBQUVEOzs7O0FBSUEsTUFBSUgsS0FBSixHQUFZO0FBQ1YsV0FBTyxLQUFLSSxNQUFaO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLFFBQU1TLE1BQU4sQ0FBYUMsSUFBYixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDekIsVUFBTSxLQUFLQyxhQUFMLEVBQU47QUFDQSxXQUFRLEdBQUVGLElBQUssSUFBR0MsTUFBTyxJQUFHLEtBQUtWLFNBQUwsQ0FBZUosTUFBTyxFQUFsRDtBQUNEOztBQUVEOzs7Ozs7O0FBT0E7Ozs7QUFJQSxRQUFNZ0IsV0FBTixHQUFvQjtBQUNsQixVQUFNLEtBQUtELGFBQUwsRUFBTjtBQUNBLFdBQU8sRUFBQ2YsUUFBUSxLQUFLSSxTQUFMLENBQWVKLE1BQXhCLEVBQWdDSyxVQUFVLEtBQUtELFNBQUwsQ0FBZUMsUUFBekQsRUFBUDtBQUNEOztBQUVELFFBQU1VLGFBQU4sR0FBc0I7QUFDcEIsUUFBRyxDQUFDLEtBQUtYLFNBQUwsQ0FBZUosTUFBaEIsSUFBMEIsS0FBS0ksU0FBTCxDQUFlRyxXQUFmLEdBQTZCVSxLQUFLQyxHQUFMLEtBQWEsT0FBTyxFQUFQLEdBQVksRUFBbkYsRUFBdUY7QUFDckYsVUFBRyxLQUFLZCxTQUFMLENBQWVFLGNBQWxCLEVBQWtDO0FBQ2hDLGNBQU0sS0FBS0YsU0FBTCxDQUFlRSxjQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMLFlBQUlhLE9BQUosRUFBYUMsTUFBYjtBQUNBLGFBQUtoQixTQUFMLENBQWVFLGNBQWYsR0FBZ0Msc0JBQVksQ0FBQ2UsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDeERILG9CQUFVRSxHQUFWLEVBQWVELFNBQVNFLEdBQXhCO0FBQ0QsU0FGK0IsQ0FBaEM7QUFHQSxZQUFJQyxpQkFBaUIsS0FBckI7QUFDQSxlQUFNLENBQUNBLGNBQVAsRUFBdUI7QUFDckIsZ0JBQU1DLE9BQU87QUFDWEMsaUJBQU0sa0NBQWlDLEtBQUt2QixPQUFRLHNDQUR6QztBQUVYd0Isb0JBQVEsS0FGRztBQUdYQyxxQkFBUztBQUNQLDRCQUFjLEtBQUt4QjtBQURaLGFBSEU7QUFNWHlCLGtCQUFNO0FBTkssV0FBYjs7QUFTQSxjQUFJO0FBQ0Ysa0JBQU1DLGNBQWMsTUFBTSxLQUFLNUIsV0FBTCxDQUFpQjZCLE9BQWpCLENBQXlCTixJQUF6QixFQUErQixlQUEvQixDQUExQjtBQUNBLGlCQUFLcEIsU0FBTCxHQUFpQjtBQUNmSixzQkFBUTZCLFlBQVk3QixNQURMO0FBRWZLLHdCQUFVd0IsWUFBWXhCLFFBRlA7QUFHZkMsOEJBQWdCLElBSEQ7QUFJZkMsMkJBQWFVLEtBQUtDLEdBQUw7QUFKRSxhQUFqQjtBQU1BQztBQUNBSSw2QkFBaUIsSUFBakI7QUFDQSxpQkFBS2YsdUJBQUwsR0FBK0IsQ0FBL0I7QUFDRCxXQVhELENBV0UsT0FBT3VCLEdBQVAsRUFBWTtBQUNaLGlCQUFLdEIsT0FBTCxDQUFhdUIsS0FBYixDQUFtQix3Q0FBbkIsRUFBNkRELEdBQTdEO0FBQ0EsaUJBQUt2Qix1QkFBTCxHQUErQnlCLEtBQUtDLEdBQUwsQ0FBUyxLQUFLMUIsdUJBQUwsR0FBK0IsQ0FBeEMsRUFBMkMsR0FBM0MsQ0FBL0I7QUFDQSxrQkFBTSxzQkFBWWEsT0FBT2MsV0FBV2QsR0FBWCxFQUFnQixLQUFLYix1QkFBTCxHQUErQixJQUEvQyxDQUFuQixDQUFOO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUF4RytCO2tCQUFiWixZIiwiZmlsZSI6ImRvbWFpbi5jbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBMb2dnZXJNYW5hZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbi8qKlxuICogQ29ubmVjdGlvbiBVUkwgbWFuYWdpbmcgY2xpZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbWFpbkNsaWVudCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgZG9tYWluIGNsaWVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0h0dHBDbGllbnR9IGh0dHBDbGllbnQgSFRUUCBjbGllbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIGF1dGhvcml6YXRpb24gdG9rZW5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBkb21haW4gdG8gY29ubmVjdCB0bywgZGVmYXVsdCBpcyBhZ2lsaXVtdHJhZGUuYWdpbGl1bXRyYWRlLmFpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihodHRwQ2xpZW50LCB0b2tlbiwgZG9tYWluID0gJ2FnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknKSB7XG4gICAgdGhpcy5faHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XG4gICAgdGhpcy5fZG9tYWluID0gZG9tYWluO1xuICAgIHRoaXMuX3Rva2VuID0gdG9rZW47XG4gICAgdGhpcy5fdXJsQ2FjaGUgPSB7XG4gICAgICBkb21haW46IG51bGwsXG4gICAgICBob3N0bmFtZTogbnVsbCxcbiAgICAgIHJlcXVlc3RQcm9taXNlOiBudWxsLFxuICAgICAgbGFzdFVwZGF0ZWQ6IDBcbiAgICB9O1xuICAgIHRoaXMuX3JldHJ5SW50ZXJ2YWxJblNlY29uZHMgPSAxO1xuICAgIHRoaXMuX2xvZ2dlciA9IExvZ2dlck1hbmFnZXIuZ2V0TG9nZ2VyKCdEb21haW5DbGllbnQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGRvbWFpbiBjbGllbnQgZG9tYWluXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IGNsaWVudCBkb21haW5cbiAgICovXG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGRvbWFpbiBjbGllbnQgdG9rZW5cbiAgICogQHJldHVybnMge1N0cmluZ30gY2xpZW50IHRva2VuXG4gICAqL1xuICBnZXQgdG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEFQSSBVUkxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGhvc3QgUkVTVCBBUEkgaG9zdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVnaW9uIGhvc3QgcmVnaW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IEFQSSBVUkxcbiAgICovXG4gIGFzeW5jIGdldFVybChob3N0LCByZWdpb24pIHtcbiAgICBhd2FpdCB0aGlzLl91cGRhdGVEb21haW4oKTtcbiAgICByZXR1cm4gYCR7aG9zdH0uJHtyZWdpb259LiR7dGhpcy5fdXJsQ2FjaGUuZG9tYWlufWA7XG4gIH1cblxuICAvKipcbiAgICogRG9tYWluIHNldHRpbmdzXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IERvbWFpblNldHRpbmdzXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBob3N0bmFtZSBjbGllbnQgYXBpIGhvc3QgbmFtZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gZG9tYWluIGNsaWVudCBhcGkgZG9tYWluIGZvciByZWdpb25zXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGRvbWFpbiBzZXR0aW5nc1xuICAgKiBAcmV0dXJucyB7RG9tYWluU2V0dGluZ3N9IGRvbWFpbiBzZXR0aW5nc1xuICAgKi9cbiAgYXN5bmMgZ2V0U2V0dGluZ3MoKSB7XG4gICAgYXdhaXQgdGhpcy5fdXBkYXRlRG9tYWluKCk7XG4gICAgcmV0dXJuIHtkb21haW46IHRoaXMuX3VybENhY2hlLmRvbWFpbiwgaG9zdG5hbWU6IHRoaXMuX3VybENhY2hlLmhvc3RuYW1lfTtcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVEb21haW4oKSB7XG4gICAgaWYoIXRoaXMuX3VybENhY2hlLmRvbWFpbiB8fCB0aGlzLl91cmxDYWNoZS5sYXN0VXBkYXRlZCA8IERhdGUubm93KCkgLSAxMDAwICogNjAgKiAxMCkge1xuICAgICAgaWYodGhpcy5fdXJsQ2FjaGUucmVxdWVzdFByb21pc2UpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fdXJsQ2FjaGUucmVxdWVzdFByb21pc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcmVzb2x2ZSwgcmVqZWN0O1xuICAgICAgICB0aGlzLl91cmxDYWNoZS5yZXF1ZXN0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICAgIHJlc29sdmUgPSByZXMsIHJlamVjdCA9IHJlajtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBpc0NhY2hlVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICB3aGlsZSghaXNDYWNoZVVwZGF0ZWQpIHtcbiAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly9tdC1wcm92aXNpb25pbmctYXBpLXYxLiR7dGhpcy5fZG9tYWlufS91c2Vycy9jdXJyZW50L3NlcnZlcnMvbXQtY2xpZW50LWFwaWAsXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnYXV0aC10b2tlbic6IHRoaXMuX3Rva2VuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICB9O1xuICBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdXJsU2V0dGluZ3MgPSBhd2FpdCB0aGlzLl9odHRwQ2xpZW50LnJlcXVlc3Qob3B0cywgJ191cGRhdGVEb21haW4nKTtcbiAgICAgICAgICAgIHRoaXMuX3VybENhY2hlID0ge1xuICAgICAgICAgICAgICBkb21haW46IHVybFNldHRpbmdzLmRvbWFpbixcbiAgICAgICAgICAgICAgaG9zdG5hbWU6IHVybFNldHRpbmdzLmhvc3RuYW1lLFxuICAgICAgICAgICAgICByZXF1ZXN0UHJvbWlzZTogbnVsbCxcbiAgICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IERhdGUubm93KClcbiAgICAgICAgICAgIH07IFxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgaXNDYWNoZVVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fcmV0cnlJbnRlcnZhbEluU2Vjb25kcyA9IDE7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgZG9tYWluIHNldHRpbmdzIGNhY2hlJywgZXJyKTtcbiAgICAgICAgICAgIHRoaXMuX3JldHJ5SW50ZXJ2YWxJblNlY29uZHMgPSBNYXRoLm1pbih0aGlzLl9yZXRyeUludGVydmFsSW5TZWNvbmRzICogMiwgMzAwKTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgdGhpcy5fcmV0cnlJbnRlcnZhbEluU2Vjb25kcyAqIDEwMDApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufSJdfQ==