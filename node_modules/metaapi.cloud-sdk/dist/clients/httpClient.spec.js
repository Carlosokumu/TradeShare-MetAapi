'use strict';

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _httpClient = require('./httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _errorHandler = require('./errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {HttpClient#request}
 */
describe('HttpClient#request', () => {

  let httpClient;

  /**
   * @test {HttpClient#request}
   */
  describe('Real request', () => {

    beforeEach(() => {
      httpClient = new _httpClient2.default();
    });

    /**
     * @test {HttpClient#request}
     */
    it('should load HTML page from example.com', async () => {
      const opts = { url: 'http://example.com' };
      const response = await httpClient.request(opts);
      response.should.match(/doctype html/);
    });

    /**
     * @test {HttpClient#request}
     */
    it('should return NotFound error if server returns 404', async () => {
      let opts = { url: 'http://example.com/not-found' };
      try {
        const response = await httpClient.request(opts);
        _should2.default.not.exist(response);
      } catch (err) {
        err.name.should.be.eql('NotFoundError');
      }
    });

    /**
     * @test {HttpClient#request}
     */
    it('should return timeout error if request is timed out', async () => {
      httpClient = new _httpClient2.default(0.001, { retries: 2 });
      let opts = { url: 'http://metaapi.cloud' };
      try {
        const response = await httpClient.request(opts);
        _should2.default.not.exist(response);
      } catch (err) {
        err.name.should.be.eql('ApiError');
        err.message.should.be.equalOneOf('ETIMEDOUT', 'ESOCKETTIMEDOUT');
      }
    }).timeout(10000);
  });

  /**
   * @test {HttpClient#request}
   */
  describe('Retry request', () => {

    const opts = { url: 'http://metaapi.cloud' };
    let sandbox, stub, clock;

    before(() => {
      sandbox = _sinon2.default.createSandbox();
    });

    beforeEach(() => {
      stub = sandbox.stub();
      httpClient = new _httpClient.HttpClientMock(stub);
      clock = sandbox.useFakeTimers({
        shouldAdvanceTime: true,
        now: new Date('2020-10-05T07:00:00.000Z')
      });
    });

    afterEach(() => {
      sandbox.restore();
      clock.restore();
    });

    /**
     * @test {HttpClient#request}
     */
    describe('when InternalError or ApiError error occured', () => {

      /**
       * @test {HttpClient#request}
       */
      it('should retry request on fail with ApiError error', async () => {
        stub.onFirstCall().rejects(new _errorHandler.ApiError(_errorHandler.ApiError, 'test')).onSecondCall().rejects(new _errorHandler.ApiError(_errorHandler.ApiError, 'test')).onThirdCall().resolves('response');
        clock.tickAsync(5000);
        const response = await httpClient.request(opts);
        response.should.match('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should retry request on fail with InternalError error', async () => {
        stub.onFirstCall().rejects(new _errorHandler.InternalError('test')).onSecondCall().rejects(new _errorHandler.InternalError('test')).onThirdCall().resolves('response');
        clock.tickAsync(5000);
        const response = await httpClient.request(opts);
        response.should.match('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should return error if retry limit exceeded', async () => {
        stub.rejects(new _errorHandler.ApiError(_errorHandler.ApiError, 'test'));
        httpClient = new _httpClient.HttpClientMock(stub, 60, { retries: 2 });
        try {
          clock.tickAsync(5000);
          const response = await httpClient.request(opts);
          _should2.default.not.exist(response);
        } catch (err) {
          err.name.should.eql('ApiError');
          err.message.should.eql('test');
        }
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should not retry if error is neither InternalError nor ApiError', async () => {
        stub.onFirstCall().rejects(new _errorHandler.ValidationError('test')).onSecondCall().rejects(new _errorHandler.ValidationError('test')).onThirdCall().resolves('response');
        try {
          clock.tickAsync(5000);
          const response = await httpClient.request(opts);
          _should2.default.not.exist(response);
        } catch (err) {
          err.name.should.eql('ValidationError');
          err.message.should.eql('test');
        }
        _sinon2.default.assert.calledOnce(stub);
      }).timeout(10000);
    });

    /**
     * @test {HttpClient#request}
     */
    describe('when TooManyRequestsError error occured', () => {

      const getTooManyRequestsError = sec => {
        const date = new Date();
        date.setSeconds(date.getSeconds() + sec);
        const recommendedRetryTime = date.toUTCString();
        return new _errorHandler.TooManyRequestsError('test', { recommendedRetryTime });
      };

      /**
       * @test {HttpClient#request}
       */
      it('should retry request after waiting on fail with TooManyRequestsError error', async () => {
        stub.onFirstCall().rejects(getTooManyRequestsError(2)).onSecondCall().rejects(getTooManyRequestsError(3)).onThirdCall().resolves('response');
        clock.tickAsync(5000);
        const response = await httpClient.request(opts);
        response.should.eql('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should return error if recommended retry time is too long', async () => {
        stub.onFirstCall().rejects(getTooManyRequestsError(2)).onSecondCall().rejects(getTooManyRequestsError(300)).onThirdCall().resolves('response');
        try {
          clock.tickAsync(5000);
          const response = await httpClient.request(opts);
          _should2.default.not.exist(response);
        } catch (err) {
          err.name.should.eql('TooManyRequestsError');
          err.message.should.eql('test');
        }
        _sinon2.default.assert.calledTwice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should not count retrying TooManyRequestsError error', async () => {
        stub.onFirstCall().rejects(getTooManyRequestsError(1)).onSecondCall().rejects(new _errorHandler.ApiError(_errorHandler.ApiError, 'test')).onThirdCall().resolves('response');
        httpClient = new _httpClient.HttpClientMock(stub, 60, { retries: 1 });
        clock.tickAsync(5000);
        const response = await httpClient.request(opts);
        response.should.eql('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);
    });

    /**
     * @test {HttpClient#request}
     */
    describe('when status 202 response received', () => {

      /**
       * @test {HttpClient#request}
       */
      it('should wait for the retry-after header time before retrying', async () => {
        stub.callsFake(options => {
          options.callback(null, { headers: { 'retry-after': 3 }, statusCode: 202 });
        }).onThirdCall().resolves('response');
        clock.tickAsync(5000);
        const response = await httpClient.request(opts);
        response.should.eql('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should wait for the retry-after header time before retrying if header is in http time', async () => {
        stub.callsFake(options => {
          options.callback(null, { headers: { 'retry-after': 'Mon, 05 Oct 2020 07:00:02 GMT' },
            statusCode: 202 });
        }).onThirdCall().resolves('response');
        clock.tickAsync(3000);
        const response = await httpClient.request(opts);
        response.should.eql('response');
        _sinon2.default.assert.calledThrice(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should return TimeoutError error if retry-after header time is too long', async () => {
        stub.callsFake(options => {
          options.callback(null, { headers: { 'retry-after': 30 }, statusCode: 202 });
        });
        httpClient = new _httpClient.HttpClientMock(stub, 60, { maxDelayInSeconds: 3 });
        try {
          await httpClient.request(opts);
          _should2.default.not.exist('Should not exist this assertion');
        } catch (err) {
          err.name.should.eql('TimeoutError');
          err.message.should.eql('Timed out waiting for the response');
        }
        _sinon2.default.assert.calledOnce(stub);
      }).timeout(10000);

      /**
       * @test {HttpClient#request}
       */
      it('should return TimeoutError error if timed out to retry', async () => {
        stub.callsFake(options => {
          options.callback(null, { headers: { 'retry-after': 1 }, statusCode: 202 });
        });
        httpClient = new _httpClient.HttpClientMock(stub, 60, { maxDelayInSeconds: 2, retries: 3 });
        try {
          clock.tickAsync(5000);
          await httpClient.request(opts);
          _should2.default.not.exist('Should not exist this assertion');
        } catch (err) {
          err.name.should.eql('TimeoutError');
          err.message.should.eql('Timed out waiting for the response');
        }
        _sinon2.default.assert.callCount(stub, 6);
      }).timeout(10000);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,