'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('../httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _clientApi = require('./clientApi.client');

var _clientApi2 = _interopRequireDefault(_clientApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const clientApiUrl = 'https://mt-client-api-v1.agiliumtrade.agiliumtrade.ai';

/**
 * @test {ClientApiClient}
 */
describe('ClientApiClient', () => {

  let clientApiClient;
  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let domainClient;
  let sandbox;
  let requestStub;
  let clock;

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    domainClient = {
      token,
      domain: 'agiliumtrade.agiliumtrade.ai',
      getUrl: () => {}
    };
    requestStub = sandbox.stub(httpClient, 'request');
    sandbox.stub(domainClient, 'getUrl').resolves(clientApiUrl);
    clientApiClient = new _clientApi2.default(httpClient, domainClient);
    clock = sandbox.useFakeTimers({
      shouldAdvanceTime: true,
      now: new Date('2020-10-05T07:00:00.000Z')
    });
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  describe('getHashingIgnoredFieldLists', () => {

    let expected;
    beforeEach(() => {
      expected = {
        g1: {
          specification: ['description'],
          position: ['time'],
          order: ['expirationTime']
        },
        g2: {
          specification: ['pipSize'],
          position: ['comment'],
          order: ['brokerComment']
        }
      };
    });

    /**
     * @test {ClientApiClient#getHashingIgnoredFieldLists}
     */
    it('should retrieve hashing ignored field lists', async () => {
      requestStub.resolves(expected);
      let ignoredFields = await clientApiClient.getHashingIgnoredFieldLists();
      ignoredFields.should.equal(expected);
      _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
        url: `${clientApiUrl}/hashing-ignored-field-lists`,
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }, 'getHashingIgnoredFieldLists');
    });

    /**
     * @test {ClientApiClient#getHashingIgnoredFieldLists}
     */
    it('should return cached data if requested recently', async () => {
      requestStub.resolves(expected);
      let ignoredFields = await clientApiClient.getHashingIgnoredFieldLists();
      ignoredFields.should.equal(expected);
      let ignoredFields2 = await clientApiClient.getHashingIgnoredFieldLists();
      ignoredFields2.should.equal(expected);
      _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
        url: `${clientApiUrl}/hashing-ignored-field-lists`,
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }, 'getHashingIgnoredFieldLists');
    });

    /**
     * @test {ClientApiClient#getHashingIgnoredFieldLists}
     */
    it('should update data when caching time expired', async () => {
      requestStub.resolves(expected);
      let ignoredFields = await clientApiClient.getHashingIgnoredFieldLists();
      ignoredFields.should.equal(expected);
      await clock.tickAsync(61 * 60 * 1000);
      let ignoredFields2 = await clientApiClient.getHashingIgnoredFieldLists();
      ignoredFields2.should.equal(expected);
      _sinon2.default.assert.calledTwice(httpClient.request);
    });

    /**
     * @test {ClientApiClient#getHashingIgnoredFieldLists}
     */
    it('should send one request if two concurrent synchronizations', async () => {
      requestStub.callsFake(async arg => {
        await new _promise2.default(res => setTimeout(res, 50));
        return expected;
      });

      let ignoredFields = await _promise2.default.all([clientApiClient.getHashingIgnoredFieldLists(), clientApiClient.getHashingIgnoredFieldLists()]);
      ignoredFields[0].should.equal(expected);
      ignoredFields[1].should.equal(expected);
      _sinon2.default.assert.calledOnceWithExactly(httpClient.request, {
        url: `${clientApiUrl}/hashing-ignored-field-lists`,
        method: 'GET',
        json: true,
        headers: {
          'auth-token': token
        }
      }, 'getHashingIgnoredFieldLists');
    });

    /**
     * @test {ClientApiClient#getHashingIgnoredFieldLists}
     */
    it('should retry request if received error', async () => {
      let callNumber = 0;
      requestStub.callsFake(async arg => {
        await new _promise2.default(res => setTimeout(res, 50));
        callNumber++;
        if (callNumber < 3) {
          throw new Error('test');
        } else {
          return expected;
        }
      });

      let ignoredFields = [clientApiClient.getHashingIgnoredFieldLists(), clientApiClient.getHashingIgnoredFieldLists()];
      await clock.tickAsync(6000);
      ignoredFields = [await ignoredFields[0], await ignoredFields[1]];
      ignoredFields[0].should.equal(expected);
      ignoredFields[1].should.equal(expected);
      _sinon2.default.assert.callCount(httpClient.request, 3);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,