'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _latencyService = require('./latencyService');

var _latencyService2 = _interopRequireDefault(_latencyService);

var _socket = require('socket.io');

var _socket2 = _interopRequireDefault(_socket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {LatencyService}
 */
describe('LatencyService', () => {

  let io;
  let clock;
  let service;
  let sandbox;
  const token = 'token';
  let client = {
    ensureSubscribe: () => {},
    unsubscribe: () => {},
    getUrlSettings: () => {},
    unsubscribeAccountRegion: () => {},
    getAccountRegion: replicaId => {
      if (replicaId === 'accountIdReplica') {
        return 'new-york';
      } else {
        return 'vint-hill';
      }
    },
    accountReplicas: {
      accountId: {
        'vint-hill': 'accountId',
        'new-york': 'accountIdReplica'
      }
    },
    accountsByReplicaId: {
      accountId: 'accountId',
      accountIdReplica: 'accountId'
    }
  };
  let unsubscribeStub;
  let getUrlSettingsStub;
  let ensureSubscribeStub;
  let unsubscribeRegionStub;

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(async () => {
    clock = _sinon2.default.useFakeTimers({ shouldAdvanceTime: true });
    service = new _latencyService2.default(client, token, 5000);

    io = new _socket2.default(6785, { path: '/ws', pingTimeout: 1000000 });
    io.on('connect', socket => {
      if (socket.request._query['auth-token'] !== 'token') {
        socket.emit({ error: 'UnauthorizedError', message: 'Authorization token invalid' });
        socket.close();
      }
    });
    getUrlSettingsStub = sandbox.stub(client, 'getUrlSettings').resolves({ url: 'http://localhost:6785', isSharedClientApi: true });
    unsubscribeStub = sandbox.stub(client, 'unsubscribe').resolves();
    ensureSubscribeStub = sandbox.stub(client, 'ensureSubscribe').resolves();
    unsubscribeRegionStub = sandbox.stub(client, 'unsubscribeAccountRegion').resolves();
  });

  afterEach(async () => {
    clock.restore();
    sandbox.restore();
    let resolve;
    let promise = new _promise2.default(res => resolve = res);
    io.close(() => resolve());
    await promise;
  });

  /**
   * @test {LatencyService#onConnected}
   */
  it('should process onConnected event', async () => {
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1']);
  });

  /**
   * @test {LatencyService#onConnected}
   */
  it('should disconnect connected instances with bigger ping', async () => {
    clock.tickAsync(3000);
    await service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:new-york:0:ps-mpa-1', 'accountId:vint-hill:0:ps-mpa-1']);
    _sinon2.default.assert.calledWith(unsubscribeStub, 'accountIdReplica');
    _sinon2.default.assert.calledWith(unsubscribeRegionStub, 'accountId', 'new-york');
  });

  /**
   * @test {LatencyService#onDealsSynchronized}
   */
  it('should disconnect synchronized instances with bigger ping', async () => {
    clock.tickAsync(3000);
    await service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:new-york:0:ps-mpa-1');
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:new-york:0:ps-mpa-1', 'accountId:vint-hill:0:ps-mpa-1']);
    _sinon2.default.assert.notCalled(unsubscribeStub);
    await service.onDealsSynchronized('accountId:vint-hill:0:ps-mpa-1');
    _sinon2.default.assert.calledWith(unsubscribeStub, 'accountIdReplica');
    _sinon2.default.assert.calledWith(unsubscribeRegionStub, 'accountId', 'new-york');
  });

  /**
   * @test {LatencyService#onConnected}
   */
  it('should not double check ping if two accounts connected at the same time', async () => {
    service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onConnected('accountId2:new-york:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:new-york:0:ps-mpa-1']);
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId2'), ['accountId2:new-york:0:ps-mpa-1']);
    _sinon2.default.assert.calledOnce(getUrlSettingsStub);
  });

  /**
   * @test {LatencyService#_refreshRegionLatencyJob}
   */
  it('should deploy to a better ping if ping stats changed on refresh', async () => {
    clock.tickAsync(3000);
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:vint-hill:0:ps-mpa-1');
    await service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:new-york:0:ps-mpa-1');
    _sinon2.default.assert.calledWith(unsubscribeStub, 'accountId');
    _sinon2.default.assert.calledWith(unsubscribeRegionStub, 'accountId', 'vint-hill');
    await service.onUnsubscribe('accountId');
    await clock.tickAsync(15 * 60 * 1000 - 2900);
    await service._refreshPromisesByRegion['vint-hill'];
    await clock.tickAsync(1000);
    await new _promise2.default(res => setTimeout(res, 50));
    _sinon2.default.assert.calledWith(ensureSubscribeStub, 'accountId', 0);
    _sinon2.default.assert.calledWith(ensureSubscribeStub, 'accountId', 1);
  });

  /**
   * @test {LatencyService#onDisconnected}
   */
  it('should subscribe replicas on disconnected event if all replicas offline', async () => {
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:vint-hill:0:ps-mpa-1');
    await service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:new-york:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1', 'accountId:new-york:0:ps-mpa-1']);
    _sinon2.default.assert.match(service.getSynchronizedAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1', 'accountId:new-york:0:ps-mpa-1']);
    await service.onDisconnected('accountId:new-york:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1']);
    _sinon2.default.assert.match(service.getSynchronizedAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1']);
    _sinon2.default.assert.notCalled(ensureSubscribeStub);
    await service.onDisconnected('accountId:vint-hill:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), []);
    _sinon2.default.assert.match(service.getSynchronizedAccountInstances('accountId'), []);
    _sinon2.default.assert.calledWith(ensureSubscribeStub, 'accountIdReplica', 0);
    _sinon2.default.assert.calledWith(ensureSubscribeStub, 'accountIdReplica', 1);
  });

  /**
   * @test {LatencyService#onUnsubscribe}
   */
  it('should mark accounts as disconnected on unsubscribe', async () => {
    await service.onConnected('accountId:vint-hill:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:vint-hill:0:ps-mpa-1');
    await service.onConnected('accountId:new-york:0:ps-mpa-1');
    await service.onDealsSynchronized('accountId:new-york:0:ps-mpa-1');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1', 'accountId:new-york:0:ps-mpa-1']);
    _sinon2.default.assert.match(service.getSynchronizedAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1', 'accountId:new-york:0:ps-mpa-1']);
    await service.onUnsubscribe('accountIdReplica');
    _sinon2.default.assert.match(service.getActiveAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1']);
    _sinon2.default.assert.match(service.getSynchronizedAccountInstances('accountId'), ['accountId:vint-hill:0:ps-mpa-1']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,